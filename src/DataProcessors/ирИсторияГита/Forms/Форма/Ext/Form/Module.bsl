Перем мЧтениеТекста;
Перем мФайлРезультата;
Перем мМоментНачала;
Перем мЧистыйЗаголовокФормы;
Перем мОстатокПорции;
Перем мПолеТекстаПоиска;
Перем мИндексГруппыПодсветки;
Перем мСтарыйКоммит;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	выхИменаСвойств = "Реквизит.ПапкаГита, Форма.ЧтоИскать, Форма.МаскаИмениФайла, Форма.ЧислоСтрокКонтекста, Форма.Ветка, Форма.НеВлитые, Форма.ФильтрПодсистем";
	Возврат Неопределено;
КонецФункции

Процедура ПриОткрытии()
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	Если ПустаяСтрока(ПапкаГита) Тогда
		ЭтаФорма.ПапкаГита = ирКлиент.ГитРепозиторий();
	КонецЕсли;
	мЧистыйЗаголовокФормы = Заголовок;
	мПолеТекстаПоиска = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.ИзмененияФайла);
	ЭтаФорма.МаскаИмениФайла = "*.bsl";
	Если ЗначениеЗаполнено(ПараметрЧтоИскать) Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(ЭлементыФормы.ЧтоИскать, ПараметрЧтоИскать);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрИмяМодуля) Тогда
		ИмяФайлаГита = ирКлиент.ИмяФайлаМодуляВПапкеГитаЛкс(ПараметрИмяМодуля, ПапкаГита);
		Если Найти(ПараметрИмяМодуля, ".") = 0 Тогда
			ИмяФайлаГита = ИмяФайлаГита + ирОбщий.РазделительПутиКФайлуЛкс() + "*";
		КонецЕсли;
		ПутьВГите = ПутьВГитеИзИмениФайла(ИмяФайлаГита);
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(ЭлементыФормы.МаскаИмениФайла, ПутьВГите);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура ФайлыКоммитаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	Если ирОбщий.СтрокиРавныЛкс(ДанныеСтроки.ТипФайла, "TXT") Тогда
		Картинка = иркэш.КартинкаПоИмениЛкс("ирПолеТекстовогоДокумента");
	ИначеЕсли ирОбщий.СтрокиРавныЛкс(ДанныеСтроки.ТипФайла, "BSL") Тогда
		Картинка = иркэш.КартинкаПоИмениЛкс("ирАлгоритм");
	ИначеЕсли ирОбщий.СтрокиРавныЛкс(ДанныеСтроки.ТипФайла, "XML") Тогда
		Картинка = иркэш.КартинкаПоИмениЛкс("ирXML");
	ИначеЕсли ирОбщий.СтрокиРавныЛкс(ДанныеСтроки.ТипФайла, "MDO") Тогда
		Картинка = иркэш.КартинкаПоИмениЛкс("ирМетаданные");
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.ТипФайла.УстановитьКартинку(Картинка);
КонецПроцедуры
         
Процедура ПапкаГитаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
КонецПроцедуры

Функция ОформитьТекстИзмененийХтмл(Знач Текст, Знач ПолеТекстаМодуля = Неопределено) Экспорт
	Строки = ирОбщий.СтрРазделитьЛкс(Текст, Символы.ПС);
	ХтмлТекст = Новый Массив;
	НомерСтроки = 0;
	ТекстыМодулей = Неопределено;
	_РежимОтладки = Ложь;
	Если _РежимОтладки Тогда // Можно менять на Истина в точке останова, например условием ирОбщий.Пр(_РежимОтладки, 1, 1)
		// Пассивный оригинал расположенного ниже однострочного кода. Выполняйте изменения синхронно в обоих вариантах.
		Для Каждого Строка Из Строки Цикл
			НомерСтроки = НомерСтроки + 1;
			Если Лев(Строка, 1) = "+" Тогда
				ХтмлТекст.Добавить("<span class='added'>" + Строка + "</span>");
			ИначеЕсли Лев(Строка, 1) = "-" Тогда
				ХтмлТекст.Добавить("<span class='removed'>" + Строка + "</span>");
			ИначеЕсли Найти(Строка, "@@") = 1 Тогда
				Если ПолеТекстаМодуля <> Неопределено Тогда
					ТекстНомераСтроки = ирОбщий.ПервыйФрагментЛкс(ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "+", " "), ",");
					НомерСтроки = Число(ТекстНомераСтроки);
					ИмяМетода = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "> ", " ", Ложь);
					Если ПустаяСтрока(ИмяМетода) И НомерСтроки > 0 Тогда
						ИмяМетода = мПлатформа.НайтиМетодПоНомеруСтроки(ПолеТекстаМодуля, НомерСтроки,, ТекстыМодулей);
						Строка = Сред(Строка, 4); /// Мультиметка250819_000720
					Иначе
						Строка = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "-",,, Истина);
					КонецЕсли;
				Иначе
					Строка = Сред(Строка, 4); /// Мультиметка250819_000720
				КонецЕсли;
				ХтмлТекст.Добавить("<span class='method'>@@&gt; " + ИмяМетода + "</span><span class='header'> " + Строка + "</span>");
			ИначеЕсли Ложь
				Или Найти(Строка, "diff --git") = 1 
				Или Найти(Строка, "index ") = 1 
			Тогда
				ХтмлТекст.Добавить("<span class='header'>" + Строка + "</span>");
			Иначе
				ХтмлТекст.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Однострочный код использован для ускорения при разрешенной отладке. Выше расположен оригинал. Выполняйте изменения синхронно в обоих вариантах. Преобразовано консолью кода из подсистемы "Инструменты разработчика"
		Для Каждого Строка Из Строки Цикл  		НомерСтроки = НомерСтроки + 1;  		Если Лев(Строка, 1) = "+" Тогда  			ХтмлТекст.Добавить("<span class='added'>" + Строка + "</span>");  		ИначеЕсли Лев(Строка, 1) = "-" Тогда  			ХтмлТекст.Добавить("<span class='removed'>" + Строка + "</span>");  		ИначеЕсли Найти(Строка, "@@") = 1 Тогда  			Если ПолеТекстаМодуля <> Неопределено Тогда  				ТекстНомераСтроки = ирОбщий.ПервыйФрагментЛкс(ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "+", " "), ",");  				НомерСтроки = Число(ТекстНомераСтроки);  				ИмяМетода = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "> ", " ", Ложь);  				Если ПустаяСтрока(ИмяМетода) И НомерСтроки > 0 Тогда  					ИмяМетода = мПлатформа.НайтиМетодПоНомеруСтроки(ПолеТекстаМодуля, НомерСтроки,, ТекстыМодулей);  					Строка = Сред(Строка, 4);  				Иначе  					Строка = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "-",,, Истина);  				КонецЕсли;  			Иначе  				Строка = Сред(Строка, 4);  			КонецЕсли;  			ХтмлТекст.Добавить("<span class='method'>@@&gt; " + ИмяМетода + "</span><span class='header'> " + Строка + "</span>");  		ИначеЕсли Ложь  			Или Найти(Строка, "diff --git") = 1  			Или Найти(Строка, "index ") = 1  		Тогда  			ХтмлТекст.Добавить("<span class='header'>" + Строка + "</span>");  		Иначе  			ХтмлТекст.Добавить(Строка);  		КонецЕсли;  	КонецЦикла;  
	КонецЕсли;
	Возврат ирОбщий.СтрСоединитьЛкс(ХтмлТекст, Символы.ПС);
КонецФункции

Процедура ФайлыКоммитаПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ПодключитьОбработчикОжидания("ЗагрузитьИзмененияФайла", 0.1, Истина );
КонецПроцедуры

Процедура ЗагрузитьИзмененияФайла() Экспорт
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы.КПРезультатыПоиска.Доступность = Истина;
	ЭтаФорма.ТекстИзмененийФайла = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.ТекстИзменений;
	Если ПустаяСтрока(ТекстИзмененийФайла) Тогда
		// Почему то так не всегда работает. Видимо связано с русскими буквами. 
		// Например в коммитах слияния для src/InformationRegisters/ОчередьСобытий/Forms/Форма*/Module.bsl работает, но для src/InformationRegisters/ОчередьСобытий/Forms/ФормаСписка/Module.bsl - нет.
		ЭтаФорма.ТекстИзмененийФайла = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "show -m " + ПараметрыФорматированияДляКоманды() + " " + ПараметрыКоммитаДляКоманды()
			+ " -- " + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл,,,,, КодировкаТекста.UTF8);
	КонецЕсли;
	ОбновитьПоискВТекстеФайла();
КонецПроцедуры

Функция ПараметрыФорматированияДляКоманды() Экспорт
	//Результат = "--pretty=format: --unified=" + ЧислоСтрокКонтекста + " ";
	Результат = " --unified=" + ЧислоСтрокКонтекста + " ";
	Возврат Результат;
КонецФункции

Процедура НайденныеКоммитыПриАктивизацииСтроки(Элемент)
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);  
	Если ЭлементыФормы.Коммиты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родители.Очистить();
	Для Каждого Коммит Из ирОбщий.СтрРазделитьЛкс(ЭлементыФормы.Коммиты.ТекущаяСтрока.Родители, " ") Цикл
		СтрокаРодителя = Родители.Добавить();
		СтрокаРодителя.Коммит = Коммит;
		СтрокаРодителя.Номер = Родители.Количество();
	КонецЦикла;
	ЭлементыФормы.Родители.ТекущаяСтрока = Родители[0];
	ПодключитьОбработчикОжидания("ЗаполнитьАтрибутыРодителей", 0.2, Истина);
	ЭлементыФормы.ФайлыКоммита.Колонки.НомерРодителя.Видимость = Родители.Количество() > 1;
	ЗагрузитьФайлыКоммита();
КонецПроцедуры

Процедура ЗагрузитьФайлыКоммита() Экспорт
	ТекущаяСтрокаФайла = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока;
	СтарыйФайл = Неопределено;
	Если ТекущаяСтрокаФайла <> Неопределено Тогда
		СтарыйФайл = ТекущаяСтрокаФайла.Файл;
	КонецЕсли;
	ТекстИзмененийКоммита = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "show -m " + ПараметрыФорматированияДляКоманды() + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит + ПараметрГитаМаскаФайла(),,,,, КодировкаТекста.UTF8);
	ФайлыКоммита.Очистить();
	ЭлементыФормы.КПРезультатыПоиска.Доступность = Ложь;
	мПолеТекстаПоиска.УстановитьТекст("");
	СтрокаФайла = Неопределено;
	СтрокиИзмененийФайла = Новый Массив;
	НомерРодителя = 1;
	МаркерРодителя = "commit " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит + " (from ";
	МаркерФайла = "diff --git a/";
	МаркерПредВерсии = "--- "; /// Строго равны по длине
	МаркерТекВерсии = "+++ "; /// Строго равны по длине
	МаркерОтсутствияВерсии = "/dev/null";
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстИзмененийКоммита + Символы.ПС + МаркерПредВерсии);
	Если ФильтрПодсистем.Количество() > 0 Тогда
		ОбъектыВыбранныхПодсистем = ирОбщий.ОбъектыПодсистемЛкс(ФильтрПодсистем);
	КонецЕсли;
	_РежимОтладки = Ложь;
	Если _РежимОтладки Тогда // Можно менять на Истина в точке останова, например условием ирОбщий.Пр(_РежимОтладки, 1, 1)
		// Пассивный оригинал расположенного ниже однострочного кода. Выполняйте изменения синхронно в обоих вариантах.
		Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			СтрокаИзменений = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерРодителя));
			Если НачалоСтроки = МаркерРодителя Тогда
				НомерРодителя = Родители.Найти(ирОбщий.ТекстМеждуМаркерамиЛкс(СтрокаИзменений, МаркерРодителя, ")"), "Коммит").Номер;
				ТекущийФайл = Неопределено;
			КонецЕсли;
			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерФайла));
			Если НачалоСтроки = МаркерФайла Тогда
				ТекущийФайл = Неопределено;
			КонецЕсли;
			Если ТекущийФайл = Неопределено Тогда
				Модуль = "";
				ПолноеИмяМД = "";
			КонецЕсли;
			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерПредВерсии));
			Если НачалоСтроки = МаркерПредВерсии Тогда
				Если Истина
					И СтрокаФайла <> Неопределено
					И СтрокиИзмененийФайла.Количество() < 10000
				Тогда
					СтрокаФайла.ТекстИзменений = ирОбщий.СтрСоединитьЛкс(СтрокиИзмененийФайла, Символы.ПС);
				КонецЕсли;
				СтрокиИзмененийФайла = Новый Массив;
				ПредФайл = СтрЗаменить(СтрокаИзменений, МаркерПредВерсии + "a/", "");
				Если ПредФайл = МаркерПредВерсии + МаркерОтсутствияВерсии Тогда
					СтатусФайла = "+";
				Иначе
					СтатусФайла = "";
				КонецЕсли;
				СтрокаФайла = Неопределено;
				Продолжить;
			ИначеЕсли НачалоСтроки = МаркерТекВерсии Тогда
				ТекущийФайл = СтрЗаменить(СтрокаИзменений, МаркерТекВерсии + "b/", "");
				ТекущийФайл = СокрП(ТекущийФайл); /// Тут в конце может быть табуляция https://github.com/tormozit/RDT1C/issues/784
				Если ТекущийФайл = МаркерТекВерсии + МаркерОтсутствияВерсии Тогда
					ТекущийФайл = ПредФайл;
					СтатусФайла = "-";
				КонецЕсли;
				Модуль = ИмяМодуляИзИмениФайлаГита(ТекущийФайл);
				Если ЗначениеЗаполнено(Модуль) Тогда
					ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(Модуль, ".Форма.Модуль");
					ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(ПолноеИмяМД, ".Модуль");
					Если ФильтрПодсистем.Количество() > 0 Тогда
						ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(ирОбщий.ПервыеФрагментыЛкс(ПолноеИмяМД));
						Если ОбъектМД <> Неопределено Тогда
							Если ОбъектыВыбранныхПодсистем[ОбъектМД] = Неопределено тогда
								ТекущийФайл = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если ПустаяСтрока(ТекущийФайл) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиИзмененийФайла.Добавить(СтрокаИзменений);
			Если Ложь
				Или Не ЗначениеЗаполнено(ЧтоИскать)
				Или ирОбщий.СтрНайтиЛкс(СтрокаИзменений, ЧтоИскать,,,, Ложь)
			Тогда
				Если СтрокаФайла = Неопределено Тогда
					СтрокаФайла = ФайлыКоммита.Добавить();
					СтрокаФайла.Файл = ТекущийФайл;
					СтрокаФайла.ТипФайла = ВРег(ирОбщий.ПоследнийФрагментЛкс(ТекущийФайл));
					Если Найти(СтрокаФайла.ТипФайла, "/") Тогда
						СтрокаФайла.ТипФайла = "";
					КонецЕсли;
					СтрокаФайла.Модуль = Модуль;
					СтрокаФайла.ПолноеИмяМД = ПолноеИмяМД;
					СтрокаФайла.Статус = СтатусФайла;
					СтрокаФайла.НомерРодителя = НомерРодителя;
				КонецЕсли;
				Если Лев(СтрокаИзменений, 1) = "+" Тогда
					СтрокаФайла.ДобавленоСтрок = СтрокаФайла.ДобавленоСтрок + 1;
				ИначеЕсли Лев(СтрокаИзменений, 1) = "-" Тогда
					СтрокаФайла.УдаленоСтрок = СтрокаФайла.УдаленоСтрок + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Однострочный код использован для ускорения при разрешенной отладке. Выше расположен оригинал. Выполняйте изменения синхронно в обоих вариантах. Преобразовано консолью кода из подсистемы "Инструменты разработчика"
		Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл  			СтрокаИзменений = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);  			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерРодителя));  			Если НачалоСтроки = МаркерРодителя Тогда  				НомерРодителя = Родители.Найти(ирОбщий.ТекстМеждуМаркерамиЛкс(СтрокаИзменений, МаркерРодителя, ")"), "Коммит").Номер;  				ТекущийФайл = Неопределено;  			КонецЕсли;  			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерФайла));  			Если НачалоСтроки = МаркерФайла Тогда  				ТекущийФайл = Неопределено;  			КонецЕсли;  			Если ТекущийФайл = Неопределено Тогда  				Модуль = "";  				ПолноеИмяМД = "";  			КонецЕсли;  			НачалоСтроки = Лев(СтрокаИзменений, СтрДлина(МаркерПредВерсии));  			Если НачалоСтроки = МаркерПредВерсии Тогда  				Если Истина  					И СтрокаФайла <> Неопределено  					И СтрокиИзмененийФайла.Количество() < 10000  				Тогда  					СтрокаФайла.ТекстИзменений = ирОбщий.СтрСоединитьЛкс(СтрокиИзмененийФайла, Символы.ПС);  				КонецЕсли;  				СтрокиИзмененийФайла = Новый Массив;  				ПредФайл = СтрЗаменить(СтрокаИзменений, МаркерПредВерсии + "a/", "");  				Если ПредФайл = МаркерПредВерсии + МаркерОтсутствияВерсии Тогда  					СтатусФайла = "+";  				Иначе  					СтатусФайла = "";  				КонецЕсли;  				СтрокаФайла = Неопределено;  				Продолжить;  			ИначеЕсли НачалоСтроки = МаркерТекВерсии Тогда  				ТекущийФайл = СтрЗаменить(СтрокаИзменений, МаркерТекВерсии + "b/", "");  				ТекущийФайл = СокрП(ТекущийФайл);  				Если ТекущийФайл = МаркерТекВерсии + МаркерОтсутствияВерсии Тогда  					ТекущийФайл = ПредФайл;  					СтатусФайла = "-";  				КонецЕсли;  				Модуль = ИмяМодуляИзИмениФайлаГита(ТекущийФайл);  				Если ЗначениеЗаполнено(Модуль) Тогда  					ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(Модуль, ".Форма.Модуль");  					ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(ПолноеИмяМД, ".Модуль");  					Если ФильтрПодсистем.Количество() > 0 Тогда  						ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(ирОбщий.ПервыеФрагментыЛкс(ПолноеИмяМД));  						Если ОбъектМД <> Неопределено Тогда  							Если ОбъектыВыбранныхПодсистем[ОбъектМД] = Неопределено тогда  								ТекущийФайл = Неопределено;  							КонецЕсли;  						КонецЕсли;  					КонецЕсли;  				КонецЕсли;  				Продолжить;  			КонецЕсли;  			Если ПустаяСтрока(ТекущийФайл) Тогда  				Продолжить;  			КонецЕсли;  			СтрокиИзмененийФайла.Добавить(СтрокаИзменений);  			Если Ложь  				Или Не ЗначениеЗаполнено(ЧтоИскать)  				Или ирОбщий.СтрНайтиЛкс(СтрокаИзменений, ЧтоИскать,,,, Ложь)  			Тогда  				Если СтрокаФайла = Неопределено Тогда  					СтрокаФайла = ФайлыКоммита.Добавить();  					СтрокаФайла.Файл = ТекущийФайл;  					СтрокаФайла.ТипФайла = ВРег(ирОбщий.ПоследнийФрагментЛкс(ТекущийФайл));  					Если Найти(СтрокаФайла.ТипФайла, "/") Тогда  						СтрокаФайла.ТипФайла = "";  					КонецЕсли;  					СтрокаФайла.Модуль = Модуль;  					СтрокаФайла.ПолноеИмяМД = ПолноеИмяМД;  					СтрокаФайла.Статус = СтатусФайла;  					СтрокаФайла.НомерРодителя = НомерРодителя;  				КонецЕсли;  				Если Лев(СтрокаИзменений, 1) = "+" Тогда  					СтрокаФайла.ДобавленоСтрок = СтрокаФайла.ДобавленоСтрок + 1;  				ИначеЕсли Лев(СтрокаИзменений, 1) = "-" Тогда  					СтрокаФайла.УдаленоСтрок = СтрокаФайла.УдаленоСтрок + 1;  				КонецЕсли;  			КонецЕсли;  		КонецЦикла;  
	КонецЕсли;
	Если ЗначениеЗаполнено(ЧтоИскать) Тогда
		Для Индекс = 1 - ФайлыКоммита.Количество() По 0 Цикл // Обратный обход
			СтрокаФайла = ФайлыКоммита[-Индекс];
			Если СтрокаФайла.ДобавленоСтрок = 0 И СтрокаФайла.УдаленоСтрок = 0 Тогда
				ФайлыКоммита.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ФайлыКоммита.Количество() Тогда
		ФайлыКоммита.Сортировать("Файл");
		Если СтарыйФайл <> Неопределено Тогда
			НоваяТекущаяСтрока = ФайлыКоммита.Найти(СтарыйФайл, "Файл");
			Если НоваяТекущаяСтрока <> Неопределено Тогда
				ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = НоваяТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = ФайлыКоммита[0];
		КонецЕсли;
	КонецЕсли;
	Если ЭлементыФормы.Коммиты.ТекущаяСтрока.Слияние Тогда
		ЭлементыФормы.Коммиты.ТекущаяСтрока.Файлов = ФайлыКоммита.Количество();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАтрибутыРодителей() Экспорт
	Если ЭлементыФормы.Коммиты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстРодителей = ирОбщий.ВыполнитьКомандуОСЛкс(
			НачалоКомандыГита() + " show --no-patch --pretty=format:""%P"" " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит + " | for /f ""tokens=*"" %i in ('more') do @for %j in (%i) do @"
			+ НачалоКомандыГита() + "--no-pager log" + ПараметрыВыводаДанныхКоммита() + " -1 %j",,,,, КодировкаТекста.UTF8);
	ЗагрузитьСписокКоммитов(Родители, ТекстРодителей);
	ЭлементыФормы.Коммиты.ТекущаяСтрока.ДнейОтРодителя = ирОбщий.РазностьДатЛкс(ирОбщий.ЛучшиеЭлементыКоллекцииЛкс(Родители, "Дата", Ложь,, Истина).Дата, ЭлементыФормы.Коммиты.ТекущаяСтрока.Дата, "День");
КонецПроцедуры

Процедура НайденныеКоммитыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ЧтоИскатьПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура ПапкаГитаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ОчиститьРезультаты();
КонецПроцедуры

Процедура ЧтоИскатьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ПапкаГитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ДействияФормыЗагрузить(Кнопка)
	Если мФайлРезультата = Неопределено Тогда
		ТекущаяСтрока = ЭлементыФормы.Коммиты.ТекущаяСтрока;
		мСтарыйКоммит = Неопределено;
		Если ТекущаяСтрока <> Неопределено Тогда
			мСтарыйКоммит = ТекущаяСтрока.Коммит;
		КонецЕсли;
		Результат = ирОбщий.ВыполнитьКомандуОСЛкс("git config --global core.quotepath false",,,,, КодировкаТекста.UTF8); /// Отключаем экранирование высоких символов в именах файлов
		КомандаСистемы = НачалоКомандыГита() + " --no-pager log" + ПараметрыВыводаДанныхКоммита(Истина, Истина);
		ФайлИскомойСтроки = Новый Файл(ПолучитьИмяВременногоФайла("txt"));
		Если ЗначениеЗаполнено(ЧтоИскать) Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ирОбщий.ТекстВВыражениеВстроенногоЯзыкаЛкс(ЧтоИскать)); 
			ТекстовыйДокумент.Записать(ФайлИскомойСтроки.ПолноеИмя, КодировкаТекста.UTF8);
			КомандаСистемы = КомандаСистемы + " -m -S $searchString";
			//КомандаСистемы = КомандаСистемы + " -m -G""" + ирОбщий.ТекстВВыражениеВстроенногоЯзыкаЛкс(РегВыражениеПоиска()) + """";
		КонецЕсли;
		Если ЗначениеЗаполнено(Ветка) Тогда
			КомандаСистемы = КомандаСистемы + " """ + Ветка + """";
			Если НеВлитые Тогда
				КомандаСистемы = КомандаСистемы + "..";
			КонецЕсли;
		КонецЕсли;
		КомандаСистемы = КомандаСистемы + ПараметрГитаМаскаФайла();
		
		//мФайлРезультата = ирОбщий.ВыполнитьКомандуОСЛкс(КомандаСистемы, Ложь,,,, КодировкаТекста.UTF8, Истина); /// Так не нашел способ передать кавычки
		мФайлРезультата = Новый Файл(ПолучитьИмяВременногоФайла("txt"));
		КомандаСистемы = ирОбщий.СтрЗаменитьЛкс(КомандаСистемы, """", "\""");
		КомандаСистемы = 
		"powershell -NoProfile -Command ""& { $OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8;"
		+"$searchString = [IO.File]::ReadAllText('" + ФайлИскомойСтроки.ПолноеИмя + "', [Text.Encoding]::UTF8).Trim();"
		+"" + КомандаСистемы + " | Out-File -FilePath \""" + мФайлРезультата.ПолноеИмя + "\"" -Encoding " + КодировкаТекста.UTF8 + " -Append -NoNewline;"
		+"[IO.File]::Delete('" + ФайлИскомойСтроки.ПолноеИмя + "');}";
		ирОбщий.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершенияЛкс(КомандаСистемы, мФайлРезультата.Путь,, Ложь);

		ОчиститьРезультаты();
		ЭлементыФормы.ДействияФормы.Кнопки.Загрузить.Картинка = ирКэш.КартинкаПоИмениЛкс("ирОстановить");
		ЗагрузитьРезультаты();   
	Иначе
		мФайлРезультата = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция РегВыражениеПоиска() Экспорт
	Результат = ирОбщий.ТекстДляРегВыраженияЛкс(ЧтоИскать);
	Возврат Результат;
КонецФункции

Функция ПараметрыВыводаДанныхКоммита(Знач ДляPowerShell = Ложь, Знач ДобавитьСтатистику = Ложь) Экспорт
	Результат = " --pretty=format:'|%H|%ad|%an|%s|%P|%d|' --date=format:'%d.%m.%Y %H:%M:%S'";
	Если ДобавитьСтатистику Тогда
		Результат = Результат + " --shortstat";
	КонецЕсли;
	Если Не ДляPowerShell Тогда
		//Результат = СтрЗаменить(Результат, "%", "%%");
		Результат = СтрЗаменить(Результат, "'", """");
		//Результат = СтрЗаменить(Результат, "=", "^=");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ОчиститьРезультаты() Экспорт
	мМоментНачала = ТекущаяДата();
	Коммиты.Очистить();
	Родители.Очистить();
	ФайлыКоммита.Очистить();
	ТекстИзмененийФайла = "";
	мПолеТекстаПоиска.УстановитьТелоHTML("");
	мОстатокПорции = "";
	мЧтениеТекста = Неопределено;
КонецПроцедуры

Функция ПараметрГитаМаскаФайла() Экспорт
	МаскаИмениФайлаРезультат = МаскаИмениФайла;
	Если ПустаяСтрока(МаскаИмениФайлаРезультат) Тогда
		МаскаИмениФайлаРезультат = ":!*.bin";
	КонецЕсли;
	ПараметрГитаМаскаФайла = " --full-history -- """ + МаскаИмениФайлаРезультат + """";
	Возврат ПараметрГитаМаскаФайла;
КонецФункции

Процедура ЗагрузитьРезультаты()
	ЭлементыФормы.ЧтоИскать.ЦветТекстаПоля = Новый Цвет;
	ЭлементыФормы.МаскаИмениФайла.ЦветТекстаПоля = Новый Цвет;
	ЭлементыФормы.Ветка.ЦветТекстаПоля = Новый Цвет;
	ПрошлоСекунд = ТекущаяДата() - мМоментНачала;
	Если мФайлРезультата = Неопределено Тогда
		ПоискЗакончен = Истина;
	Иначе
		ПоискЗакончен = Ложь;
		ЭтаФорма.Заголовок = ирОбщий.ПредставлениеДлительностиЛкс(ПрошлоСекунд) + "-" + мЧистыйЗаголовокФормы;
		Если мФайлРезультата.Существует() Тогда
			Если мЧтениеТекста = Неопределено Тогда
				мЧтениеТекста = Новый ЧтениеТекста(мФайлРезультата.ПолноеИмя,,,, Ложь);
			КонецЕсли;
			Попытка 
				ирОбщий.ПрочитатьТекстИзФайлаЛкс(мФайлРезультата.ПолноеИмя);
				ПоискЗакончен = Истина;
			Исключение
			КонецПопытки;
			ПорцияРезультатов = мЧтениеТекста.Прочитать();
			Если ПорцияРезультатов <> Неопределено Тогда
				ТекстДляАнализа = мОстатокПорции + ПорцияРезультатов;
				Вхождения = ЗагрузитьСписокКоммитов(Коммиты, ТекстДляАнализа);
				ПоследнееВхождение = Вхождения[Вхождения.Количество() - 1];
				мОстатокПорции = Сред(ПорцияРезультатов, ПоследнееВхождение.ПозицияВхождения + ПоследнееВхождение.ДлинаВхождения + 2);
			КонецЕсли;
		ИначеЕсли ПрошлоСекунд > 10 Тогда
			ПоискЗакончен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПоискЗакончен Тогда
		ЭтаФорма.Заголовок = мЧистыйЗаголовокФормы;
		ЭлементыФормы.ДействияФормы.Кнопки.Загрузить.Картинка = Новый Картинка;
		мФайлРезультата = Неопределено; 
	Иначе
		ПодключитьОбработчикОжидания("ЗагрузитьРезультаты", 1, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьСписокКоммитов(Знач ТаблицаКоммитов, Знач ТекстДляАнализа) Экспорт
	// Формат вывода см. ПараметрыВыводаДанныхКоммита
	АктивироватьСтарыйКоммит = Истина
		И мСтарыйКоммит <> Неопределено
		И (Ложь
			Или ЭлементыФормы.Коммиты.ТекущаяСтрока = Неопределено
			Или ЭлементыФормы.Коммиты.ТекущаяСтрока = Коммиты[0]);
	ИменаГрупп = "Коммит, Дата, Автор, Комментарий, Родители, Метки, Статистика"; 
	Вхождения = ирОбщий.НайтиРегВыражениеЛкс(ТекстДляАнализа, "\s*" + ирОбщий.СтрокаПовторомЛкс("\|([^\|]*)", 7), ИменаГрупп);
	//Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(Вхождения.Количество(), "Загрузка порции коммитов");
	Для Каждого ВхожденияЭлемент Из Вхождения Цикл
		//ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		СтрокаТаблицы = ТаблицаКоммитов.Найти(ВхожденияЭлемент.Коммит, "Коммит");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаКоммитов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВхожденияЭлемент, СтрЗаменить(ИменаГрупп, ", Статистика", ""));
		СтрокаТаблицы.Слияние = Найти(СтрокаТаблицы.Родители, " ");
		Если ЗначениеЗаполнено(ВхожденияЭлемент.Статистика) Тогда
			СтрокаТаблицы.Файлов = Число(ирОбщий.ПервыйФрагментЛкс(СокрЛ(ВхожденияЭлемент.Статистика), " "));
		КонецЕсли;
		Если Истина
			И АктивироватьСтарыйКоммит 
			И СтрокаТаблицы.Коммит = мСтарыйКоммит 
			И ТаблицаКоммитов = Коммиты
		Тогда
			ЭлементыФормы.Коммиты.ТекущаяСтрока = СтрокаТаблицы;
		КонецЕсли;
	КонецЦикла;
	//ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	Возврат Вхождения;
КонецФункции

Процедура ОбновитьПоискВТекстеФайла(Знач ПереносСлов = Ложь)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.ТипФайла = "BSL" Тогда
		ПолеТекстаМодуля = ирОбщий.НовыйАнализаторКодаЛкс(0);
		ПолеТекстаМодуля.УстановитьТекстБезМетаданных(ТекстВерсииФайла());
	Иначе
		ПолеТекстаМодуля = Неопределено;
	КонецЕсли;
	ТекстХтмл = ТекстИзмененийФайла;
	Если ЗначениеЗаполнено(ЧтоИскать) Тогда
		ТекстХтмл = ОформитьТекстИзмененийХтмл(ТекстХтмл, ПолеТекстаМодуля);
		мПолеТекстаПоиска.УстановитьТелоHTML(ТекстХтмл, ПереносСлов);
		ТекстИзмененийФайла = мПолеТекстаПоиска.ПолучитьТекст(Ложь);
		ВыражениеПоискаСлов = "(?:\n|^)(?:\+|\-)[^\n]*(" + РегВыражениеПоиска() + ")[^\n]*(?=\n|$)";
		мИндексГруппыПодсветки = 0;
		РезультатыПоиска = ирОбщий.НайтиРегВыражениеЛкс(ТекстИзмененийФайла, ВыражениеПоискаСлов,,, Истина,, Ложь);
		РезультатыПоиска.Сортировать("ПозицияВхождения");
		РезультатыПоиска.Колонки.ПозицияВхождения.Имя = "ПозицияГруппы";
		РезультатыПоиска.Колонки.ДлинаВхождения.Имя = "ДлинаГруппы";
		РезультатыПоиска.Колонки.ТекстВхождения.Имя = "Значение";
		РезультатыПоиска.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
		ирОбщий.ЗаполнитьКолонкуПорядкаТаблицыЛкс(РезультатыПоиска, "Номер");
		РезультатыПоиска.ЗагрузитьКолонку(РезультатыПоиска.ВыгрузитьКолонку("ДлинаГруппы"), "Длина");
		ТекстХтмл = мПолеТекстаПоиска.РазметитьТекстРезультатамиПоиска(ТекстИзмененийФайла, РезультатыПоиска, мИндексГруппыПодсветки);
	Иначе
		ТекстХтмл = ТекстИзмененийФайла;
	КонецЕсли;
	ТекстХтмл = ОформитьТекстИзмененийХтмл(ТекстХтмл, ПолеТекстаМодуля);
	Стили = 
	".added { background-color: #ddffdd; }
    |.removed { background-color: #ffdddd; }
	|.method { color: #000080; }
    |.header { color: #666666; font-weight: bold; }";
	мПолеТекстаПоиска.УстановитьТелоHTML(ТекстХтмл, ПереносСлов, Стили, Ложь);
	//СтарыйТекущийЭлемент = ТекущийЭлемент;
	//ЭтаФорма.ТекущийЭлемент = мПолеТекстаПоиска.ЭлементФормы; /// Для лечения проблемы платформы установки фокуса ввода
	СледующееВхождениеНажатие();
	//ЭтаФорма.ТекущийЭлемент = СтарыйТекущийЭлемент; // Если раскомментировать, то все равно будет проблема платформы установки фокуса ввода
КонецПроцедуры

Процедура ПредыдущееВхождениеНажатие(Элемент = Неопределено)
	//мПолеТекстаПоиска.ПредыдущееВхождениеНажатие(мИндексГруппыПодсветки, Истина);
	мПолеТекстаПоиска.ПредыдущееВхождениеНажатие(мИндексГруппыПодсветки);
КонецПроцедуры

Процедура СледующееВхождениеНажатие(Элемент = Неопределено)
	//мПолеТекстаПоиска.СледующееВхождениеНажатие(мИндексГруппыПодсветки, Истина);
	мПолеТекстаПоиска.СледующееВхождениеНажатие(мИндексГруппыПодсветки);
КонецПроцедуры

Процедура МаскаИмениФайлаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура МаскаИмениФайлаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ИзмененияФайлаДокументСформирован(Элемент)
	СледующееВхождениеНажатие();
КонецПроцедуры

Процедура ПапкаГитаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ирКлиент.ПолеФайловогоКаталога_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ВеткаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура ВеткаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ВеткаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВеток = Новый СписокЗначений;
	Текст = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "branch",,,,, КодировкаТекста.UTF8);
	Текст = СтрЗаменить(Текст, "* ", "");
	СписокВеток.ЗагрузитьЗначения(ирОбщий.СтрРазделитьЛкс(Текст, Символы.ПС));
	СписокВеток.СортироватьПоЗначению();
	ЭлементСписка = СписокВеток.НайтиПоЗначению(Ветка);
	ВыбранныйЭлемент = СписокВеток.ВыбратьЭлемент(, ЭлементСписка);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

Функция НачалоКомандыГита() Экспорт
	Возврат "git -C """ + ПапкаГита + """ ";
КонецФункции

Процедура МаскаИмениФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("мета", "Из метаданных");
	СписокВариантов.Добавить("файл", "Из каталога гита");
	ВыбранныйВариант = ЭтаФорма.ВыбратьИзСписка(СписокВариантов, Элемент);
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныйВариант.Значение = "мета" Тогда
		ИмяФайла = "";
		ИмяФайлаБезМаски = ирОбщий.ПервыйФрагментЛкс(МаскаИмениФайла, "*");
		Если Прав(ИмяФайлаБезМаски, 1) = "/" Тогда
			ИмяФайлаБезМаски = ирОбщий.СтрокаБезКонцаЛкс(ИмяФайлаБезМаски);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяФайлаБезМаски) Тогда
			ПолноеИмяМД = "";
			ИмяМодуля = ИмяМодуляИзИмениФайлаГита(ИмяФайлаБезМаски);
			Если ЗначениеЗаполнено(ИмяМодуля) Тогда
				ОбъектМД = Метаданные.НайтиПоПолномуИмени(ИмяМодуля);
				Если ОбъектМД <> Неопределено Тогда
					ПолноеИмяМД = ОбъектМД.ПолноеИмя();
				Иначе
					ПолеТекстаМодуля = мПлатформа.ПолеТекстаМодуля(ИмяМодуля);
					ОбъектМД = ПолеТекстаМодуля.СтруктураТипаМодуля().Метаданные;
				КонецЕсли;
				Если ирОбщий.ЛиФормаИлиИмитаторЛкс(ОбъектМД) Тогда
					ПолноеИмяМД = ирОбщий.ПолноеИмяФормыЛкс(ОбъектМД);
				ИначеЕсли ОбъектМД <> Неопределено Тогда
					ПолноеИмяМД = ОбъектМД.ПолноеИмя();
				КонецЕсли;
				ПолноеИмяМД = ирОбщий.ПервыеФрагментыЛкс(ПолноеИмяМД);
			КонецЕсли;
		КонецЕсли;
		ПолноеИмяМД = ирКлиент.ВыбратьОбъектМетаданныхЛкс(, ПолноеИмяМД);
		Если ЗначениеЗаполнено(ПолноеИмяМД) Тогда
			ИмяФайла = ирКлиент.ИмяФайлаМодуляВПапкеГитаЛкс(ПолноеИмяМД, ПапкаГита) + ирОбщий.РазделительПутиКФайлуЛкс() + "*";
		КонецЕсли;
	Иначе
		ПолноеИмяФайла = "";
		Если Найти(МаскаИмениФайла, "*") = 0 Тогда
			ПолноеИмяФайла = ПапкаГита + ирОбщий.РазделительПутиКФайлуЛкс() + СтрЗаменить(Элемент.Значение, "/", ирОбщий.РазделительПутиКФайлуЛкс());
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Не Файл.Существует() Тогда
				ПолноеИмяФайла = "";
			КонецЕсли;
		КонецЕсли;
		ИмяФайла = ирКлиент.ВыбратьФайлЛкс(,,, ПолноеИмяФайла, ПапкаГита,, "Выберите файл из репозитория");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ПутьВГитеИзИмениФайла(ИмяФайла);
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Функция ПутьВГитеИзИмениФайла(Знач ИмяФайла) Экспорт
	ИмяФайла = ирОбщий.СтрЗаменитьЛкс(ИмяФайла, ПапкаГита, "");
	Если Лев(ИмяФайла, 1) = ирОбщий.РазделительПутиКФайлуЛкс() Тогда
		ИмяФайла = Сред(ИмяФайла, 2);
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла, ирОбщий.РазделительПутиКФайлуЛкс(), "/");
	Возврат ИмяФайла;
КонецФункции

Процедура КоммитыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ирКлиент.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура КПРезультатыПоискаСравнитьВСравнителеТекстов(Кнопка)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстТекущий = ТекстВерсииФайла();
	ТекстПредыдущий = ТекстВерсииФайла(Истина);
	НомерСтроки2 = НомерСтрокиВМодуле();
	ирКлиент.СравнитьЗначенияВФормеЧерезXMLЛкс(ТекстПредыдущий, ТекстТекущий,, "Версия предыдущая", "Версия коммита",, "ВстроенныйЯзык",,,,, НомерСтроки2);
КонецПроцедуры

Функция НомерСтрокиВМодуле(Знач ЛиПредыдущаяВерсия = Ложь) Экспорт
	НачальнаяПозицияВыделения = Макс(1, мПолеТекстаПоиска.ПолучитьВыделениеВДокументеHTML().Начало);
	ПозицияНачалаЗаголовкаБлока = ирОбщий.СтрНайтиЛкс(ТекстИзмененийФайла, Символы.ПС + "@@>", Истина, НачальнаяПозицияВыделения);
	ПозицияКонцаЗаголовкаБлока = ирОбщий.СтрНайтиЛкс(ТекстИзмененийФайла, Символы.ПС,, ПозицияНачалаЗаголовкаБлока + 1);
	ЗаголовокБлока = Сред(ТекстИзмененийФайла, ПозицияНачалаЗаголовкаБлока, ПозицияКонцаЗаголовкаБлока - ПозицияНачалаЗаголовкаБлока);
	НачальныйМаркер = ?(ЛиПредыдущаяВерсия, "-", "+");
	ТекстНомераСтроки = ирОбщий.ТекстМеждуМаркерамиЛкс(ЗаголовокБлока, НачальныйМаркер, ",", Ложь);
	НомерСтроки1 = 1;
	Если ЗначениеЗаполнено(ТекстНомераСтроки) Тогда
		НачалоБлока = Сред(ТекстИзмененийФайла, ПозицияКонцаЗаголовкаБлока, НачальнаяПозицияВыделения - ПозицияКонцаЗаголовкаБлока - 1);
		ЧислоСтрокКонтекстаБлока = СтрЧислоВхождений(НачалоБлока, Символы.ПС + " ");
		ЧислоИзменныхСтрок = СтрЧислоВхождений(НачалоБлока, Символы.ПС + НачальныйМаркер);
		НомерСтроки1 = Число(ТекстНомераСтроки) - 1 + ЧислоСтрокКонтекстаБлока + ЧислоИзменныхСтрок;
	КонецЕсли;
	Возврат НомерСтроки1;
КонецФункции

Функция ИмяМодуляИзИмениФайлаГита(Знач ИмяФайла) Экспорт
	ЛиМножественное = Истина;
	РасширениеФайла = ирОбщий.ПоследнийФрагментЛкс(ИмяФайла);
	Фрагменты = ирОбщий.СтрРазделитьЛкс(ирОбщий.СтрокаБезПоследнегоФрагментаЛкс(ИмяФайла), "/");
	Пока Фрагменты.Количество() > 1 Цикл
		Фрагмент = Фрагменты[0];
		Фрагменты.Удалить(0);
		Если Фрагмент = "src" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяФайлаМодуляВГите = "";
	Разделитель = ".";
	ЭтоФорма = Ложь;
	ЧислоСлужебныхФрагментов = 0;
	Для Индекс = 0 По Фрагменты.Количество() / 2 - 1 Цикл
		ИмяАнг = Фрагменты[Индекс * 2];
		Если ИмяАнг = "Ext" Тогда
			// GitSync
			ЧислоСлужебныхФрагментов = ЧислоСлужебныхФрагментов + 1;
			ИмяАнг = Фрагменты[Индекс * 2 + 1];
			Если ИмяАнг = "Form" Тогда
				ЭтоФорма = Истина;
			КонецЕсли;
		Иначе
			Если ЛиМножественное Тогда
				КонецМножественного = "s";
				Если ирОбщий.СтрКончаетсяНаЛкс(ИмяАнг, КонецМножественного) Тогда
					ИмяАнг = ирОбщий.СтрокаБезКонцаЛкс(ИмяАнг, СтрДлина(КонецМножественного));
				КонецЕсли;
				//Если ИмяАнг = "Form" Тогда
				//	ЭтоФормаEDT = Истина;
				//КонецЕсли;
			КонецЕсли;
			ИмяРус = ирОбщий.ПеревестиВРусский(ИмяАнг);
			Если ИмяРус = Неопределено Тогда
				ИмяРус = ИмяАнг;
			КонецЕсли;
			Если Не ПустаяСтрока(ИмяФайлаМодуляВГите) Тогда
				ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + Разделитель;
			КонецЕсли;
			ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + ИмяРус;
			ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + Разделитель + Фрагменты[Индекс * 2 + 1];
		КонецЕсли;
	КонецЦикла;
	Результат = ИмяФайлаМодуляВГите;
	Если ЭтоФорма Тогда
		Если ирОбщий.СтрокиРавныЛкс(РасширениеФайла, "bsl") Тогда
			Результат = Результат + ".Форма.Модуль";
		КонецЕсли;
	ИначеЕсли (Фрагменты.Количество() - ЧислоСлужебныхФрагментов) % 2 = 1 Тогда
		ИмяАнг = ирОбщий.ПервыйФрагментЛкс(Фрагменты[Фрагменты.ВГраница()]);
		ИмяРус = ирОбщий.ПеревестиВРусский(ИмяАнг);
		Если Истина
			И ИмяРус <> ИмяАнг
			И ИмяРус <> "Макет" 
		Тогда
			Результат = Результат + Разделитель + ИмяРус;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ДействияФормыОткрытьВКонфигураторе(Кнопка)
	ИмяМодуля = Неопределено; // Строка
	Ссылка = СсылкаНаСтрокуАктуальнойВерсии(ИмяМодуля);
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ирКлиент.ОткрытьСсылкуСтрокиМодуляЛкс(Ссылка) Тогда 
		ПолеТекстаЛ = ирКлиент.ОткрытьПолеТекстаМодуляКонфигурацииЛкс(ИмяМодуля);
		Если ПолеТекстаЛ <> Неопределено Тогда
			ПолеТекстаЛ.ПерейтиПоСсылкеСтрокиМодуля(Ссылка, Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СсылкаНаСтрокуАктуальнойВерсии(ИмяМодуля = Неопределено) Экспорт
	СтрокаФайла = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока;
	Если СтрокаФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекстВерсииФайла = ТекстВерсииФайла();
	ИмяМодуля = ИмяМодуляИзИмениФайлаГита(СтрокаФайла.Файл);
	НомерСтрокиМодуля = НомерСтрокиВМодуле();
	Если ирОбщий.СтрокиРавныЛкс(СтрокаФайла.ТипФайла, "BSL") Тогда
		МодульВерсии = мПлатформа.МодульМетаданных(ТекстВерсииФайла);
		ПолеТекстаМодуля = ирОбщий.НовыйАнализаторКодаЛкс(0);
		ПолеТекстаМодуля.ЗагрузитьМодульМетаданных(МодульВерсии);
		ПолеТекстаМодуля.УстановитьГраницыВыделения(НомерСтрокиМодуля, 1, НомерСтрокиМодуля, 1, Истина);
		ПолеТекстаМодуля.РазобратьТекущийКонтекст();
		ПолеТекстаМодуля.мИмяМодуля = ИмяМодуля;
		Ссылка = ПолеТекстаМодуля.СсылкаСтрокиМодуля(НомерСтрокиМодуля);
	Иначе
		ВыделениеДвумерное = мПолеТекстаПоиска.ВыделениеДвумерное();
		ВыделениеДвумерное.НачальнаяСтрока = НомерСтрокиМодуля;
		ВыделениеДвумерное.КонечнаяСтрока = НомерСтрокиМодуля;
		ирКлиент.ОткрытьТекстЛкс(ТекстВерсииФайла, ИмяМодуля, "Обычный", Истина, ИмяМодуля,,,, ВыделениеДвумерное);
	КонецЕсли;
	Возврат Ссылка;
КонецФункции

Функция ТекстВерсииФайла(Знач ЛиПредыдущаяВерсия = Ложь) Экспорт
	Команда = НачалоКомандыГита() + "show -m ";
	Если ЛиПредыдущаяВерсия Тогда
		// В коммите слияния почему то работает только для первого файла
		//Команда = Команда + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит
		//	+ ?(Не ЭлементыФормы.Коммиты.ТекущаяСтрока.Слияние, "~", "^^" + ЭлементыФормы.Родители.ТекущаяСтрока.Номер);
		Команда = Команда + ?(Родители.Количество() = 1, Родители[0].Коммит, Родители.Найти(ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.НомерРодителя, "Номер").Коммит);
	Иначе
		Команда = Команда + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит;
	КонецЕсли;
	Команда = Команда + ":""" + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл + """";
	Текст = ирОбщий.ВыполнитьКомандуОСЛкс(Команда,,,,, КодировкаТекста.UTF8);
	Возврат Текст;
КонецФункции

Процедура КПРезультатыПоискаСсылка(Кнопка)
	Ссылка = СсылкаНаСтрокуАктуальнойВерсии();
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ПоказатьСсылкуНаСтрокуМодуляЛкс(Ссылка);
КонецПроцедуры

Процедура ЧислоСтрокКонтекстаПриИзменении(Элемент)
	//ПодключитьОбработчикОжидания("ЗагрузитьИзмененияФайла", 0.1, Истина );
	ПодключитьОбработчикОжидания("ЗагрузитьФайлыКоммита", 0.1, Истина );
КонецПроцедуры

Процедура РодителиПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.Родители.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры

Функция ПараметрыКоммитаДляКоманды() Экспорт
	ПараметрыКоммитаДляКоманды = ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит
		+ ?(Родители.Количество() = 1, "", "^^" + ЭлементыФормы.Родители.ТекущаяСтрока.Номер);
	Возврат ПараметрыКоммитаДляКоманды;
КонецФункции

Процедура РодителиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ФильтрФайловНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ФильтрФайловПриИзменении(Элемент)
	ЭлементОтбора = ЭлементыФормы.ФайлыКоммита.ОтборСтрок.Файл;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(Элемент.Значение);
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура КПФайлыКоммитаОткрытьОбъектМетаданных(Кнопка)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяМД = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.ПолноеИмяМД;
	Если ПустаяСтрока(ПолноеИмяМД) Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ОткрытьОбъектМетаданныхЛкс(ПолноеИмяМД);
КонецПроцедуры

Процедура РодителиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаКоммита = Коммиты.Найти(ВыбраннаяСтрока.Коммит, "Коммит");
	Если СтрокаКоммита = Неопределено Тогда
		ирОбщий.СообщитьЛкс(НСтр("ru='Коммит-родитель не найден в списке загруженных.'"));
	Иначе
		ЭлементыФормы.Коммиты.ТекущаяСтрока = СтрокаКоммита;
	КонецЕсли;
КонецПроцедуры

Процедура ФильтрПодсистем_НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ирКэш.Получить().ПолучитьФорму("ВыборПодсистемы", Элемент);
	ФормаВыбора.МножественныйВыбор = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = ФильтрПодсистем;
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ФильтрПодсистем_ПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ПодключитьОбработчикОжидания("ЗагрузитьФайлыКоммита", 0.1, Истина );
КонецПроцедуры

Процедура ФильтрПодсистемОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ирКлиент.ФильтрПодсистемОбработкаВыбораЛкс(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

Процедура ФильтрПодсистемНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура КПРезультатыПоискаОткрытьВерсиюКоммита(Кнопка)
	ИмяФайла = ПолучитьИмяВременногоФайла(НРег(ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.ТипФайла));
	ВыгрузитьФайлВерсии(ИмяФайла);
	ЗапуститьПриложение(ИмяФайла);
КонецПроцедуры

Процедура ВыгрузитьФайлВерсии(ИмяФайла) Экспорт
	ирОбщий.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершенияЛкс(НачалоКомандыГита() + "show " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит + ":""" + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл + """"
		+ "> """ + ИмяФайла + """");
	ирОбщий.СообщитьЛкс(ИмяФайла);
КонецПроцедуры

Процедура КПРезультатыПоискаОткрытьВерсиюРабочая(Кнопка)
	ЗапуститьПриложение(ИмяРабочегоФайла());
КонецПроцедуры

Функция ИмяРабочегоФайла() Экспорт
	Возврат ПапкаГита + СтрЗаменить("/" + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл, "/", ирОбщий.РазделительПутиКФайлуЛкс());
КонецФункции

Процедура КПРезультатыПоискаВыгрузитьВерсиюКоммита(Кнопка)
	Каталог = ирКлиент.ВыбратьКаталогВФормеЛкс("Выберите каталог для выгрузки");
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Возврат;
	КонецЕсли;
	Файл = Новый Файл(СтрЗаменить(ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл, "/", ирОбщий.РазделительПутиКФайлуЛкс()));
	ИмяФайлаБезРасширения = Файл.Путь + Файл.ИмяБезРасширения + " " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Дата;
	Файл = Новый Файл(Каталог + ирОбщий.РазделительПутиКФайлуЛкс() + ирОбщий.ЗаменитьНедопустимыеСимволыВИмениФайлаЛкс(ИмяФайлаБезРасширения) + "." + Файл.Расширение);
	ВыгрузитьФайлВерсии(Файл.ПолноеИмя);
	ирКлиент.ОткрытьФайлВПроводникеЛкс(Файл.ПолноеИмя);
КонецПроцедуры

Процедура КПРезультатыПоискаНайтиВПроводнике(Кнопка)
	ирКлиент.ОткрытьФайлВПроводникеЛкс(ИмяРабочегоФайла());
КонецПроцедуры

Процедура ДействияФормыОбновлениеИзEDT(Кнопка)
	ПолучитьФорму("ОбновлениеИзEDT").Открыть();
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирИсторияГита.Форма.Форма");
#Если Сервер И Не Сервер Тогда
	мПолеТекстаПоиска = Обработки.ирОболочкаПолеТекста.Создать();
#КонецЕсли 
ЧислоСтрокКонтекста = 2;
