Перем мЧтениеТекста;
Перем мФайлРезультата;
Перем мМоментНачала;
Перем мЧистыйЗаголовокФормы;
Перем мОстатокПорции;
Перем мПолеТекстаПоиска;
Перем мИндексГруппыПодсветки;
Перем мСтарыйКоммит;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	выхИменаСвойств = "Форма.ПапкаГита, Форма.ЧтоИскать, Форма.МаскаИмениФайла, Форма.ЧислоСтрокКонтекста, Форма.Ветка, Форма.НеВлитые";
	Возврат Неопределено;
КонецФункции

Процедура ПриОткрытии()
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	Если ПустаяСтрока(ПапкаГита) Тогда
		ЭтаФорма.ПапкаГита = ирКлиент.ГитРепозиторий();
	КонецЕсли;
	мЧистыйЗаголовокФормы = Заголовок;
	мПолеТекстаПоиска = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.ИзмененияФайла);
	ЭтаФорма.МаскаИмениФайла = "*.bsl";
	Если ЗначениеЗаполнено(ПараметрЧтоИскать) Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(ЭлементыФормы.ЧтоИскать, ПараметрЧтоИскать);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрИмяМодуля) Тогда
		ИмяФайлаГита = ирКлиент.ИмяФайлаМодуляВПапкеГитаЛкс(ПараметрИмяМодуля, ПапкаГита);
		Если Найти(ПараметрИмяМодуля, ".") = 0 Тогда
			ИмяФайлаГита = ИмяФайлаГита + ирОбщий.РазделительПутиКФайлуЛкс() + "*";
		КонецЕсли;
		ПутьВГите = ПутьВГитеИзИмениФайла(ИмяФайлаГита);
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(ЭлементыФормы.МаскаИмениФайла, ПутьВГите);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура ФайлыКоммитаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ПапкаГитаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
КонецПроцедуры

Функция КонвертироватьGitDiffВHTML(Знач РезультатGitDiff) Экспорт
	ТекстТекущий = ТекстВерсииФайла();
	ПолеТекстаМодуля = ирОбщий.НовыйАнализаторКодаЛкс(0);
	ПолеТекстаМодуля.УстановитьТекстБезМетаданных(ТекстТекущий);
    Строки = ирОбщий.СтрРазделитьЛкс(РезультатGitDiff, Символы.ПС);
    HTML = "";
	НомерСтроки = 0; 
	ТекстыМодулей = Неопределено;
	Для Каждого Строка Из Строки Цикл
		НомерСтроки = НомерСтроки + 1;
		Если Лев(Строка, 1) = "+" Тогда
			HTML = HTML + "<span class='added'>" + Строка + "</span>";
		ИначеЕсли Лев(Строка, 1) = "-" Тогда
			HTML = HTML + "<span class='removed'>" + Строка + "</span>";
		ИначеЕсли Найти(Строка, "@@") = 1 Тогда
			ТекстНомераСтроки = ирОбщий.ПервыйФрагментЛкс(ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "+", " "), ",");
			НомерСтроки = Число(ТекстНомераСтроки);
			ИмяМетода = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "> ", " ", Ложь);
			Если ПустаяСтрока(ИмяМетода) И НомерСтроки > 0 Тогда
				ИмяМетода = мПлатформа.НайтиМетодПоНомеруСтроки(ПолеТекстаМодуля, НомерСтроки,, ТекстыМодулей);
				Строка = Сред(Строка, 4);
			Иначе
				Строка = ирОбщий.ТекстМеждуМаркерамиЛкс(Строка, "-",,, Истина);
			КонецЕсли;
			HTML = HTML + "<span class='method'>@@&gt; " + ИмяМетода + "</span><span class='header'> " + Строка + "</span>";
		ИначеЕсли Ложь
			Или Найти(Строка, "diff --git") = 1 
			Или Найти(Строка, "index ") = 1 
		Тогда
			HTML = HTML + "<span class='header'>" + Строка + "</span>";
		Иначе
			HTML = HTML + Строка;
		КонецЕсли;
		HTML = HTML + Символы.ПС;
	КонецЦикла;
	Возврат HTML;
КонецФункции

Процедура ФайлыКоммитаПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ПодключитьОбработчикОжидания("ЗагрузитьИзмененияФайла", 0.1, Истина );
КонецПроцедуры

Процедура ЗагрузитьИзмененияФайла() Экспорт
	ТекстИзмененийФайла = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "show -m --pretty=format: --unified=" + ЧислоСтрокКонтекста + " " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит 
		+ ?(Родители.Количество() < 2, "", "^^" + ЭлементыФормы.Родители.ТекущаяСтрока.Номер) + " -- " + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл,,,,, КодировкаТекста.UTF8);
	ОбновитьПоискВТекстеФайла();
КонецПроцедуры

Процедура НайденныеКоммитыПриАктивизацииСтроки(Элемент)
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);  
	Если ЭлементыФормы.Коммиты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Родители.Очистить();
	ТекстРодителей = ирОбщий.ВыполнитьКомандуОСЛкс(
		НачалоКомандыГита() + " show --no-patch --pretty=format:""%P"" " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит + " | for /f ""tokens=*"" %i in ('more') do @for %j in (%i) do @" 
		+ НачалоКомандыГита() + "--no-pager log" + ПараметрыВыводаДанныхКоммита() + " -1 %j",,,,, КодировкаТекста.UTF8);
	ЗагрузитьСписокКоммитов(Родители, ТекстРодителей);
	Для Каждого СтрокаРодителя Из Родители Цикл
		СтрокаРодителя.Номер = Родители.Индекс(СтрокаРодителя) + 1;
	КонецЦикла;
	ЭлементыФормы.Родители.ТекущаяСтрока = Родители[0];
КонецПроцедуры

Процедура НайденныеКоммитыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ЧтоИскатьПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура ПапкаГитаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ОчиститьРезультаты();
КонецПроцедуры

Процедура ЧтоИскатьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ПапкаГитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ДействияФормыЗагрузить(Кнопка)
	Если мФайлРезультата = Неопределено Тогда
		ТекущаяСтрока = ЭлементыФормы.Коммиты.ТекущаяСтрока;
		мСтарыйКоммит = Неопределено;
		Если ТекущаяСтрока <> Неопределено Тогда
			мСтарыйКоммит = ТекущаяСтрока.Коммит;
		КонецЕсли;
		Результат = ирОбщий.ВыполнитьКомандуОСЛкс("git config --global core.quotepath false",,,,, КодировкаТекста.UTF8); /// Отключаем экранирование высоких символов в именах файлов
		КомандаСистемы = НачалоКомандыГита() + " --no-pager log" + ПараметрыВыводаДанныхКоммита(Истина);
		Если ЗначениеЗаполнено(ЧтоИскать) Тогда
			КомандаСистемы = КомандаСистемы + " -m -S""" + ЧтоИскать + """";
		КонецЕсли;
		Если ЗначениеЗаполнено(Ветка) Тогда
			КомандаСистемы = КомандаСистемы + " """ + Ветка + """";
			Если НеВлитые Тогда
				КомандаСистемы = КомандаСистемы + "..";
			КонецЕсли;
		КонецЕсли;
		КомандаСистемы = КомандаСистемы + ПараметрГитаМаскаФайла();
		мФайлРезультата = ирОбщий.ВыполнитьКомандуОСЛкс(КомандаСистемы, Ложь,,,, КодировкаТекста.UTF8, Истина);
		ОчиститьРезультаты();
		ЭлементыФормы.ДействияФормы.Кнопки.Загрузить.Картинка = ирКэш.КартинкаПоИмениЛкс("ирОстановить");
		ЗагрузитьРезультаты();   
	Иначе
		мФайлРезультата = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция ПараметрыВыводаДанныхКоммита(Знач ДляPowerShell = Ложь) Экспорт
	Результат = " --pretty=format:'%H|%ad|%an|%s|%P|%d|' --date=format:'%d.%m.%Y %H:%M:%S'";
	Если Не ДляPowerShell Тогда
		//Результат = СтрЗаменить(Результат, "%", "%%");
		Результат = СтрЗаменить(Результат, "'", """");
		//Результат = СтрЗаменить(Результат, "=", "^=");
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ОчиститьРезультаты() Экспорт
	мМоментНачала = ТекущаяДата();
	Коммиты.Очистить();
	Родители.Очистить();
	ФайлыКоммита.Очистить();
	ТекстИзмененийФайла = "";
	мПолеТекстаПоиска.УстановитьТелоHTML("");
	мОстатокПорции = "";
	мЧтениеТекста = Неопределено;
КонецПроцедуры

//.
// Возвращаемое значение:
//   Строка - 
Функция ПараметрГитаМаскаФайла() Экспорт
	МаскаИмениФайлаРезультат = МаскаИмениФайла;
	Если ПустаяСтрока(МаскаИмениФайлаРезультат) Тогда
		МаскаИмениФайлаРезультат = ":!*.bin";
	КонецЕсли;
	ПараметрГитаМаскаФайла = " -- """ + МаскаИмениФайлаРезультат + """";
	Возврат ПараметрГитаМаскаФайла;
КонецФункции

Процедура ЗагрузитьРезультаты()
	ЭлементыФормы.ЧтоИскать.ЦветТекстаПоля = Новый Цвет;
	ЭлементыФормы.МаскаИмениФайла.ЦветТекстаПоля = Новый Цвет;
	ЭлементыФормы.Ветка.ЦветТекстаПоля = Новый Цвет;
	ПрошлоСекунд = ТекущаяДата() - мМоментНачала;
	Если мФайлРезультата = Неопределено Тогда
		ПоискЗакончен = Истина;
	Иначе
		ПоискЗакончен = Ложь;
		ЭтаФорма.Заголовок = ирОбщий.ПредставлениеДлительностиЛкс(ПрошлоСекунд) + "-" + мЧистыйЗаголовокФормы;
		Если мФайлРезультата.Существует() Тогда
			Если мЧтениеТекста = Неопределено Тогда
				мЧтениеТекста = Новый ЧтениеТекста(мФайлРезультата.ПолноеИмя,,,, Ложь);
			КонецЕсли;
			Попытка 
				ирОбщий.ПрочитатьТекстИзФайлаЛкс(мФайлРезультата.ПолноеИмя);
				ПоискЗакончен = Истина;
			Исключение
			КонецПопытки;
			ПорцияРезультатов = мЧтениеТекста.Прочитать();
			Если ПорцияРезультатов <> Неопределено Тогда
				ТекстДляАнализа = мОстатокПорции + ПорцияРезультатов;
				Вхождения = ЗагрузитьСписокКоммитов(Коммиты, ТекстДляАнализа);
				ПоследнееВхождение = Вхождения[Вхождения.Количество() - 1];
				мОстатокПорции = Сред(ПорцияРезультатов, ПоследнееВхождение.ПозицияВхождения + ПоследнееВхождение.ДлинаВхождения + 2);
			КонецЕсли;
		ИначеЕсли ПрошлоСекунд > 10 Тогда
			ПоискЗакончен = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПоискЗакончен Тогда
		ЭтаФорма.Заголовок = мЧистыйЗаголовокФормы;
		ЭлементыФормы.ДействияФормы.Кнопки.Загрузить.Картинка = Новый Картинка;
		мФайлРезультата = Неопределено; 
	Иначе
		ПодключитьОбработчикОжидания("ЗагрузитьРезультаты", 1, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьСписокКоммитов(Знач ТаблицаКоммитов, Знач ТекстДляАнализа) Экспорт
	// Формат вывода см. ПараметрыВыводаДанныхКоммита
	АктивироватьСтарыйКоммит = Истина
		И мСтарыйКоммит <> Неопределено
		И (Ложь
			Или ЭлементыФормы.Коммиты.ТекущаяСтрока = Неопределено
			Или ЭлементыФормы.Коммиты.ТекущаяСтрока = Коммиты[0]);
	ИменаГрупп = "Коммит, Дата, Автор, Комментарий, Родители, Метки"; 
	Вхождения = ирОбщий.НайтиРегВыражениеЛкс(ТекстДляАнализа, "\s*" + ирОбщий.СтрокаПовторомЛкс("([^\|]*)\|", 6), ИменаГрупп);
	Для Каждого ВхожденияЭлемент Из Вхождения Цикл
		СтрокаТаблицы = ТаблицаКоммитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВхожденияЭлемент, ИменаГрупп);
		СтрокаТаблицы.Слияние = Найти(СтрокаТаблицы.Родители, " ");
		Если АктивироватьСтарыйКоммит И СтрокаТаблицы.Коммит = мСтарыйКоммит Тогда
			ЭлементыФормы.Коммиты.ТекущаяСтрока = СтрокаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат Вхождения;
КонецФункции

Процедура ОбновитьПоискВТекстеФайла(Знач ПереносСлов = Ложь)
	ТекстХтмл = КонвертироватьGitDiffВHTML(ТекстИзмененийФайла);
	мПолеТекстаПоиска.УстановитьТелоHTML(ТекстХтмл, ПереносСлов);
	ТекстИзмененийФайла = мПолеТекстаПоиска.ПолучитьТекст(Ложь);
	Если ЗначениеЗаполнено(ЧтоИскать) Тогда
		ВыражениеПоискаСлов = "(?:\n|^)(?:\+|\-)[^\n]*(" + ирОбщий.РегВыражениеСтрокиПоискаЛкс(ЧтоИскать) + ")[^\n]*(?=\n|$)";
		мИндексГруппыПодсветки = 0;
		РезультатыПоиска = ирОбщий.НайтиРегВыражениеЛкс(ТекстИзмененийФайла, ВыражениеПоискаСлов,,, Истина,, Ложь);
		РезультатыПоиска.Сортировать("ПозицияВхождения");
		РезультатыПоиска.Колонки.ПозицияВхождения.Имя = "ПозицияГруппы";
		РезультатыПоиска.Колонки.ДлинаВхождения.Имя = "ДлинаГруппы";
		РезультатыПоиска.Колонки.ТекстВхождения.Имя = "Значение";
		РезультатыПоиска.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
		ирОбщий.ЗаполнитьКолонкуПорядкаТаблицыЛкс(РезультатыПоиска, "Номер");
		РезультатыПоиска.ЗагрузитьКолонку(РезультатыПоиска.ВыгрузитьКолонку("ДлинаГруппы"), "Длина");
		ТекстХтмл = мПолеТекстаПоиска.РазметитьТекстРезультатамиПоиска(ТекстИзмененийФайла, РезультатыПоиска, мИндексГруппыПодсветки);
	Иначе
		ТекстХтмл = ТекстИзмененийФайла;
	КонецЕсли;
	ТекстХтмл = КонвертироватьGitDiffВHTML(ТекстХтмл);
	Стили = 
	".added { background-color: #ddffdd; }
    |.removed { background-color: #ffdddd; }
	|.method { color: #000080; }
    |.header { color: #666666; font-weight: bold; }";
	мПолеТекстаПоиска.УстановитьТелоHTML(ТекстХтмл, ПереносСлов, Стили, Ложь);
	//СтарыйТекущийЭлемент = ТекущийЭлемент;
	//ЭтаФорма.ТекущийЭлемент = мПолеТекстаПоиска.ЭлементФормы; /// Для лечения проблемы платформы установки фокуса ввода
	СледующееВхождениеНажатие();
	//ЭтаФорма.ТекущийЭлемент = СтарыйТекущийЭлемент; // Если раскомментировать, то все равно будет проблема платформы установки фокуса ввода
КонецПроцедуры

Процедура ПредыдущееВхождениеНажатие(Элемент = Неопределено)
	//мПолеТекстаПоиска.ПредыдущееВхождениеНажатие(мИндексГруппыПодсветки, Истина);
	мПолеТекстаПоиска.ПредыдущееВхождениеНажатие(мИндексГруппыПодсветки);
КонецПроцедуры

Процедура СледующееВхождениеНажатие(Элемент = Неопределено)
	//мПолеТекстаПоиска.СледующееВхождениеНажатие(мИндексГруппыПодсветки, Истина);
	мПолеТекстаПоиска.СледующееВхождениеНажатие(мИндексГруппыПодсветки);
КонецПроцедуры

Процедура МаскаИмениФайлаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура МаскаИмениФайлаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ИзмененияФайлаДокументСформирован(Элемент)
	СледующееВхождениеНажатие();
КонецПроцедуры

Процедура ПапкаГитаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ВыбранныйКаталог = ирКлиент.ВыбратьКаталогВФормеЛкс(Элемент.Значение,, "Выберите локальный гит репозиторий");
	Если ВыбранныйКаталог <> Неопределено Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(ЭлементыФормы.ПапкаГита, ВыбранныйКаталог);
	КонецЕсли;
КонецПроцедуры

Процедура ВеткаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	Элемент.ЦветТекстаПоля = ирОбщий.ЦветТекстаИзмененныхДанныхЛкс();
КонецПроцедуры

Процедура ВеткаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ВеткаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВеток = Новый СписокЗначений;
	Текст = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "branch",,,,, КодировкаТекста.UTF8);
	Текст = СтрЗаменить(Текст, "* ", "");
	СписокВеток.ЗагрузитьЗначения(ирОбщий.СтрРазделитьЛкс(Текст, Символы.ПС));
	СписокВеток.СортироватьПоЗначению();
	ЭлементСписка = СписокВеток.НайтиПоЗначению(Ветка);
	ВыбранныйЭлемент = СписокВеток.ВыбратьЭлемент(, ЭлементСписка);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

Функция НачалоКомандыГита() Экспорт
	Возврат "git -C """ + ПапкаГита + """ ";
КонецФункции

Процедура МаскаИмениФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("мета", "Из метаданных");
	СписокВариантов.Добавить("файл", "Из каталога гита");
	ВыбранныйВариант = ЭтаФорма.ВыбратьИзСписка(СписокВариантов, Элемент);
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВыбранныйВариант.Значение = "мета" Тогда
		ИмяФайла = "";
		ИмяФайлаБезМаски = ирОбщий.ПервыйФрагментЛкс(МаскаИмениФайла, "*");
		Если Прав(ИмяФайлаБезМаски, 1) = "/" Тогда
			ИмяФайлаБезМаски = ирОбщий.СтрокаБезКонцаЛкс(ИмяФайлаБезМаски);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяФайлаБезМаски) Тогда
			ПолноеИмяМД = "";
			ИмяМодуля = ИмяМодуляИзИмениФайлаГита(ИмяФайлаБезМаски);
			Если ЗначениеЗаполнено(ИмяМодуля) Тогда
				ОбъектМД = Метаданные.НайтиПоПолномуИмени(ИмяМодуля);
				Если ОбъектМД <> Неопределено Тогда
					ПолноеИмяМД = ОбъектМД.ПолноеИмя();
				Иначе
					ПолеТекстаМодуля = мПлатформа.ПолеТекстаМодуля(ИмяМодуля);
					ОбъектМД = ПолеТекстаМодуля.СтруктураТипаМодуля().Метаданные;
				КонецЕсли;
				Если ирОбщий.ЛиФормаИлиИмитаторЛкс(ОбъектМД) Тогда
					ПолноеИмяМД = ирОбщий.ПолноеИмяФормыЛкс(ОбъектМД);
				ИначеЕсли ОбъектМД <> Неопределено Тогда
					ПолноеИмяМД = ОбъектМД.ПолноеИмя();
				КонецЕсли;
				ПолноеИмяМД = ирОбщий.ПервыеФрагментыЛкс(ПолноеИмяМД);
			КонецЕсли;
		КонецЕсли;
		ПолноеИмяМД = ирКлиент.ВыбратьОбъектМетаданныхЛкс(, ПолноеИмяМД);
		Если ЗначениеЗаполнено(ПолноеИмяМД) Тогда
			ИмяФайла = ирКлиент.ИмяФайлаМодуляВПапкеГитаЛкс(ПолноеИмяМД, ПапкаГита) + ирОбщий.РазделительПутиКФайлуЛкс() + "*";
		КонецЕсли;
	Иначе
		ПолноеИмяФайла = "";
		Если Найти(МаскаИмениФайла, "*") = 0 Тогда
			ПолноеИмяФайла = ПапкаГита + ирОбщий.РазделительПутиКФайлуЛкс() + СтрЗаменить(Элемент.Значение, "/", ирОбщий.РазделительПутиКФайлуЛкс());
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Не Файл.Существует() Тогда
				ПолноеИмяФайла = "";
			КонецЕсли;
		КонецЕсли;
		ИмяФайла = ирКлиент.ВыбратьФайлЛкс(,,, ПолноеИмяФайла, ПапкаГита,, "Выберите файл из репозитория");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ПутьВГитеИзИмениФайла(ИмяФайла);
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Функция ПутьВГитеИзИмениФайла(Знач ИмяФайла) Экспорт
	ИмяФайла = ирОбщий.СтрЗаменитьЛкс(ИмяФайла, ПапкаГита, "");
	Если Лев(ИмяФайла, 1) = ирОбщий.РазделительПутиКФайлуЛкс() Тогда
		ИмяФайла = Сред(ИмяФайла, 2);
	КонецЕсли;
	ИмяФайла = СтрЗаменить(ИмяФайла, ирОбщий.РазделительПутиКФайлуЛкс(), "/");
	Возврат ИмяФайла;
КонецФункции

Процедура КоммитыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ирКлиент.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура КПРезультатыПоискаСравнитьВСравнителеТекстов(Кнопка)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстТекущий = ТекстВерсииФайла();
	ТекстПредыдущий = ТекстВерсииФайла(Истина);
	НомерСтроки2 = НомерСтрокиВМодуле();
	ирКлиент.СравнитьЗначенияВФормеЧерезXMLЛкс(ТекстПредыдущий, ТекстТекущий,, "Версия предыдущая", "Версия коммита",, "ВстроенныйЯзык",,,,, НомерСтроки2);
КонецПроцедуры

Функция НомерСтрокиВМодуле(Знач ЛиПредыдущаяВерсия = Ложь) Экспорт
	НачальнаяПозицияВыделения = Макс(1, мПолеТекстаПоиска.ПолучитьВыделениеВДокументеHTML().Начало);
	ПозицияНачалаЗаголовкаБлока = ирОбщий.СтрНайтиЛкс(ТекстИзмененийФайла, Символы.ПС + "@@>", Истина, НачальнаяПозицияВыделения);
	ПозицияКонцаЗаголовкаБлока = ирОбщий.СтрНайтиЛкс(ТекстИзмененийФайла, Символы.ПС,, ПозицияНачалаЗаголовкаБлока + 1);
	ЗаголовокБлока = Сред(ТекстИзмененийФайла, ПозицияНачалаЗаголовкаБлока, ПозицияКонцаЗаголовкаБлока - ПозицияНачалаЗаголовкаБлока);
	НачальныйМаркер = ?(ЛиПредыдущаяВерсия, "-", "+");
	ТекстНомераСтроки = ирОбщий.ТекстМеждуМаркерамиЛкс(ЗаголовокБлока, НачальныйМаркер, ",", Ложь);
	НомерСтроки1 = 1;
	Если ЗначениеЗаполнено(ТекстНомераСтроки) Тогда
		НачалоБлока = Сред(ТекстИзмененийФайла, ПозицияКонцаЗаголовкаБлока, НачальнаяПозицияВыделения - ПозицияКонцаЗаголовкаБлока - 1);
		ЧислоСтрокКонтекстаБлока = СтрЧислоВхождений(НачалоБлока, Символы.ПС + " ");
		ЧислоИзменныхСтрок = СтрЧислоВхождений(НачалоБлока, Символы.ПС + НачальныйМаркер);
		НомерСтроки1 = Число(ТекстНомераСтроки) - 1 + ЧислоСтрокКонтекстаБлока + ЧислоИзменныхСтрок;
	КонецЕсли;
	Возврат НомерСтроки1;
КонецФункции

Функция ИмяМодуляИзИмениФайлаГита(Знач ИмяФайла) Экспорт
	ЛиМножественное = Истина;
	Фрагменты = ирОбщий.СтрРазделитьЛкс(ИмяФайла, "/");
	Пока Фрагменты.Количество() > 1 Цикл
		Фрагмент = Фрагменты[0];
		Фрагменты.Удалить(0);
		Если Фрагмент = "src" Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяФайлаМодуляВГите = "";
	Разделитель = ".";
	ЭтоФорма = Ложь;
	Для Индекс = 0 По Фрагменты.Количество() / 2 - 1 Цикл
		ИмяАнг = Фрагменты[Индекс * 2];
		Если ИмяАнг = "Ext" Тогда
			// GitSync
			ИмяАнг = Фрагменты[Индекс * 2 + 1];
			Если ИмяАнг = "Form" Тогда
				ЭтоФорма = Истина;
			КонецЕсли;
		Иначе
			Если ЛиМножественное Тогда
				ИмяАнг = ирОбщий.СтрокаБезКонцаЛкс(ИмяАнг, СтрДлина("s"));
				Если ИмяАнг = "Form" Тогда
					ЭтоФормаEDT = Истина;
				КонецЕсли;
			КонецЕсли;
			ИмяРус = ирОбщий.ПеревестиВРусский(ИмяАнг);
			Если ИмяРус = Неопределено Тогда
				ИмяРус = ИмяАнг;
			КонецЕсли;
			Если Не ПустаяСтрока(ИмяФайлаМодуляВГите) Тогда
				ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + Разделитель;
			КонецЕсли;
			ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + ИмяРус;
			ИмяФайлаМодуляВГите = ИмяФайлаМодуляВГите + Разделитель + Фрагменты[Индекс * 2 + 1];
		КонецЕсли;
	КонецЦикла;
	Результат = ИмяФайлаМодуляВГите;
	Если Фрагменты.Количество() % 2 = 1 Или ЭтоФорма Тогда
		ИмяАнг = ирОбщий.ПервыйФрагментЛкс(Фрагменты[Фрагменты.ВГраница()]);
		ИмяРус = ирОбщий.ПеревестиВРусский(ИмяАнг);
		Если ЭтоФорма Тогда
			ИмяРус = "Форма.Модуль";
		КонецЕсли;
		Результат = Результат + Разделитель + ИмяРус;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ДействияФормыОткрытьВКонфигураторе(Кнопка)
	ИмяМодуля = Неопределено; // Строка
	Ссылка = СсылкаНаСтрокуАктуальнойВерсии(ИмяМодуля);
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ирКлиент.ОткрытьСсылкуСтрокиМодуляЛкс(Ссылка) Тогда 
		ПолеТекстаЛ = ирКлиент.ОткрытьПолеТекстаМодуляКонфигурацииЛкс(ИмяМодуля);
		ПолеТекстаЛ.ПерейтиПоСсылкеСтрокиМодуля(Ссылка, Ложь);
	КонецЕсли;
КонецПроцедуры

Функция СсылкаНаСтрокуАктуальнойВерсии(ИмяМодуля = Неопределено) Экспорт
	СтрокаФайла = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока;
	Если СтрокаФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяМодуля = ИмяМодуляИзИмениФайлаГита(СтрокаФайла.Файл);
	МодульВерсии = мПлатформа.МодульМетаданных(ТекстВерсииФайла());
	НомерСтрокиМодуля = НомерСтрокиВМодуле();
	ПолеТекстаМодуля = ирОбщий.НовыйАнализаторКодаЛкс(0);
	ПолеТекстаМодуля.ЗагрузитьМодульМетаданных(МодульВерсии);
	ПолеТекстаМодуля.УстановитьГраницыВыделения(НомерСтрокиМодуля, 1, НомерСтрокиМодуля, 1, Истина);
	ПолеТекстаМодуля.РазобратьТекущийКонтекст();
	ПолеТекстаМодуля.мИмяМодуля = ИмяМодуля;
	Ссылка = ПолеТекстаМодуля.СсылкаСтрокиМодуля(НомерСтрокиМодуля);
	Возврат Ссылка;
КонецФункции

Функция ТекстВерсииФайла(Знач ЛиПредыдущаяВерсия = Ложь) Экспорт
	Команда = НачалоКомандыГита() + "show " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит;
	Если ЛиПредыдущаяВерсия Тогда
		Команда = Команда + "~";
	КонецЕсли;
	Команда = Команда + ":" + ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Файл;
	Текст = ирОбщий.ВыполнитьКомандуОСЛкс(Команда,,,,, КодировкаТекста.UTF8);
	Возврат Текст;
КонецФункции

Процедура КПРезультатыПоискаСсылка(Кнопка)
	Ссылка = СсылкаНаСтрокуАктуальнойВерсии();
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ПоказатьСсылкуНаСтрокуМодуляЛкс(Ссылка);
КонецПроцедуры

Процедура ЧислоСтрокКонтекстаПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ЗагрузитьИзмененияФайла", 0.1, Истина );
КонецПроцедуры

Процедура РодителиПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.Родители.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ТекстИзмененийКоммита = ирОбщий.ВыполнитьКомандуОСЛкс(НачалоКомандыГита() + "show -m " + ЭлементыФормы.Коммиты.ТекущаяСтрока.Коммит
		+ ?(Родители.Количество() < 2, "", "^^" + ЭлементыФормы.Родители.ТекущаяСтрока.Номер) + ПараметрГитаМаскаФайла(),,,,, КодировкаТекста.UTF8);
	ФайлыКоммита.Очистить();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстИзмененийКоммита);
	Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		СтрокаИзменений = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
		Если ирОбщий.СтрНачинаетсяСЛкс(СтрокаИзменений, "---") Тогда
			СтарыйФайл = СтрЗаменить(СтрокаИзменений, "--- a/", "");
			Если СтарыйФайл = "--- /dev/null" Тогда
				СтатусФайла = "+";
			Иначе
				СтатусФайла = "";
			КонецЕсли;
			СтрокаФайла = Неопределено;
			Продолжить;
		ИначеЕсли ирОбщий.СтрНачинаетсяСЛкс(СтрокаИзменений, "+++") Тогда
			ТекущийФайл = СтрЗаменить(СтрокаИзменений, "+++ b/", "");
			Если ТекущийФайл = "+++ /dev/null" Тогда
				ТекущийФайл = СтарыйФайл;
				СтатусФайла = "-";
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(ТекущийФайл) Тогда
			Продолжить;
		КонецЕсли;
		Если Ложь
			Или Не ЗначениеЗаполнено(ЧтоИскать) 
			Или ирОбщий.СтрНайтиЛкс(СтрокаИзменений, ЧтоИскать,,,, Ложь) 
		Тогда
			Если СтрокаФайла = Неопределено Тогда
				СтрокаФайла = ФайлыКоммита.Добавить();
				СтрокаФайла.Файл = ТекущийФайл;
				СтрокаФайла.Модуль = ИмяМодуляИзИмениФайлаГита(ТекущийФайл);
				СтрокаФайла.Статус = СтатусФайла;
			КонецЕсли; 
			Если Лев(СтрокаИзменений, 1) = "+" Тогда
				СтрокаФайла.ДобавленоСтрок = СтрокаФайла.ДобавленоСтрок + 1;
			ИначеЕсли Лев(СтрокаИзменений, 1) = "-" Тогда
				СтрокаФайла.УдаленоСтрок = СтрокаФайла.УдаленоСтрок + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ЧтоИскать) Тогда
		Для Индекс = 1 - ФайлыКоммита.Количество() По 0 Цикл // Обратный обход
			СтрокаФайла = ФайлыКоммита[-Индекс];
			Если СтрокаФайла.ДобавленоСтрок = 0 И СтрокаФайла.УдаленоСтрок = 0 Тогда
				ФайлыКоммита.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ФайлыКоммита.Количество() Тогда
		ФайлыКоммита.Сортировать("Файл");
		Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = ФайлыКоммита[0];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РодителиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ФильтрФайловНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ФильтрФайловПриИзменении(Элемент)
	ЭлементОтбора = ЭлементыФормы.ФайлыКоммита.ОтборСтрок.Файл;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(Элемент.Значение);
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура КПФайлыКоммитаОткрытьОбъектМетаданных(Кнопка)
	Если ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяМД = ЭлементыФормы.ФайлыКоммита.ТекущаяСтрока.Модуль;
	Если ПустаяСтрока(ПолноеИмяМД) Тогда
		Возврат;
	КонецЕсли;
	ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(ПолноеИмяМД, ".Форма.Модуль");
	ПолноеИмяМД = ирОбщий.ПервыйФрагментЛкс(ПолноеИмяМД, ".Модуль");
	ирКлиент.ОткрытьОбъектМетаданныхЛкс(ПолноеИмяМД);
КонецПроцедуры

Процедура РодителиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаКоммита = Коммиты.Найти(ВыбраннаяСтрока.Коммит, "Коммит");
	Если СтрокаКоммита = Неопределено Тогда
		ирОбщий.СообщитьЛкс(НСтр("ru='Коммит-родитель не найден в списке загруженных.'"));
	Иначе
		ЭлементыФормы.Коммиты.ТекущаяСтрока = СтрокаКоммита;
	КонецЕсли;
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирИсторияГита.Форма.Форма");
#Если Сервер И Не Сервер Тогда
	мПолеТекстаПоиска = Обработки.ирОболочкаПолеТекста.Создать();
#КонецЕсли 
ЧислоСтрокКонтекста = 2;
