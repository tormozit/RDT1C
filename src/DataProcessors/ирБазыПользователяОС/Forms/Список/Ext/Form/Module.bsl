Перем мКлючБазыВСпискеПользователяИзКоманднойСтроки;
Перем мМаксЧислоКлавиш;
Перем мТекущийНаборПараметров;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	СохранитьНаборПараметров();
	выхИменаСвойств = "Реквизит.КаталогПортативныхИнструментов, Табличная часть.КаталогиПоискаПлатформы, Форма.БазыПользователяСтрокаПоиска, Форма.СборкаПлатформы, Форма.РежимЗапуска, Форма.ОчисткаКэшаКлиентСерверныхВызовов, Форма.КодРазрешения, Форма.ПодключитьОтладчик, Форма.СообщитьКоманднуюСтроку, Форма.ОткрытьПортативныеИнструменты, Форма.РежимИнтерфейсаТакси, Форма.РазделениеДанных, Форма.ЗапускОтИмениАдминистратора, Форма.КодЯзыкаСистемы, Форма.ПараметрЗапуска, Форма.ДополнительныеПараметры, Форма.ОтключитьАутентификациюОС, Форма.Пользователь, Форма.СортировкаПоДате, Форма.ТолькоИзбранное, Форма.ЗапретРегламентныхЗаданий, Форма.НаборПараметров, Форма.ОткрытьОбработку";
	Результат = Новый Структура;
	Результат.Вставить("СписокНаборовПараметров", СписокНаборовПараметров);
	Результат.Вставить("ХранимыеАтрибуты", ХранимыеАтрибуты());
	Результат.Вставить("РежимыЗапускаОбычногоПриложения", БазыПользователя.Выгрузить(Новый Структура("РежимЗапуска", "ОбычноеПриложение"), "Идентификатор, РежимЗапуска"));
	Результат.Вставить("ПапкиСостояние", ирКлиент.ТабличноеПолеСостояниеСтрокЛкс(ЭлементыФормы.Папки, "Идентификатор"));
	Результат.Вставить("БазыПользователяСостояние", ирКлиент.ТабличноеПолеСостояниеСтрокЛкс(ЭлементыФормы.БазыПользователя, "Идентификатор"));
	Возврат Результат;
КонецФункции

//.
// Параметры:
//   НастройкаФормы - Структура - 
//   ДопПараметры - Структура - 
Процедура ЗагрузитьНастройкуВФорме(НастройкаФормы, ДопПараметры) Экспорт
	Если НастройкаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ЗагрузитьНастройкуФормыЛкс(ЭтаФорма, НастройкаФормы);
	ОбновитьСписокВыбораНаборовПараметров();
	Если ЗначениеЗаполнено(БазыПользователяСтрокаПоиска) Тогда
		ПрименитьФильтрПоПодстрокеБезСохранения();
	КонецЕсли; 
	ЗагрузитьХранимыеАтрибутыБаз(НастройкаФормы.ХранимыеАтрибуты);
	Если НастройкаФормы.Свойство("РежимыЗапускаОбычногоПриложения") Тогда
		Для Каждого СтрокаХранимая Из НастройкаФормы.РежимыЗапускаОбычногоПриложения Цикл
			СтрокаБазы = БазыПользователя.Найти(СтрокаХранимая.Идентификатор, "Идентификатор");
			Если СтрокаБазы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаБазы, СтрокаХранимая);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ирКлиент.ТабличноеПолеВосстановитьСостояниеСтрокЛкс(ЭлементыФормы.Папки, НастройкаФормы.ПапкиСостояние);
	ирКлиент.ТабличноеПолеВосстановитьСостояниеСтрокЛкс(ЭлементыФормы.БазыПользователя, НастройкаФормы.БазыПользователяСостояние);
	НастроитьЭлементыФормы();
	ОбновитьКомпоновкуСписка();
КонецПроцедуры

//.
// Параметры:
//   ХранимыеДопАтрибуты - см. ХранимыеАтрибуты - 
Процедура ЗагрузитьХранимыеАтрибутыБаз(Знач ХранимыеДопАтрибуты) Экспорт
	Для Каждого СтрокаХранимая Из ХранимыеДопАтрибуты Цикл
		СтрокаБазы = БазыПользователя.Найти(СтрокаХранимая.Идентификатор, "Идентификатор");
		Если СтрокаБазы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаБазы, СтрокаХранимая);
		КонецЕсли;
	КонецЦикла;
	ОбновитьПодменюКлавишЗапуска();
КонецПроцедуры

Функция ХранимыеАтрибуты() Экспорт
	Результат = БазыПользователя.Выгрузить(, "Идентификатор, " + ирОбщий.СтрСоединитьЛкс(ИменаХранимыхВнеФайлаАтрибутов()));
	Возврат Результат;
КонецФункции

Процедура ПриОткрытии()
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	мКлючБазыВСпискеПользователяИзКоманднойСтроки = ирКэш.КлючБазыВСпискеПользователяИзКоманднойСтрокиЛкс();
	ЭтаФорма.ФайлСписокПользователя = ирОбщий.ИмяФайлаСпискаИнфобазПользователяОСЛкс();
	ЭтаФорма.ФайлСписокОбщийПользователя = ирОбщий.ИмяФайлаОбщегоСпискаИнфобазТекущегоПользователяОСЛкс(УказательОбщийПользователя);
	ЭтаФорма.ФайлСписокОбщийВсехПользователей = ирОбщий.ИмяФайлаОбщегоСпискаИнфобазВсехПользователейОСЛкс(УказательОбщийВсехПользователей);
	ОбновитьСписок();
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	ОбновитьСписокВыбораНаборовПараметров();
	ОбновитьДоступныеПлатформы();
	Если НачальноеЗначениеВыбора <> Неопределено Тогда
		СтрокаСписка = БазыПользователя.Найти(НРег(НачальноеЗначениеВыбора), "КлючСтроки");
		Если СтрокаСписка = Неопределено Тогда
			СтрокаСписка = БазыПользователя.Найти(НРег(НачальноеЗначениеВыбора), "НСтрокаСоединения");
		КонецЕсли;
		Если СтрокаСписка <> Неопределено Тогда
			ЭлементыФормы.БазыПользователя.ТекущаяСтрока = СтрокаСписка;
		КонецЕсли;
	КонецЕсли;
	НастроитьЭлементыФормы();
	ирКлиент.ДопСвойстваЭлементаФормыЛкс(ЭтаФорма, ЭлементыФормы.БазыПользователя).МенеджерПоиска = ирКлиент.СоздатьМенеджерПоискаВТабличномПолеЛкс(Новый Структура("ИмяВСписке, СтрокаСоединения"));
КонецПроцедуры

Функция СписокВыбораСборкиПлатформы()
	СписокСборок = Новый СписокЗначений();
	Для Каждого СтрокаСборки Из СборкиПлатформы Цикл
		СписокСборок.Добавить(СтрокаСборки.КлючСборки);
	КонецЦикла;
	Возврат СписокСборок;
КонецФункции

Процедура НастроитьЭлементыФормы() Экспорт
	Для Каждого Колонка Из ЭлементыФормы.БазыПользователя.Колонки Цикл
		Колонка.Видимость = Ложь
			Или Не РежимСтартера
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.Избранное
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.ДатаЗапуска
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.ВерсияПлатформы
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.ИмяВСписке
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.Файловая
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.КлавишаЗапуска
			Или Колонка = ЭлементыФормы.БазыПользователя.Колонки.СтрокаСоединения;
	КонецЦикла;
	ЭлементыФормы.ФайлСписокПользователя.Видимость = Не РежимСтартера;
	ЭлементыФормы.НадписьФайлСписокПользователя.Видимость = Не РежимСтартера;
КонецПроцедуры

Процедура ОбновитьСписок() 
	ХранимыеАтрибуты = ХранимыеАтрибуты();
	ПапкиСостояние = ирКлиент.ТабличноеПолеСостояниеСтрокЛкс(ЭлементыФормы.Папки, "Идентификатор");
	БазыПользователяСостояние = ирКлиент.ТабличноеПолеСостояниеСтрокЛкс(ЭлементыФормы.БазыПользователя, "Идентификатор");
	Если ЭлементыФормы.БазыПользователя.ТекущаяСтрока <> Неопределено Тогда
		ИДТекущейБазы = ЭлементыФормы.БазыПользователя.ТекущаяСтрока.ID;
	КонецЕсли;
	Для Счетчик = 1 По 2 Цикл
		БазыПользователя.Очистить();
		Папки.Очистить();
		СтрокаПапкиВсе = Папки.Добавить();
		СтрокаПапкиВсе.ИмяВСписке = "<Все>";
		СтрокаПапкиВсе.Идентификатор = "_";
		СтрокаПапки = Папки.Добавить();
		СтрокаПапки.ИмяВСписке = "<Пустая>";
		ТаблицаБазКлиента = ирОбщий.СписокБазПользователяОСЛкс(, Не РежимСтартера, Истина);
		Для Каждого СтрокаТаблицы Из ТаблицаБазКлиента Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Connect) Тогда
				СтрокаПапки = Папки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПапки, СтрокаТаблицы);
				СтрокаПапки.Идентификатор = СтрокаТаблицы.ID;
				ИмяПапкиРодителя = Сред(СтрокаТаблицы.Folder, 2);
				Если ЗначениеЗаполнено(ИмяПапкиРодителя) Тогда
					СтрокаПапки.ИмяВСписке = ИмяПапкиРодителя + "/" + СтрокаПапки.ИмяВСписке;
				КонецЕсли;
				Если ПустаяСтрока(СтрокаПапки.Идентификатор) Тогда
					СтрокаПапки.Идентификатор = Новый УникальныйИдентификатор;
					СтрокаПапки.ID = СтрокаПапки.Идентификатор;
				КонецЕсли;
			Иначе
				СтрокаТЧ = БазыПользователя.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы);
				СтрокаРежимаЗапуска = РежимыЗапускаПриложения().Найти(НРег(СтрокаТЧ.App), "НВнутр");
				Если СтрокаРежимаЗапуска <> Неопределено Тогда
					СтрокаТЧ.РежимЗапуска = СтрокаРежимаЗапуска.Имя;
				КонецЕсли;
				КаталогДанных = НСтр(СтрокаТЧ.СтрокаСоединения, "file");
				СтрокаТЧ.Файловая = ЗначениеЗаполнено(КаталогДанных);
				СтрокаТЧ.КаталогДанных = КаталогДанных;
				СтрокаТЧ.Кластер = НСтр(СтрокаТЧ.СтрокаСоединения, "srvr");
				СтрокаТЧ.ИмяВКластере = НСтр(СтрокаТЧ.СтрокаСоединения, "ref");
				Если Не РежимСтартера Тогда
					СтрокаТЧ.РазмерФайловойБазыКБ = ирОбщий.ВычислитьРазмерКаталогаЛкс(КаталогДанных) / 1024;
				КонецЕсли;
				Если СтрокаТЧ.Файловая И ЗначениеЗаполнено(СтрокаТЧ.DefaultVersion) Тогда
					СтрокаТЧ.DefaultVersion = "";
					СтрокаТЧ.Изменена = Истина;
				КонецЕсли;
				ОбновитьПредставлениеБазы(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Если БазыПользователя.Найти(Истина, "Изменена") <> Неопределено Тогда
			ЗаписатьСписокБаз();
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОбновитьПапки();
	Папки.Сортировать("ИмяВСписке");
	Если ИДТекущейБазы <> Неопределено Тогда
		ТекущаяСтрока = БазыПользователя.Найти(ИДТекущейБазы, "ID");
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.БазыПользователя.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьХранимыеАтрибутыБаз(ХранимыеАтрибуты);
	ОбновитьКомпоновкуСписка();
	ирКлиент.ТабличноеПолеВосстановитьСостояниеСтрокЛкс(ЭлементыФормы.Папки, ПапкиСостояние);
	ирКлиент.ТабличноеПолеВосстановитьСостояниеСтрокЛкс(ЭлементыФормы.БазыПользователя, БазыПользователяСостояние);
КонецПроцедуры

Процедура ОбновитьДоступныеПлатформы() Экспорт
	ОбработкаРегистрации = ирОбщий.СоздатьОбъектПоИмениМетаданныхЛкс("Обработка.ирУправлениеCOMКлассами1С");
	ТипыCOMКлассов = ОбработкаРегистрации.ЗаполнитьТипыCOMКлассов();
	ТипыКомпонент = ТипыCOMКлассов.Скопировать(Новый Структура("Имя", "Application"));
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ТипыCOMКлассов.Скопировать(Новый Структура("Имя", "CApplication")), ТипыКомпонент);
	ирОбщий.ЗаполнитьДоступныеСборкиПлатформыЛкс(ЭтотОбъект.СборкиПлатформы, ТипыКомпонент,, КаталогиПоискаПлатформы.ВыгрузитьКолонку("Каталог"));
КонецПроцедуры

Процедура ОбновитьПапки() Экспорт 
	Папки.ЗаполнитьЗначения(0, "ЧислоБаз");
	СтрокаПапкиВсе = Папки.Найти("<Все>", "ИмяВСписке");
	СтрокаПапкиВсе.ЧислоБаз = БазыПользователя.Количество();
	Для Каждого БазыЭлемент Из БазыПользователя Цикл
		ИмяПапки = Сред(БазыЭлемент.Folder, 2);
		Если ПустаяСтрока(ИмяПапки) Тогда
			СтрокаПапки = Папки.Найти("<Пустая>", "ИмяВСписке");
		Иначе
			СтрокаПапки = Папки.Найти(ИмяПапки, "ИмяВСписке");
		КонецЕсли;
		Если СтрокаПапки = Неопределено Тогда
			// Битая ссылка на папку
			СтрокаПапки = Папки.Добавить();
			СтрокаПапки.ИмяВСписке = ИмяПапки;
			СтрокаПапки.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаПапки.ID = СтрокаПапки.Идентификатор;
		КонецЕсли;
		СтрокаПапки.ЧислоБаз = СтрокаПапки.ЧислоБаз + 1;
		БазыЭлемент.Папка = СтрокаПапки.Идентификатор;
	КонецЦикла;
КонецПроцедуры

Процедура СписокБазПользователяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	#Если Сервер И Не Сервер Тогда
		ДанныеСтроки = БазыПользователя.Добавить();
	#КонецЕсли
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	Если Ложь
		Или (Истина
			И ЗначениеЗаполнено(мКлючБазыВСпискеПользователяИзКоманднойСтроки)
			И ДанныеСтроки.КлючСтроки = НРег(мКлючБазыВСпискеПользователяИзКоманднойСтроки))
		Или (Истина
			И Не ЗначениеЗаполнено(мКлючБазыВСпискеПользователяИзКоманднойСтроки)
			И ДанныеСтроки.НСтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы()))
	Тогда
		ОформлениеСтроки.ЦветФона = ирОбщий.ЦветФонаАкцентаЛкс();
	КонецЕсли;
	Если ДанныеСтроки.ФайлСписка <> ФайлСписокПользователя Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноФиолетовый;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	ОбновитьСписок();
КонецПроцедуры

Процедура СписокБазПользователяВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если РежимВыбора И ЗначениеЗаполнено(ЭлементыФормы.БазыПользователя.ТекущаяСтрока.Connect) Тогда
		ПоследниеВыбранныеДобавить();
		Закрыть(ЭлементыФормы.БазыПользователя.ТекущаяСтрока);
	ИначеЕсли Колонка = Элемент.Колонки.ВерсияПлатформы Тогда
		РезультатВыбора = ОткрытьВыборВерсииПлатформы(ВыбраннаяСтрока.ВерсияПлатформы, "СборкаПлатформы");
		Если РезультатВыбора <> Неопределено Тогда
			ВыбраннаяСтрока.ВерсияПлатформы = РезультатВыбора.СборкаПлатформы;
			ВыбраннаяСтрока.Изменена = Истина;
			ЗаписатьСписокБаз();
		КонецЕсли;
	ИначеЕсли Колонка = Элемент.Колонки.КлавишаЗапуска Тогда
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.КлавишаЗапуска) Тогда
			ВыбраннаяСтрока.КлавишаЗапуска = Неопределено;
		Иначе
			Для Сч=1 По мМаксЧислоКлавиш Цикл
				Если БазыПользователя.Найти(Сч, "КлавишаЗапуска") = Неопределено Тогда
					ВыбраннаяСтрока.КлавишаЗапуска = Сч;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Сч > мМаксЧислоКлавиш Тогда
				ирОбщий.СообщитьЛкс("Нет свободных клавиш. Смотри подменю ""Клавиши быстрого запуска баз""");
			КонецЕсли;
		КонецЕсли;
		ОбновитьПодменюКлавишЗапуска();
		ЗаписатьСписокБаз();
	ИначеЕсли ЗначениеЗаполнено(ЭлементыФормы.БазыПользователя.ТекущаяСтрока.Connect) Тогда
		ЗапуститьПриложение1С(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

Процедура ДействияФормыОткрытьКаталогКэша(Кнопка)
	Если ЭлементыФормы.БазыПользователя.ТекущаяСтрока <> Неопределено Тогда
		ЗапуститьПриложение(ЭлементыФормы.БазыПользователя.ТекущаяСтрока.КаталогКэша);
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОчиститьКаталогКэша(Кнопка)
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.БазыПользователя.ВыделенныеСтроки Цикл
		ОчиститьКаталогКэшаБазы(ВыделеннаяСтрока);
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьКаталогКэшаБазы(Знач ВыделеннаяСтрока) Экспорт
	КаталогКэша = ВыделеннаяСтрока.КаталогКэша;
	Если ПустаяСтрока(КаталогКэша) Тогда
		Возврат;
	КонецЕсли;
	Успех = Истина;
	Попытка
		УдалитьФайлы(КаталогКэша);
	Исключение
		Успех = Ложь;
		ирОбщий.СообщитьЛкс("Ошибка очистки кэша базы " + ВыделеннаяСтрока.Представление + ": " + ОписаниеОшибки());
	КонецПопытки;
	Если Успех Тогда
		ВыделеннаяСтрока.РазмерКэшаКБ = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФайлВПроводнике(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ирКлиент.ОткрытьФайлВПроводникеЛкс(Элемент.Значение);
КонецПроцедуры

Процедура ДействияФормыИТС(Кнопка)
	ирКлиент.ОткрытьСсылкуИТСЛкс("https://its.1c.ru/db/v?doc/bookmark/adm/TI000000120"); // общие списки баз
	ирКлиент.ОткрытьСсылкуИТСЛкс("https://its.1c.ru/db/v?doc#bookmark/adm/TI000000368"); // персональный список баз
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка)
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура СписокБазПользователяПриАктивизацииСтроки(Элемент)
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура ДействияФормыЗапуститьКлиентскоеПриложение(Кнопка)
	ЗапуститьПриложение1С(Ложь);
КонецПроцедуры

Процедура ДействияФормыЗапуститьКонфигуратор(Кнопка)
	ЗапуститьПриложение1С(Истина);
КонецПроцедуры

Процедура ЗапуститьПриложение1С(РежимКонфигуратора)
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяВСпискеБазПользователя = ТекущаяСтрока.ИмяВСписке;
	Если РежимКонфигуратора Тогда
		ПараметрЗапускаДляЭлементаСписка = ирОбщий.ПараметрЗапускаПриложенияДляЭлементаСпискаБазЛкс(ИмяВСпискеБазПользователя);
		ПроцессОС = ирОбщий.ПолучитьПроцессОСЛкс(,,,,, "DESIGNER" + ПараметрЗапускаДляЭлементаСписка);
		Если ТипЗнч(ПроцессОС) = Тип("COMОбъект") Тогда
			мПлатформа.АктивизироватьОкноПроцесса1С8(ПроцессОС.ProcessID);
			ирОбщий.СообщитьЛкс("Активировано окно уже запущенного конфигуратора PID=" + XMLСтрока(ПроцессОС.ProcessID));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ПодобратьКаталогПлатформы(ТекущаяСтрока, Истина)) Тогда
		ЗапуститьЧерезВерсиюПлатформыСтандартно(РежимКонфигуратора);
		Возврат;
	КонецЕсли;
	Если БазыПользователя.НайтиСтроки(Новый Структура("ИмяВСписке", ИмяВСпискеБазПользователя)).Количество() > 1 Тогда
		ИмяВСпискеБазПользователя = "";
	КонецЕсли;
	ПоследниеВыбранныеДобавить();
	ирКлиент.ЗапуститьПриложение1СЛкс(РежимКонфигуратора,, ТекущаяСтрока.ИмяВСписке,, Ложь, ТекущаяСтрока.Пользователь, ТекущаяСтрока.РежимЗапуска);
КонецПроцедуры

Процедура ПоследниеВыбранныеДобавить(Знач ТекущиеДанные = Неопределено)
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ЭлементыФормы.БазыПользователя.ТекущиеДанные;
	КонецЕсли;
	ТекущиеДанные.ДатаЗапуска = ТекущаяДата();
	ОбновитьКомпоновкуСписка();
КонецПроцедуры

Функция ОбновитьПредставлениеБазы(Знач ТекущиеДанные = Неопределено) Экспорт
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ЭлементыФормы.БазыПользователя.ТекущиеДанные;
	КонецЕсли;
	Результат = ТекущиеДанные.ИмяВСписке + " [" + ТекущиеДанные.СтрокаСоединения + "]";
	ТекущиеДанные.Представление = Результат;
	Возврат Результат;
КонецФункции

Процедура ФильтрПоПодстрокеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, Элемент, Текст);
	ПрименитьФильтрПоПодстрокеБезСохранения();
КонецПроцедуры

Процедура ФильтрПоПодстрокеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ФильтрПоПодстрокеПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ПрименитьФильтрПоПодстрокеБезСохранения();
КонецПроцедуры

Процедура ПрименитьФильтрПоПодстрокеБезСохранения()
	ЭлементОтбора = ЭлементыФормы.БазыПользователя.ОтборСтрок.Представление;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Значение = БазыПользователяСтрокаПоиска;
	ЭлементОтбора.Использование = ЗначениеЗаполнено(ЭлементОтбора.Значение);
КонецПроцедуры

Процедура ФильтрПоПодстрокеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ""; // Меняем Неопределено на пустую строку
	ПрименитьФильтрПоПодстрокеБезСохранения();
КонецПроцедуры

Процедура РежимСтартераПриИзменении(Элемент)
	Если Не РежимСтартера Тогда
		ОбновитьСписок();
	КонецЕсли;
	НастроитьЭлементыФормы();
КонецПроцедуры

Процедура ЗапуститьСПараметрамиНажатие(Элемент)
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	РежимКонфигуратора = Найти(Элемент.Имя, "Конфигуратор");
	Если Не РежимКонфигуратора И РежимЗапуска = "ВебКлиент" Тогда
		ВебАдрес = НСтр(ТекущаяСтрока.СтрокаСоединения, "ws");
		Если ПустаяСтрока(ВебАдрес) Тогда
			ирОбщий.СообщитьЛкс("Для запуска веб клиента строка соединения базы должна иметь параметр ws");
		Иначе
			ЗапуститьПриложение(ВебАдрес);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если Истина
		И Не РежимКонфигуратора
		И ОткрытьПортативныеИнструменты 
		И Не ирКэш.ЛиПортативныйРежимЛкс()
	Тогда
		ФайлПортативный = ИмяБазовогоФайлаПортативного();
		Если Не ФайлПортативный.Существует() Тогда
			ирОбщий.СообщитьЛкс("Отключите флажок ""Открыть портативные инструменты"" или укажите к ним путь в настройках. Скачать можно тут https://devtool1c.ucoz.ru/load/osnovnye/portativnye_instrumenty_razrabotchika_dlja_1s_8_2/1-1-0-6");
			ДействияФормыНастройки();
			ФайлПортативный = ИмяБазовогоФайлаПортативного();
			Если Не ФайлПортативный.Существует() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ИмяБазовогоФайлаПортативного = ФайлПортативный.ПолноеИмя;
	КонецЕсли; 
	ПараметрыЗапуска = ирОбщий.ПараметрыЗапускаПриложения1СЛкс(Пользователь,, КодРазрешения, РежимКонфигуратора, РежимЗапуска, Ложь, ОчисткаКэшаКлиентСерверныхВызовов, 
		ДополнительныеПараметры, Ложь,, ОткрытьПортативныеИнструменты, РежимИнтерфейсаТакси, РазделениеДанных, ОтключитьАутентификациюОС, КодЯзыкаСистемы,
		ПараметрЗапуска, ТекущаяСтрока.ИмяВСписке, ИмяБазовогоФайлаПортативного, ЗапретРегламентныхЗаданий, ОткрытьОбработку);
	СтрокаСборки = СборкиПлатформы.Найти(СборкаПлатформы, "КлючСборки");
	КаталогПрограммы = "";
	Если СтрокаСборки <> Неопределено Тогда
		КаталогПрограммы = СтрокаСборки.Каталог + "bin" + ирОбщий.РазделительПутиКФайлуЛкс();
		ИмяИсполняемогоФайла = ирОбщий.ИмяИсполняемогоФайлаКлиентаПлатформыЛкс(, Не РежимКонфигуратора И РежимЗапуска = "УправляемоеПриложениеТонкий", КаталогПрограммы);
	Иначе
		ИмяИсполняемогоФайла = ирОбщий.ПолноеИмяИсполняемогоФайлаСтартераЛкс();
	КонецЕсли;
	СтрокаЗапуска = """" + ИмяИсполняемогоФайла + """ " + ПараметрыЗапуска;
	Если СообщитьКоманднуюСтроку Тогда
		ирОбщий.СообщитьЛкс(СтрокаЗапуска);
	КонецЕсли;
	ирОбщий.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершенияЛкс(СтрокаЗапуска,,, Ложь, ЗапускОтИмениАдминистратора);
	ПоследниеВыбранныеДобавить();
КонецПроцедуры

Процедура ЗапуститьЧерезВерсиюПлатформыСтандартно(Знач РежимКонфигуратора = Ложь)
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	ПараметрыЗапуска = ирОбщий.ПараметрыЗапускаПриложения1СЛкс(,,, РежимКонфигуратора,, Ложь,, ТекущаяСтрока.AdditionalParameters, Ложь,
		ТекущаяСтрока.СтрокаСоединения, ,, РазделениеДанных,,,, ТекущаяСтрока.ИмяВСписке);
	ИмяИсполняемогоФайла = ирОбщий.ИмяИсполняемогоФайлаКлиентаПлатформыЛкс(,, ПодобратьКаталогПлатформы(ТекущаяСтрока));
	СтрокаЗапуска = """" + ИмяИсполняемогоФайла + """ " + ПараметрыЗапуска;
	ирОбщий.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершенияЛкс(СтрокаЗапуска,,, Ложь);
	ПоследниеВыбранныеДобавить();
КонецПроцедуры 

Функция ПодобратьКаталогПлатформы(СтрокаБазы, Знач ТолькоЕстьВРеестре = Ложь)
	Для Каждого СборкиЭлемент Из СборкиПлатформы Цикл
		Если Истина
			И ирОбщий.СтрНачинаетсяСЛкс(СборкиЭлемент.СборкаПлатформы, СтрокаБазы.Version) 
			И (Ложь
				Или Не ТолькоЕстьВРеестре
				Или ТолькоЕстьВРеестре И СборкиЭлемент.ЕстьВРеестре)
		Тогда
			Возврат СборкиЭлемент.Каталог + ирОбщий.РазделительПутиКФайлуЛкс() + "bin" + ирОбщий.РазделительПутиКФайлуЛкс();
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура ДополнительныеПараметрыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеПараметрыПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ПараметрЗапускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ирКлиент.ПараметрЗапускаНачалоВыбораЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура СборкаПлатформыНачалоВыбора(Элемент, СтандартнаяОбработка)
	РезультатВыбора = ОткрытьВыборВерсииПлатформы(СборкаПлатформы, "КлючСборки");
	Если РезультатВыбора <> Неопределено Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, РезультатВыбора.КлючСборки);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
КонецПроцедуры

Процедура БазыПользователяПередУдалением(Элемент, Отказ)
	Отказ = Истина; 
	ФормаУдаления = ПолучитьФорму("УдалениеБаз");
	ФормаУдаления.Заголовок = ирОбщий.СтрШаблонЛкс("Удалить выделенные базы (%1 шт)?", ЭлементыФормы.БазыПользователя.ВыделенныеСтроки.Количество());
	Результат = ФормаУдаления.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//КаталогКорзины = ирКэш.КаталогКорзиныЛкс();
	Для Каждого ВыделенныеЭлемент Из Элемент.ВыделенныеСтроки Цикл
		ВыделенныеЭлемент.ПометкаУдаления = Истина;
		Если ФормаУдаления.УдалитьКэшМетаданных Тогда
			ОчиститьКаталогКэшаБазы(ВыделенныеЭлемент);
		КонецЕсли;
		Если ФормаУдаления.УдалитьБазуДанных И ВыделенныеЭлемент.Файловая Тогда
			КаталогДанных = ВыделенныеЭлемент.КаталогДанных;
			Успех = Истина; 
			Попытка
				УдалитьФайлы(КаталогДанных);  
				//ПереместитьФайл(КаталогДанных, КаталогКорзины); // платформа не поддерживает перемещение каталога
			Исключение
				Успех = Ложь;
				ирОбщий.СообщитьЛкс("Ошибка удаления файлов данных базы """ + КаталогДанных + """: " + ОписаниеОшибки());
			КонецПопытки;
			Если Успех Тогда
				ВыделенныеЭлемент.РазмерФайловойБазыКБ = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаписатьСписокБаз();
	ЭлементыФормы.БазыПользователя.ОбновитьСтроки();
КонецПроцедуры

Процедура ПапкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекущаяСтрока = ЭлементыФормы.Папки.ТекущаяСтрока;
	Если Лев(ТекущаяСтрока.ИмяВСписке, 1) = "<" Тогда
		Возврат;
	КонецЕсли;
	Если Вопрос("Удалить папку из списка?", РежимДиалогаВопрос.ОКОтмена) <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.ПометкаУдаления = Истина;
	Для Каждого БазыЭлемент Из БазыПользователя.НайтиСтроки(Новый Структура("Папка", ТекущаяСтрока.Идентификатор)) Цикл
		БазыЭлемент.Папка = "";
		БазыЭлемент.Изменена = Истина;
	КонецЦикла;
	ЗаписатьСписокБаз();
КонецПроцедуры

Процедура ЗаписатьСписокБаз()  
	Для Каждого БазыЭлемент Из БазыПользователя Цикл
		// Мультиметка250121_234547
		БазыЭлемент.Connect = БазыЭлемент.СтрокаСоединения;
		БазыЭлемент.Version = БазыЭлемент.ВерсияПлатформы;
		БазыЭлемент.ID = БазыЭлемент.Идентификатор;
		БазыЭлемент.Folder = "/"; 
		БазыЭлемент.External = ?(БазыЭлемент.ФайлСписка <> ФайлСписокПользователя, 1, 0); // Если изменили ранее отсутствовавшую в основном списке базу
		Если ЗначениеЗаполнено(БазыЭлемент.Папка) Тогда
			БазыЭлемент.Folder = "/" + Папки.Найти(БазыЭлемент.Папка, "Идентификатор").ИмяВСписке;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПапкиЭлемент Из Папки Цикл
		ПапкиЭлемент.ID = ПапкиЭлемент.Идентификатор;
	КонецЦикла;
	ИменаСтандартныхАтрибутов = Новый Массив;
	Для Каждого РеквизитыЭлемент Из Метаданные().ТабличныеЧасти.БазыПользователя.Реквизиты Цикл
		Если Не Найти(ирОбщий.РусскиеБуквыЛкс(), НРег(Лев(РеквизитыЭлемент.Имя, 1))) Тогда
			ИменаСтандартныхАтрибутов.Добавить(РеквизитыЭлемент.Имя);
		КонецЕсли;
	КонецЦикла;
	НовыеСтрокиФайла = Новый Массив;
	ЧтениеФайла = Новый ЧтениеТекста;
	СтрокиАтрибутовБазы = Новый Массив;
	ДобавленныеАтрибуты = Новый Структура; 
	Попытка
		ЧтениеФайла.Открыть(ФайлСписокПользователя, КодировкаТекста.UTF8);
		СтрокаИзФайла = ЧтениеФайла.ПрочитатьСтроку();
	Исключение
		// Файл существует, но недоступен http://www.hostedredmine.com/issues/882846
		ОписаниеОшибки = ОписаниеОшибки(); // Для отладки
		ирОбщий.СообщитьЛкс("Не удалось записать файл списка баз " + ФайлСписокПользователя + ": " + ОписаниеОшибки);
		Возврат;
	КонецПопытки; 
	НовоеОписаниеБазы = Неопределено;
	НаименованиеБазы = Неопределено; 
	ЭтоКонецФайла = Ложь;
	Пока Истина Цикл
		Если СтрДлина(СтрокаИзФайла) Тогда
			Если Лев(СтрокаИзФайла, 1) = "[" Тогда
				Если Истина
					И НаименованиеБазы <> Неопределено
					И (Ложь
						Или НовоеОписаниеБазы = Неопределено 
						Или Не НовоеОписаниеБазы.ПометкаУдаления)
				Тогда
					Если НовоеОписаниеБазы <> Неопределено Тогда
						Для Каждого ИменаЭлемент Из ИменаСтандартныхАтрибутов Цикл
							Если ДобавленныеАтрибуты.Свойство(ИменаЭлемент) Тогда
								Продолжить;
							КонецЕсли;
							ЗначениеАтрибута = НовоеОписаниеБазы[ИменаЭлемент];
							Если Не ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
								Продолжить;
							КонецЕсли;
							СтрокиАтрибутовБазы.Добавить(ИменаЭлемент + "=" + XMLСтрока(ЗначениеАтрибута));
						КонецЦикла;
					КонецЕсли;
					СтрокиАтрибутовБазы.Добавить(); // Пустая строка для удобства чтения человеком
					СтрокиАтрибутовБазы.Вставить(0, "[" + НаименованиеБазы + "]");
					ирОбщий.ДополнитьМассивЛкс(НовыеСтрокиФайла, СтрокиАтрибутовБазы);
				КонецЕсли;
				Если ЭтоКонецФайла Тогда
					Прервать;
				КонецЕсли;
				НаименованиеБазы = ирОбщий.УдалитьВнешниеСкобкиВыраженияЛкс(СтрокаИзФайла, "[", "]", Ложь);
				СтрокиАтрибутовБазы = Новый Массив;
				ДобавленныеАтрибуты = Новый Структура;
				НовоеОписаниеБазы = Неопределено;
				НовоеОписаниеПапки = Неопределено;
				ИмяКолонки = "";
			Иначе
				ИмяКолонки = ирОбщий.ПервыйФрагментЛкс(СтрокаИзФайла, "=", Ложь);
				ПредставлениеЗначения = СлитьАтрибутБазы(СтрокаИзФайла, СтрокиАтрибутовБазы, НовоеОписаниеБазы, НовоеОписаниеПапки, ДобавленныеАтрибуты);
				Если ирОбщий.СтрокиРавныЛкс(ИмяКолонки, "id") Тогда
					НовоеОписаниеБазы = БазыПользователя.Найти(ПредставлениеЗначения, ИмяКолонки);
					Если НовоеОписаниеБазы <> Неопределено Тогда
						Если НовоеОписаниеБазы.Изменена Тогда
							НаименованиеБазы = НовоеОписаниеБазы.ИмяВСписке;
							НовоеОписаниеБазы.Изменена = Ложь;
							НовыеСтрокиАтрибутов = Новый Массив;
							Для Каждого СтрокаАтрибута Из СтрокиАтрибутовБазы Цикл
								СлитьАтрибутБазы(СтрокаАтрибута, НовыеСтрокиАтрибутов, НовоеОписаниеБазы, НовоеОписаниеПапки, ДобавленныеАтрибуты);
							КонецЦикла;
							СтрокиАтрибутовБазы = НовыеСтрокиАтрибутов
						ИначеЕсли НовоеОписаниеБазы.ПометкаУдаления Тогда
							НаименованиеБазы = Неопределено;
						Иначе
							НовоеОписаниеБазы = Неопределено;
						КонецЕсли;
					КонецЕсли;
					НовоеОписаниеПапки = Папки.Найти(ПредставлениеЗначения, ИмяКолонки);
					Если НовоеОписаниеПапки <> Неопределено Тогда
						Если НовоеОписаниеПапки.Изменена Тогда
							НаименованиеБазы = НовоеОписаниеПапки.ИмяВСписке;
							НовоеОписаниеПапки.Изменена = Ложь;
						ИначеЕсли НовоеОписаниеПапки.ПометкаУдаления Тогда
							НаименованиеБазы = Неопределено;
						Иначе
							НовоеОписаниеПапки = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаИзФайла = ЧтениеФайла.ПрочитатьСтроку();
		Если СтрокаИзФайла = Неопределено Тогда
			СтрокаИзФайла = "[]";
			ЭтоКонецФайла = Истина;
		КонецЕсли;
	КонецЦикла; 
	ЧтениеФайла.Закрыть();
	Для Каждого СтрокаНовойБазы Из БазыПользователя.НайтиСтроки(Новый Структура("Изменена", Истина)) Цикл
		СтрокиАтрибутовБазы = Новый Массив;
		СтрокиАтрибутовБазы.Добавить("[" + СтрокаНовойБазы.ИмяВСписке + "]");
		Для Каждого ИменаЭлемент Из ИменаСтандартныхАтрибутов Цикл
			ЗначениеАтрибута = СтрокаНовойБазы[ИменаЭлемент];
			Если Не ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиАтрибутовБазы.Добавить(ИменаЭлемент + "=" + XMLСтрока(ЗначениеАтрибута));
		КонецЦикла;
		ирОбщий.ДополнитьМассивЛкс(НовыеСтрокиФайла, СтрокиАтрибутовБазы);
	КонецЦикла;
	Для Каждого СтрокаНовойПапки Из Папки.НайтиСтроки(Новый Структура("Изменена", Истина)) Цикл
		СтрокиАтрибутовБазы = Новый Массив;
		СтрокиАтрибутовБазы.Добавить("[" + СтрокаНовойПапки.ИмяВСписке + "]");
		СтрокиАтрибутовБазы.Добавить("ID=" + СтрокаНовойПапки.Идентификатор);
		ирОбщий.ДополнитьМассивЛкс(НовыеСтрокиФайла, СтрокиАтрибутовБазы);
	КонецЦикла;
	Текст = ирОбщий.СтрСоединитьЛкс(НовыеСтрокиФайла, Символы.ПС);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	// Для отладки
	//ТекстовыйДокумент.Прочитать(ФайлСписокПользователя);
	//ирКлиент.Сравнить2ЗначенияВФормеЛкс(ТекстовыйДокумент, Текст);
	
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ФайлСписокПользователя); 
	ирОбщий.УдалитьСтрокиТаблицыИлиДереваПоЗначениюЛкс(БазыПользователя, "ПометкаУдаления", Истина);
	ирОбщий.УдалитьСтрокиТаблицыИлиДереваПоЗначениюЛкс(Папки, "ПометкаУдаления", Истина);
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(БазыПользователя, "Изменена", Ложь);
	ирОбщий.УстановитьСвойствоВКоллекцииЛкс(Папки, "Изменена", Ложь);
	ирКлиент.СохранитьНастройкуФормыЛкс(ЭтаФорма);
	ОбновитьПапки();
КонецПроцедуры 

Функция СлитьАтрибутБазы(Знач СтрокаИзФайла, Знач СтрокиБазы, Знач НовоеОписаниеБазы, Знач НовоеОписаниеПапки, Знач ДобавленныеАтрибуты) Экспорт
	ИмяКолонки = ирОбщий.ПервыйФрагментЛкс(СтрокаИзФайла, "=", Ложь);
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ДобавленныеАтрибуты.Вставить(ИмяКолонки);
		ПредставлениеЗначения = ирОбщий.СтрокаБезПервогоФрагментаЛкс(СтрокаИзФайла, "=");
		Если НовоеОписаниеБазы <> Неопределено Тогда
			Если Метаданные().ТабличныеЧасти.БазыПользователя.Реквизиты.Найти(ИмяКолонки) <> Неопределено Тогда
				ПредставлениеЗначения = XMLСтрока(НовоеОписаниеБазы[ИмяКолонки]);
			КонецЕсли;
		ИначеЕсли НовоеОписаниеПапки <> Неопределено Тогда
			Если Папки.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ПредставлениеЗначения = XMLСтрока(НовоеОписаниеПапки[ИмяКолонки]);
			КонецЕсли;
		КонецЕсли;
		СтрокиБазы.Добавить(ИмяКолонки + "=" + ПредставлениеЗначения);
	КонецЕсли;
	Возврат ПредставлениеЗначения;
КонецФункции 

Функция ИменаХранимыхВнеФайлаАтрибутов()
	Результат = Новый Массив;
	Результат.Добавить("Избранное");
	Результат.Добавить("ДатаЗапуска");
	Результат.Добавить("Пользователь");
	Результат.Добавить("КлавишаЗапуска");
	Возврат Результат;
КонецФункции

Процедура ПапкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		Элемент.ТекущаяСтрока.Изменена = Истина;
		ПапкиПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

Процедура БазыПользователяПриИзмененииФлажка(Элемент, Колонка)
	ирКлиент.ТабличноеПолеПриИзмененииФлажкаЛкс(ЭтаФорма, Элемент, Колонка);
КонецПроцедуры
               
Процедура БазыПользователяИзбранноеПриИзменении(Элемент)
	ирКлиент.СохранитьНастройкуФормыЛкс(ЭтаФорма);
КонецПроцедуры 

Процедура БазыПользователяНаименованиеПриИзменении(Элемент)
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Элемент.Значение = ЭлементыФормы.БазыПользователя.ТекущаяСтрока.СтрокаСоединения;
	КонецЕсли;
	Элемент.Значение = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(БазыПользователя, Элемент.Значение, "ИмяВСписке");
	ЭлементыФормы.БазыПользователя.ТекущаяСтрока.Изменена = Истина;
	ПодключитьОбработчикОжидания("ЗаписатьСписокБаз", 0.1, Истина);
КонецПроцедуры

Процедура БазыПользователяСтрокаСоединенияПриИзменении(Элемент)
	ЭлементыФормы.БазыПользователя.ТекущиеДанные.Изменена = Истина;
	ПодключитьОбработчикОжидания("ЗаписатьСписокБаз", 0.1, Истина);
КонецПроцедуры

Процедура БазыПользователяВерсияПлатформыПриИзменении(Элемент)
	ЭлементыФормы.БазыПользователя.ТекущиеДанные.Изменена = Истина;
	ПодключитьОбработчикОжидания("ЗаписатьСписокБаз", 0.1, Истина);
КонецПроцедуры

Процедура ПапкиНаименованиеПриИзменении(Элемент)
	ЭлементыФормы.Папки.ТекущиеДанные.Изменена = Истина;
	ПодключитьОбработчикОжидания("ЗаписатьСписокБаз", 0.1, Истина);
КонецПроцедуры

Процедура ПапкиПриАктивизацииСтроки(Элемент = Неопределено)
	ЭлементОтбора = ЭлементыФормы.БазыПользователя.ОтборСтрок.Папка;
	Если ЭлементыФормы.Папки.ТекущаяСтрока.ИмяВСписке = "<Все>" Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		ЭлементОтбора.Установить(ЭлементыФормы.Папки.ТекущаяСтрока.Идентификатор);
	КонецЕсли; 
КонецПроцедуры 

Процедура ОбновитьКомпоновкуСписка(Знач ВключитьПоДате = Ложь)
	Если СортировкаПоДате Тогда
		БазыПользователя.Сортировать("ДатаЗапуска Убыв");
		Если ВключитьПоДате Тогда
			ЭлементыФормы.Папки.ТекущаяСтрока = Папки[0];
			Если ЭлементыФормы.БазыПользователя.ТекущаяСтрока <> БазыПользователя[0] Тогда
				Ответ = Вопрос("Перейти в начало?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЭлементыФормы.БазыПользователя.ТекущаяСтрока = БазыПользователя[0]; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		БазыПользователя.Сортировать("Представление");
	КонецЕсли;
	ЭлементыФормы.БазыПользователя.ОтборСтрок.Избранное.Использование = ТолькоИзбранное;
КонецПроцедуры

Процедура СортировкаПоДатеПриИзменении(Элемент)
	ОбновитьКомпоновкуСписка(Истина);
КонецПроцедуры

Процедура ТолькоИзбранноеПриИзменении(Элемент)
	Если ТолькоИзбранное Тогда
		ЭлементыФормы.БазыПользователя.ОтборСтрок.Папка.Использование = Ложь;
	КонецЕсли;
	ОбновитьКомпоновкуСписка();
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ЭтаФорма.ТолькоИзбранное = ЭлементыФормы.БазыПользователя.ОтборСтрок.Избранное.Использование;
	Если Не ЭлементыФормы.БазыПользователя.ОтборСтрок.Папка.Использование Тогда
		ЭлементыФормы.Папки.ТекущаяСтрока = Папки.Найти("<Все>", "ИмяВСписке");
	КонецЕсли;
КонецПроцедуры

Процедура БазыПользователяПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
	ФормаЭлемента = ПолучитьФорму("Элемент", Элемент);
	Если Копирование Тогда
		ЗагрузитьАтрибутыБазыВРедактор(ФормаЭлемента);
		ФормаЭлемента.Идентификатор = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементыФормы.Папки.ТекущаяСтрока.Идентификатор) Тогда
		ИмяВСписке = ЭлементыФормы.Папки.ТекущаяСтрока.ИмяВСписке;
		Если Лев(ИмяВСписке, 1) <> "<" Тогда
			ФормаЭлемента.ПапкаИмя = ИмяВСписке;
			ФормаЭлемента.ПапкаИдентификатор = ЭлементыФормы.Папки.ТекущаяСтрока.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	ФормаЭлемента.Открыть();
КонецПроцедуры

Процедура БазыПользователяПередНачаломИзменения(Элемент, Отказ)
	Если Ложь
		Или ЭлементыФормы.БазыПользователя.ТекущаяКолонка = ЭлементыФормы.БазыПользователя.Колонки.ИмяВСписке 
		Или ЭлементыФормы.БазыПользователя.ТекущаяКолонка = ЭлементыФормы.БазыПользователя.Колонки.Избранное
	Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	РедактироватьБазу();
КонецПроцедуры

Процедура РедактироватьБазу() Экспорт
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	ФормаЭлемента = ПолучитьФорму("Элемент", ЭлементыФормы.БазыПользователя, ТекущаяСтрока.Идентификатор);
	ФормаЭлемента.ТолькоПросмотр = ТекущаяСтрока.ФайлСписка <> ФайлСписокПользователя;
	ЗагрузитьАтрибутыБазыВРедактор(ФормаЭлемента);
	ФормаЭлемента.Открыть();
КонецПроцедуры

Процедура ЗагрузитьАтрибутыБазыВРедактор(Знач ФормаЭлемента) Экспорт
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	ЗаполнитьЗначенияСвойств(ФормаЭлемента, ТекущаяСтрока);
	ФормаЭлемента.Разрядность = ТекущаяСтрока.AppArch;
	ФормаЭлемента.ДополнительныеПараметры = ТекущаяСтрока.AdditionalParameters;
	ФормаЭлемента.ВерсияПлатформы = ТекущаяСтрока.ВерсияПлатформы;
	ФормаЭлемента.ОтключитьАутентификациюОС = ТекущаяСтрока.WA = 0; 
	ФормаЭлемента.ПапкаИдентификатор = ТекущаяСтрока.Папка;
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	СтрокаПапки = Папки.Найти(ТекущаяСтрока.Папка, "Идентификатор");
	Если СтрокаПапки <> Неопределено Тогда
		ФормаЭлемента.ПапкаИмя = СтрокаПапки.ИмяВСписке;
	КонецЕсли;
КонецПроцедуры

Процедура БазыПользователяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//! ВыбранноеЗначение = ПолучитьФорму("Элемент", Элемент); 
	Если ПустаяСтрока(ВыбранноеЗначение.Идентификатор) Тогда
		ВыбранноеЗначение.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	СтрокаБазы = БазыПользователя.Найти(ВыбранноеЗначение.Идентификатор, "Идентификатор");
	Если СтрокаБазы = Неопределено Тогда
		СтрокаБазы = БазыПользователя.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаБазы, ВыбранноеЗначение);
	СтрокаБазы.AppArch = ?(ВыбранноеЗначение.Разрядность = "Auto", "", ВыбранноеЗначение.Разрядность);
	СтрокаБазы.WA = ?(ВыбранноеЗначение.ОтключитьАутентификациюОС, 0, 1);
	СтрокаБазы.Папка = ВыбранноеЗначение.ПапкаИдентификатор;
	СтрокаБазы.AdditionalParameters = ВыбранноеЗначение.ДополнительныеПараметры;
	РежимаЗапускаВнутр = "";
	СтрокаРежимаЗапуска = РежимыЗапускаПриложения().Найти(ВыбранноеЗначение.РежимЗапуска, "Имя");
	Если СтрокаРежимаЗапуска <> Неопределено Тогда
		РежимаЗапускаВнутр = СтрокаРежимаЗапуска.Внутр;
	КонецЕсли;
	СтрокаБазы.App = ?(РежимЗапуска = "Авто", "", РежимаЗапускаВнутр);
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ПапкаИдентификатор) Тогда
		СтрокаПапки = Папки.Найти(ВыбранноеЗначение.ПапкаИдентификатор, "Идентификатор");
		Если СтрокаПапки <> Неопределено Тогда
			СтрокаБазы.Папка = СтрокаПапки.Идентификатор; 
		КонецЕсли;
	КонецЕсли;
	СтрокаБазы.ФайлСписка = ФайлСписокПользователя;
	СтрокаБазы.Изменена = Истина;
	СтрокаБазы.ДатаЗапуска = ТекущаяДата();
	ЭлементыФормы.БазыПользователя.ТекущаяСтрока = СтрокаБазы;
	ПоследниеВыбранныеДобавить(СтрокаБазы);
	ЗаписатьСписокБаз();
КонецПроцедуры

Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого СтрокаБазы Из ПараметрыПеретаскивания.Значение Цикл // см. БазыПользователя[0]
			СтрокаБазы.Изменена = Истина;
			Если Строка = Неопределено Тогда
				СтрокаБазы.Папка = "";
			Иначе
				СтрокаБазы.Папка = Строка.Идентификатор;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.БазыПользователя.ОбновитьСтроки();
		ЗаписатьСписокБаз();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыНастройки(Кнопка = Неопределено)
	ФормаНастроек = ПолучитьФорму("Настройки");
	ФормаНастроек.ОткрытьМодально();
	Если ФормаНастроек.Модифицированность Тогда
		ОбновитьДоступныеПлатформы();
	КонецЕсли;
	ирКлиент.СохранитьНастройкуФормыЛкс(ЭтаФорма);
КонецПроцедуры

Процедура ДействияФормыПрофайлыБазы(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.БазыПользователя.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	Форма = ирКлиент.ПолучитьФормуЛкс("Обработка.ирУправлениеПрофайлами1С.Форма");
	Форма.ПараметрСтрокаСпискаБаз = ТекущаяСтрока;
	Форма.Открыть();
КонецПроцедуры

Процедура ДействияФормыИзменить(Кнопка)
	Если ЭлементыФормы.БазыПользователя.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РедактироватьБазу();
КонецПроцедуры

Процедура ДействияФормыОчиститьПривязкуКлавиш(Кнопка)
	
	ирОбщий.ОчиститьКолонкиТаблицыЛкс(БазыПользователя, "КлавишаЗапуска");
	ОбновитьПодменюКлавишЗапуска();
	ЗаписатьСписокБаз();
	
КонецПроцедуры 

Процедура ОбновитьПодменюКлавишЗапуска()
	Для Сч=1 По мМаксЧислоКлавиш Цикл
		СтрокаБазы = БазыПользователя.Найти(Сч, "КлавишаЗапуска");
		КнопкаПанели = ЭлементыФормы.ДействияФормы.Кнопки.КлавишиЗапуска.Кнопки["ЗапуститьБазу" + Сч];
		Если СтрокаБазы = Неопределено Тогда
			ПредставлениеБазы = "Нет";
		Иначе
			ПредставлениеБазы = СтрокаБазы.Представление;
		КонецЕсли;
		ирОбщий.ОбновитьТекстПослеМаркераЛкс(КнопкаПанели.Текст,, ПредставлениеБазы, ": ");
	КонецЦикла;
КонецПроцедуры

Процедура ЗапуститьБазуКлавишей(Кнопка)
	СтрокаБазы = БазыПользователя.Найти(Число(Прав(Кнопка.Имя, 1)), "КлавишаЗапуска");
	Если СтрокаБазы <> Неопределено Тогда
		ЭлементыФормы.БазыПользователя.ТекущаяСтрока = СтрокаБазы;
		ЗапуститьПриложение1С(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура НаборПараметровПриИзменении(Элемент)
	СохранитьНаборПараметров();
	мТекущийНаборПараметров = ирОбщий.НайтиЭлементКоллекцииЛкс(СписокНаборовПараметров, "Представление", Элемент.Значение);
	Если мТекущийНаборПараметров = Неопределено Тогда
		мТекущийНаборПараметров = СписокНаборовПараметров.Добавить();
		мТекущийНаборПараметров.Представление = Элемент.Значение;
		СохранитьНаборПараметров();
		ОбновитьСписокВыбораНаборовПараметров();
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтаФорма, мТекущийНаборПараметров.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНаборПараметров() Экспорт
	Если мТекущийНаборПараметров <> Неопределено Тогда
		мТекущийНаборПараметров.Значение = Новый Структура(ИменаПараметровРазовогоЗапуска());
		ЗаполнитьЗначенияСвойств(мТекущийНаборПараметров.Значение, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

Функция ИменаПараметровРазовогоЗапуска()
	Возврат "ОткрытьОбработку, СборкаПлатформы, РежимЗапуска, ОчисткаКэшаКлиентСерверныхВызовов, КодРазрешения, ПодключитьОтладчик, СообщитьКоманднуюСтроку, ОткрытьПортативныеИнструменты, РежимИнтерфейсаТакси, РазделениеДанных, ЗапускОтИмениАдминистратора, КодЯзыкаСистемы, ПараметрЗапуска, ДополнительныеПараметры, ОтключитьАутентификациюОС, Пользователь, ЗапретРегламентныхЗаданий";
КонецФункции

Процедура НаборПараметровНачалоВыбора(Элемент, СтандартнаяОбработка)
	//Если ирКлиент.РедактироватьСписокЗначенийЛкс(СписокНаборовПараметров,, "Наборы параметров запуска") Тогда
	ФормаСохраненияНастройки = мПлатформа.ПолучитьФорму("ВыборНастройкиДляЗагрузки");
	НачальныйИндекс = 0;
	Если мТекущийНаборПараметров <> Неопределено Тогда
		НачальныйИндекс = СписокНаборовПараметров.Индекс(мТекущийНаборПараметров);
	КонецЕсли;
	ФормаСохраненияНастройки.НачальноеЗначениеВыбора = НачальныйИндекс;
	ФормаСохраненияНастройки.СписокНастроек = ирОбщий.ТаблицаЗначенийИзКоллекцииЛкс(СписокНаборовПараметров);
	ВыбранныйНаборПараметров = ФормаСохраненияНастройки.ОткрытьМодально();    
	СписокНаборовПараметров.Очистить();
	Для Каждого СтрокаТаблицы Из ФормаСохраненияНастройки.СписокНастроек Цикл
		ЗаполнитьЗначенияСвойств(СписокНаборовПараметров.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	ОбновитьСписокВыбораНаборовПараметров();
	Если ВыбранныйНаборПараметров <> Неопределено Тогда
		Элемент.Значение = ВыбранныйНаборПараметров.Представление;
	КонецЕсли;
	ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, Элемент.Значение);
КонецПроцедуры

Процедура ОбновитьСписокВыбораНаборовПараметров() Экспорт
	Если СписокНаборовПараметров.Количество() = 0 Тогда
		НаборПараметровОчистка(ЭлементыФормы.НаборПараметров);
	КонецЕсли;
	СписокНаборовПараметров.СортироватьПоПредставлению();
	ЭлементыФормы.НаборПараметров.СписокВыбора.ЗагрузитьЗначения(ирОбщий.ВыгрузитьСвойствоЛкс(СписокНаборовПараметров));
КонецПроцедуры

Процедура НаборПараметровОчистка(Элемент, СтандартнаяОбработка = Истина)
	СтандартнаяОбработка = Ложь;
	мТекущийНаборПараметров = Неопределено;
	Элемент.Значение = "<Основной>";
	НаборПараметровПриИзменении(Элемент);
КонецПроцедуры

Процедура ОткрытьОбработкуНачалоВыбора(Элемент, СтандартнаяОбработка)
	Результат = ирКлиент.ВыбратьФайлЛкс(, "epf", "Внешняя обработка", Элемент.Значение);
	Если Результат <> Неопределено Тогда
		ирКлиент.ИнтерактивноЗаписатьВПолеВводаЛкс(Элемент, Результат);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьОбработкуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ирКлиент.ОткрытьФайлВПроводникеЛкс(Элемент.Значение);
КонецПроцедуры

Процедура РежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = "Авто";
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирБазыПользователяОС.Форма.Список");
ЭлементыФормы.БазыПользователя.ОтборСтрок.ПометкаУдаления.Установить(Ложь);
ЭлементыФормы.БазыПользователя.ОтборСтрок.Избранное.Значение = Истина;
мМаксЧислоКлавиш = 5;