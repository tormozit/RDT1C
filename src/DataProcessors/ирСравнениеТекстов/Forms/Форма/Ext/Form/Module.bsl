Перем мОболочкаРедактора; 
Перем мПолеТекстаПрограммы1;
Перем мПолеТекстаПрограммы2; 
Перем ЦветФонаТолько1;
Перем ЦветФонаТолько2;
Перем мРазрешитьАвтоПрокруткуТекста;
Перем мСтароеВыделение;
Перем мЛиСтараяСторонаЛевая;

Процедура ПриОткрытии()
	
	Если КлючУникальности = "Автотест" Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	Если РедакторHTML() = Неопределено Тогда
		ЭлементыФормы.РедакторHTML.Документ.ЭтоРедактор = Истина;
		ЭлементыФормы.РедакторHTML.Перейти(мПлатформа.БазовыйФайлРедактораКода());
		мОболочкаРедактора = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.РедакторHTML);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВариантСинтаксиса) Тогда
		КнопкаВариантаСинтаксиса = ЭлементыФормы.ДействияФормы.Кнопки.Синтаксис.Кнопки[ВариантСинтаксиса];
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОбщееНазвание) Тогда
		ирОбщий.ОбновитьТекстПослеМаркераЛкс(ЭтаФорма.Заголовок,, ОбщееНазвание, ": ");
	КонецЕсли; 
	ПодменюЯзыкаНажатие(КнопкаВариантаСинтаксиса);
	
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	// Освобождаем память для случая, когда форма в кэше
	Текст1 = ""; 
	Текст2 = ""; 
	Если мПолеТекстаПрограммы1 <> Неопределено Тогда
		мПолеТекстаПрограммы1.Уничтожить();
		мПолеТекстаПрограммы2.Уничтожить();
	КонецЕсли;

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ирКэш.ДоступноРедакторМонакоЛкс() Тогда 
		ирОбщий.СообщитьЛкс("В вашей конфигурации инструмент ""Сравнение текстов"" недоступен");
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Функция РедакторHTML()
	Если мОболочкаРедактора = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли; 
	Возврат мОболочкаРедактора.РедакторHTML();
КонецФункции

Процедура РедакторHTMLДокументСформирован(Элемент)
	
	Инфо = Новый СистемнаяИнформация();
	РедакторHTML = ЭлементыФормы.РедакторHTML.Документ.defaultView;
	РедакторHTML.init(Инфо.ВерсияПриложения);
	РедакторHTML.minimap(Ложь);
	РедакторHTML.setOption("disableNativeHovers", Истина); // События не перестают вызываться  // Пока не работает https://github.com/salexdv/bsl_console/issues/193
	РедакторHTML.showStatusBar(Ложь);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.РедакторHTML;
	//РедакторHTML.editor.focus(); // Если раскоментировать, то сочетания клавиш перестают срабатывать https://github.com/salexdv/bsl_console/issues/165#issuecomment-852768520
	ОбновитьСравнение();
	
КонецПроцедуры

//.
// Возвращаемое значение:
//   Число, Неопределено - 
Функция КодЯзыкаПрограммы() Экспорт
	Если ВариантСинтаксиса = "ЯзыкЗапросов" Тогда
		КодЯзыкаПрограммы = 1;
	//ИначеЕсли ВариантСинтаксиса = "ЯзыкКомпоновки" Тогда
	//	КодЯзыкаПрограммы = 2;
	ИначеЕсли ВариантСинтаксиса = "ВстроенныйЯзык" Тогда
		КодЯзыкаПрограммы = 0;
	Иначе
		КодЯзыкаПрограммы = Неопределено;
	КонецЕсли;
	Возврат КодЯзыкаПрограммы;
КонецФункции

Процедура РедакторHTMLonclick(Элемент, ДанныеСобытия)
	РедакторHTML = РедакторHTML();
	Если РедакторHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТекущиеПути();
КонецПроцедуры

Процедура ОбновитьТекущиеПути() Экспорт
	РедакторHTML = РедакторHTML();
	Если РедакторHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КодЯзыкаПрограммы() <> Неопределено Тогда
		ОбновитьПутьСтороны(ЭлементыФормы.ПутьВТексте2, мПолеТекстаПрограммы2, РедакторHTML.editor.getOriginalEditor().getSelection().positionLineNumber);
		ОбновитьПутьСтороны(ЭлементыФормы.ПутьВТексте1, мПолеТекстаПрограммы1, РедакторHTML.editor.getModifiedEditor().getSelection().positionLineNumber, Истина);
	КонецЕсли;
КонецПроцедуры

//.
// Параметры:
//   ПолеПути - ПолеВвода, ПолеВвода - 
//   ПолеТекстаПрограммы - ОбработкаОбъект.ирКлсПолеТекстаПрограммы - 
Процедура ОбновитьПутьСтороны(Знач ПолеПути, Знач ПолеТекстаПрограммы, Знач НомерСтроки, Знач АктивироватьВСтруктуреОтличий = Ложь) Экспорт
	ПолеТекстаПрограммы.ПолеТекста.УстановитьГраницыВыделения(НомерСтроки, 1, НомерСтроки, 1);
	ПолеТекстаПрограммы.КончитьОбработкуКоманды();
	ПолеТекстаПрограммы.РазобратьТекущийКонтекст(,, Ложь);
	Если ПолеТекстаПрограммы.ЯзыкПрограммы = 0 Тогда
		ИмяМетода = "";
		Если ПолеТекстаПрограммы.мМетодМодуля <> Неопределено Тогда
			ИмяМетода = ПолеТекстаПрограммы.мМетодМодуля.Имя;
		КонецЕсли;
		ПолеПути.Значение = ИмяМетода;
	ИначеЕсли ПолеТекстаПрограммы.ЯзыкПрограммы = 1 Тогда
		ИмяЗапроса = "";
		Если ПолеТекстаПрограммы.мИндексЗапросаПакета <> Неопределено Тогда
			ИмяЗапроса = "Запрос " + ПолеТекстаПрограммы.мИндексЗапросаПакета;
		КонецЕсли;
		ПолеПути.Значение = ИмяЗапроса;
	КонецЕсли;
	Если АктивироватьВСтруктуреОтличий И ТекущийЭлемент <> ЭлементыФормы.СтруктураОтличий Тогда
		Для Каждого СтруктураЭлемент Из СтруктураОтличий Цикл
			Если Истина
				И СтруктураЭлемент.НомерСтрокиНачало1 <= НомерСтроки
				И СтруктураЭлемент.НомерСтрокиКонец1 >= НомерСтроки
			Тогда
				Если ЭлементыФормы.СтруктураОтличий.ТекущаяСтрока <> СтруктураЭлемент Тогда
					мРазрешитьАвтоПрокруткуТекста = Ложь;
					ЭлементыФормы.СтруктураОтличий.ТекущаяСтрока = СтруктураЭлемент;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ЛиАктивнаЛеваяСторона() Экспорт
	РедакторHTML = РедакторHTML();
	Возврат РедакторHTML.getActiveEditor() = РедакторHTML.editor.getOriginalEditor();
КонецФункции

Процедура ОбновитьСравнение()
	
	РедакторHTML = РедакторHTML();
	Если РедакторHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодменюСинтаксис = ЭлементыФормы.ДействияФормы.Кнопки.Синтаксис.Кнопки;
	Если ВариантСинтаксиса = ПодменюСинтаксис.ЯзыкЗапросов.Имя Тогда
		РедакторHTML.setLanguageMode("bsl_query");
	ИначеЕсли ВариантСинтаксиса = ПодменюСинтаксис.ЯзыкКомпоновки.Имя Тогда
		РедакторHTML.setLanguageMode("dcs_query");
	ИначеЕсли ВариантСинтаксиса = ПодменюСинтаксис.XML.Имя Тогда
		РедакторHTML.setLanguageMode("xml");
	Иначе
		РедакторHTML.setLanguageMode("bsl");
	КонецЕсли;
	мСтароеВыделение = мОболочкаРедактора.ВыделениеДвумерное(Истина);
	Попытка
		мЛиСтараяСторонаЛевая = ЛиАктивнаЛеваяСторона();
	Исключение
		// Первый раз
		мЛиСтараяСторонаЛевая = Истина;
	КонецПопытки;
	ПодсветкаСинтаксиса = ВариантСинтаксиса <> "Нет";
	//мОболочкаРедактора.УстановитьТекст(Текст1);
	//РедакторHTML.compare(Текст2, Истина, ПодсветкаСинтаксиса, Истина, УчитыватьКрайнююПустоту);
	РедакторHTML.compare(Текст2, Истина, ПодсветкаСинтаксиса, Истина, УчитыватьКрайнююПустоту, Текст1); // https://github.com/salexdv/bsl_console/blob/develop/docs/compare.md
	ПолеТекстаHTML = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.РедакторHTML);
	#Если Сервер И Не Сервер Тогда
		ПолеТекстаHTML = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	ПолеТекстаHTML.Инициировать(ЭтаФорма);
	КодЯзыкаПрограммы = КодЯзыкаПрограммы();
	СтруктураОтличий.Очистить();
	Если КодЯзыкаПрограммы <> Неопределено Тогда
		мПолеТекстаПрограммы1 = ирОбщий.НовыйАнализаторКодаЛкс(КодЯзыкаПрограммы); 
		мПолеТекстаПрограммы1.УстановитьТекст(Текст1);
		мПолеТекстаПрограммы2 = ирОбщий.НовыйАнализаторКодаЛкс(КодЯзыкаПрограммы);
		мПолеТекстаПрограммы2.УстановитьТекст(Текст2);
		мПолеТекстаПрограммы1.РазобратьТекущийКонтекст();
		мПолеТекстаПрограммы2.РазобратьТекущийКонтекст();
		Если КодЯзыкаПрограммы = 1 Тогда
			мПолеТекстаПрограммы1.ПодготовитьПакетЗапросов();
			мПолеТекстаПрограммы2.ПодготовитьПакетЗапросов();
		КонецЕсли;
		ЕстьСтруктура = Ложь
			Или (Истина
				И КодЯзыкаПрограммы = 0
				И мПолеТекстаПрограммы1.мМодульМетаданных.Методы.Количество() + мПолеТекстаПрограммы2.мМодульМетаданных.Методы.Количество() > 2)
			Или (Истина
				И КодЯзыкаПрограммы = 1
				И мПолеТекстаПрограммы1.мПакетЗапросов.Позиции0Запросов.Количество() + мПолеТекстаПрограммы2.мПакетЗапросов.Позиции0Запросов.Количество() > 2);
		ИзменитьСвернутостьПанельСтруктуры(ЕстьСтруктура);
		ПодключитьОбработчикОжидания("ОбновитьСтруктуруОтличий", 0.2, Истина); // TODO Сделать проброс оповещения о завершении вычисления различий из HMTL
	КонецЕсли;

КонецПроцедуры

Функция НовыйЭлементОтличия()
	Структура = Новый Структура;
	Структура.Вставить("modifiedText", "");
	Структура.Вставить("originalStartLineNumber", 0);
	Структура.Вставить("originalEndLineNumber", 0);
	Структура.Вставить("modifiedStartLineNumber", 0);
	Структура.Вставить("modifiedEndLineNumber", 0);
	Возврат Структура;
КонецФункции

Процедура ОбновитьСтруктуруОтличий() Экспорт
	мРазрешитьАвтоПрокруткуТекста = Ложь;
	РедакторHTML = РедакторHTML();
	КодЯзыкаПрограммы = КодЯзыкаПрограммы();
	Если ЗначениеЗаполнено(ПараметрНомерСтроки1) Тогда
		мСтароеВыделение.НачальнаяСтрока = ПараметрНомерСтроки1;
		мСтароеВыделение.КонечнаяСтрока = ПараметрНомерСтроки1;
		мСтароеВыделение.КонечнаяКолонка = 100;
		ПараметрНомерСтроки1 = 0;
		мЛиСтараяСторонаЛевая = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрНомерСтроки2) Тогда
		мСтароеВыделение.НачальнаяСтрока = ПараметрНомерСтроки2;
		мСтароеВыделение.КонечнаяСтрока = ПараметрНомерСтроки2;
		мСтароеВыделение.КонечнаяКолонка = 100;
		ПараметрНомерСтроки2 = 0;
		мЛиСтараяСторонаЛевая = Ложь;
	КонецЕсли;
	Если мЛиСтараяСторонаЛевая Тогда
		АктивироватьСторону1();
	Иначе
		АктивироватьСторону2();
	КонецЕсли;
	мОболочкаРедактора.УстановитьВыделениеДвумерное(мСтароеВыделение, Истина);
	СписокОтличий = РедакторHTML.getDifferences(); // Массив Из см. НовыйЭлементОтличия
	Если СписокОтличий = Неопределено Тогда
		// Ошибка в коде редактора https://github.com/salexdv/bsl_console/issues/362
		Возврат;
	КонецЕсли;
	Если КодЯзыкаПрограммы = 0 Тогда
		ЗаполнитьНомераСтрокМетодов(мПолеТекстаПрограммы1);
		ЗаполнитьНомераСтрокМетодов(мПолеТекстаПрограммы2);
	Иначе
		ЗаполнитьНомераСтрокЗапросов(мПолеТекстаПрограммы1);
		ЗаполнитьНомераСтрокЗапросов(мПолеТекстаПрограммы2);
	КонецЕсли;
	Для Каждого СписокЭлемент Из СписокОтличий Цикл
		СтрокаТаблицы = СтруктураОтличий.Добавить();
		СтрокаТаблицы.НомерСтрокиНачало1 = СписокЭлемент.originalStartLineNumber;
		СтрокаТаблицы.НомерСтрокиКонец1 = СписокЭлемент.originalEndLineNumber;
		СтрокаТаблицы.НомерСтрокиНачало2 = СписокЭлемент.modifiedStartLineNumber;
		СтрокаТаблицы.НомерСтрокиКонец2 = СписокЭлемент.modifiedEndLineNumber;
		Если КодЯзыкаПрограммы = 0 Тогда
			Имена1 = ПокрытиеОтличиемМетоды(мПолеТекстаПрограммы1, СтрокаТаблицы.НомерСтрокиНачало1, СтрокаТаблицы.НомерСтрокиКонец1);
			Имена2 = ПокрытиеОтличиемМетоды(мПолеТекстаПрограммы2, СтрокаТаблицы.НомерСтрокиНачало2, СтрокаТаблицы.НомерСтрокиКонец2);
		Иначе
			Имена1 = ПокрытиеОтличиемЗапросы(мПолеТекстаПрограммы1, СтрокаТаблицы.НомерСтрокиНачало1, СтрокаТаблицы.НомерСтрокиКонец1);
			Имена2 = ПокрытиеОтличиемЗапросы(мПолеТекстаПрограммы2, СтрокаТаблицы.НомерСтрокиНачало2, СтрокаТаблицы.НомерСтрокиКонец2);
		КонецЕсли;
		НоваяСтрокаТаблицы = СтрокаТаблицы;
		Для Каждого ЭлементСписка Из Имена1 Цикл
			Если НоваяСтрокаТаблицы = Неопределено Тогда
				НоваяСтрокаТаблицы = СтруктураОтличий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
				НоваяСтрокаТаблицы.НомерСтрокиНачало1 = ЭлементСписка.Значение.НомерСтрокиНачало;
				НоваяСтрокаТаблицы.НомерСтрокиКонец1 = ЭлементСписка.Значение.НомерСтрокиКонец;
			КонецЕсли;
			НоваяСтрокаТаблицы.Блок = ЭлементСписка.Представление;
			НоваяСтрокаТаблицы.ТипОтличия = 1;
			НоваяСтрокаТаблицы = Неопределено;
		КонецЦикла;
		СтрокаТаблицы = СтруктураОтличий[СтруктураОтличий.Количество() - 1];
		Если ирОбщий.НайтиЭлементКоллекцииЛкс(Имена2, "Представление", СтрокаТаблицы.Блок) <> Неопределено Тогда
			НоваяСтрокаТаблицы = СтрокаТаблицы;
		Иначе
			// Метод удален и добавлен другой
			НоваяСтрокаТаблицы = Неопределено;
		КонецЕсли;
		Для Каждого ЭлементСписка Из Имена2 Цикл
			Если НоваяСтрокаТаблицы = Неопределено Тогда
				НоваяСтрокаТаблицы = СтруктураОтличий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаТаблицы);
			КонецЕсли;
			Если ирОбщий.НайтиЭлементКоллекцииЛкс(Имена1, "Представление", ЭлементСписка.Представление) = Неопределено Тогда
				НоваяСтрокаТаблицы.ТипОтличия = 2;
				НоваяСтрокаТаблицы.Блок = ЭлементСписка.Представление;
				Если ЭлементСписка.Значение <> Неопределено Тогда
					НоваяСтрокаТаблицы.НомерСтрокиНачало2 = ЭлементСписка.Значение.НомерСтрокиНачало;
					НоваяСтрокаТаблицы.НомерСтрокиКонец2 = ЭлементСписка.Значение.НомерСтрокиКонец;
				КонецЕсли;
			ИначеЕсли ЭлементСписка.Представление = НоваяСтрокаТаблицы.Блок Тогда
				НоваяСтрокаТаблицы.ТипОтличия = 0;
				Если Ложь
					Или (Истина
						И СтруктураОтличий.Количество() > 1
						И СтруктураОтличий[СтруктураОтличий.Количество() - 2].Блок = НоваяСтрокаТаблицы.Блок
						И СтруктураОтличий[СтруктураОтличий.Количество() - 2].ТипОтличия = 0
						И НоваяСтрокаТаблицы.НомерСтрокиНачало1 - СтруктураОтличий[СтруктураОтличий.Количество() - 2].НомерСтрокиНачало1 < 5)
					Или (Истина
						И ПустаяСтрока(СписокЭлемент.modifiedText) 
						И НоваяСтрокаТаблицы.НомерСтрокиКонец2 = 0
						И ЭлементСписка.Значение.НомерСтрокиНачало = НоваяСтрокаТаблицы.НомерСтрокиНачало2)
				Тогда
					СтруктураОтличий.Удалить(НоваяСтрокаТаблицы);
				КонецЕсли;
			Иначе
				Если НоваяСтрокаТаблицы.ТипОтличия = 2 Тогда
					СтруктураОтличий.Удалить(НоваяСтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаТаблицы = Неопределено;
		КонецЦикла;
	КонецЦикла;
	ирОбщий.ОбновитьКопиюКолонкиВНижнемРегистреЛкс(СтруктураОтличий, "Блок");
	// Поиск перемещений
	Для Каждого СтруктураЭлемент Из СтруктураОтличий Цикл
		Если СтруктураЭлемент.ТипОтличия = 1 Тогда
			ПарныйТипОтличия = 2;
		ИначеЕсли СтруктураЭлемент.ТипОтличия = 2 Тогда
			ПарныйТипОтличия = 1;
		Иначе
			Продолжить;
		КонецЕсли;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТипОтличия", ПарныйТипОтличия);
		ПараметрыОтбора.Вставить("НБлок", СтруктураЭлемент.НБлок);
		СтруктураЭлемент.Перемещен = СтруктураОтличий.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	КонецЦикла;
	СортироватьСтруктуру();   
	ОбновитьТекущиеПути();
КонецПроцедуры

Процедура СортироватьСтруктуру() Экспорт
	Если ПорядокПоИмени Тогда
		СтруктураОтличий.Сортировать("Блок, НомерСтрокиНачало1, НомерСтрокиНачало2");
	Иначе
		СтруктураОтличий.Сортировать("НомерСтрокиНачало1, НомерСтрокиНачало2, Блок");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНомераСтрокМетодов(Знач ПолеТекстаПрограммы) Экспорт
	Методы = ПолеТекстаПрограммы.мМодульМетаданных.Методы;
	Методы.Колонки.Добавить("НомерСтрокиНачало", Новый ОписаниеТипов("Число"));
	Методы.Колонки.Добавить("НомерСтрокиКонец", Новый ОписаниеТипов("Число"));
	ПредЭлемент = Неопределено; // см. Методы[0]
	СостояниеРазбораСтрок = ПолеТекстаПрограммы.СостояниеРазбораСтрок();
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(Методы.Количество());
	Для Каждого МетодыЭлемент Из Методы Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		МетодыЭлемент.НомерСтрокиНачало = ПолеТекстаПрограммы.НомерСтрокиИзПозиции(МетодыЭлемент.ПозицияСОписанием, СостояниеРазбораСтрок);
		
		// Жертва ради ускорения
		//МетодыЭлемент.НомерСтрокиКонец = ПолеТекстаПрограммы.НомерСтрокиИзПозиции(МетодыЭлемент.ПозицияСОписанием + МетодыЭлемент.ДлинаСОписанием);
		Если ПредЭлемент <> Неопределено Тогда
			ПредЭлемент.НомерСтрокиКонец = МетодыЭлемент.НомерСтрокиНачало - 1; // Жертва ради ускорения
		КонецЕсли;
		ПредЭлемент = МетодыЭлемент;
	КонецЦикла;  
	Если ПредЭлемент <> Неопределено Тогда
		ПредЭлемент.НомерСтрокиКонец = СтрЧислоСтрок(ПолеТекстаПрограммы.мОригинальныйТекст);
	КонецЕсли;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
КонецПроцедуры

Процедура ЗаполнитьНомераСтрокЗапросов(Знач ПолеТекстаПрограммы) Экспорт
	ПакетЗапросов = ПолеТекстаПрограммы.мПакетЗапросов;
	НомераСтрок = Новый ТаблицаЗначений;
	НомераСтрок.Колонки.Добавить("НомерСтрокиНачало", Новый ОписаниеТипов("Число"));
	НомераСтрок.Колонки.Добавить("НомерСтрокиКонец", Новый ОписаниеТипов("Число"));
	ПакетЗапросов.Вставить("НомераСтрок", НомераСтрок);
	ПредЭлемент = Неопределено; // см. Методы[0]
	СостояниеРазбораСтрок = ПолеТекстаПрограммы.СостояниеРазбораСтрок();
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ПакетЗапросов.Структура.Количество());
	Для ИндексЗапроса = 0 По ПакетЗапросов.Позиции0Запросов.ВГраница() Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		НомераСтрокЭлемент = НомераСтрок.Добавить();
		НомераСтрокЭлемент.НомерСтрокиНачало = ПолеТекстаПрограммы.НомерСтрокиИзПозиции(ПакетЗапросов.Позиции0Запросов[ИндексЗапроса] + 1, СостояниеРазбораСтрок);
		Если ПредЭлемент <> Неопределено Тогда
			ПредЭлемент.НомерСтрокиКонец = НомераСтрокЭлемент.НомерСтрокиНачало - 1; 
		КонецЕсли;
		ПредЭлемент = НомераСтрокЭлемент;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ПредЭлемент.НомерСтрокиКонец = СтрЧислоСтрок(ПолеТекстаПрограммы.мОригинальныйТекст);
КонецПроцедуры

Функция ПокрытиеОтличиемМетоды(Знач ПолеТекстаПрограммы, Знач НомерСтрокиНачало, Знач НомерСтрокКонец) Экспорт
	Если НомерСтрокиНачало = 0 Тогда
		НомерСтрокиНачало = НомерСтрокКонец;
	КонецЕсли;
	Если НомерСтрокКонец = 0 Тогда
		НомерСтрокКонец = НомерСтрокиНачало;
	КонецЕсли;
	Результат = Новый СписокЗначений;  
	_РежимОтладки = Ложь;
	Если _РежимОтладки Тогда // Можно менять на Истина в точке останова, например условием ирОбщий.Пр(_РежимОтладки, 1, 1)
		// Пассивный оригинал расположенного ниже однострочного кода. Выполняйте изменения синхронно в обоих вариантах.
		Для Каждого МетодыЭлемент Из ПолеТекстаПрограммы.мМодульМетаданных.Методы Цикл
			Если Не (Ложь
					ИЛи МетодыЭлемент.НомерСтрокиНачало > НомерСтрокКонец
					Или МетодыЭлемент.НомерСтрокиКонец < НомерСтрокиНачало)
			Тогда
				Результат.Добавить(МетодыЭлемент, МетодыЭлемент.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Однострочный код использован для ускорения при разрешенной отладке. Выше расположен оригинал. Выполняйте изменения синхронно в обоих вариантах. Преобразовано консолью кода из подсистемы "Инструменты разработчика"
		Для Каждого МетодыЭлемент Из ПолеТекстаПрограммы.мМодульМетаданных.Методы Цикл   Если Не (Ложь   ИЛи МетодыЭлемент.НомерСтрокиНачало > НомерСтрокКонец   Или МетодыЭлемент.НомерСтрокиКонец < НомерСтрокиНачало)   Тогда   Результат.Добавить(МетодыЭлемент, МетодыЭлемент.Имя);   КонецЕсли;   КонецЦикла;
	КонецЕсли;
	Если Результат.Количество() = 0 Тогда
		Результат.Добавить(, мПлатформа.ИмяМетодаИнициация());
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПокрытиеОтличиемЗапросы(Знач ПолеТекстаПрограммы, Знач НомерСтрокиНачало, Знач НомерСтрокКонец) Экспорт
	Если НомерСтрокиНачало = 0 Тогда
		НомерСтрокиНачало = НомерСтрокКонец;
	КонецЕсли;
	Если НомерСтрокКонец = 0 Тогда
		НомерСтрокКонец = НомерСтрокиНачало;
	КонецЕсли;
	ПакетЗапросов = ПолеТекстаПрограммы.мПакетЗапросов;
	Результат = Новый СписокЗначений;
	Для ИндексЗапроса = 0 По ПакетЗапросов.Позиции0Запросов.ВГраница() Цикл
		НомераСтрокЭлемент = ПакетЗапросов.НомераСтрок[ИндексЗапроса];
		Если ПакетЗапросов.Структура.Количество() > ИндексЗапроса Тогда
			ИмяЭлемента = ПакетЗапросов.Структура[ИндексЗапроса].Представление;
		Иначе
			ИмяЭлемента = "Запрос" + ИндексЗапроса;
		КонецЕсли;
		Если Не (Ложь
			ИЛи НомераСтрокЭлемент.НомерСтрокиНачало > НомерСтрокКонец
			Или НомераСтрокЭлемент.НомерСтрокиКонец < НомерСтрокиНачало)
		Тогда
			Результат.Добавить(НомераСтрокЭлемент, ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ДействияФормыСледующий(Кнопка = Неопределено)
	
	РедакторHTML().nextDiff();
	
КонецПроцедуры

Процедура ДействияФормыПредыдущий(Кнопка = Неопределено)
	
	РедакторHTML().previousDiff();

КонецПроцедуры

Процедура ПодменюЯзыкаНажатие(Кнопка = Неопределено)
	
	ирКлиент.ПодменюПереключателяНажатиеЛкс(ЭлементыФормы.ДействияФормы.Кнопки.Синтаксис, Кнопка);
	ЭтаФорма.ВариантСинтаксиса = Кнопка.Имя;
	ЭтаФорма.ПутьВТексте1 = "";
	ЭтаФорма.ПутьВТексте2 = "";
	ОбновитьСравнение();
	
КонецПроцедуры

Процедура ДействияФормыСравнитьВстроеннымСредством(Кнопка)
	
	ирКлиент.СравнитьЗначенияВФормеЧерезXMLЛкс(Текст1, Текст2,, Заголовок1, Заголовок2,,, ОбщееНазвание, Ложь);
	
КонецПроцедуры

Процедура КПРедакторHTMLНайтиСледующееHTML(Кнопка)
	
	РедакторHTML().nextMatch();
	
КонецПроцедуры

Процедура КПРедакторHTMLНайтиПредыдущееHTML(Кнопка)
	
	РедакторHTML().previousMatch();

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 
	
КонецПроцедуры

Процедура УчитыватьКрайнююПустотуПриИзменении(Элемент)
	ОбновитьСравнение();
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	//РедакторHTML = РедакторHTML();
	//Если РедакторHTML = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//РедакторHTML.updateText(Текст1);
	//ОбновитьСравнение();
КонецПроцедуры

Процедура ДействияФормыСравнитьВVSCode(Кнопка)
	Если ВариантСинтаксиса = "ВстроенныйЯзык" Тогда
		РасширениеФайла = "bsl";
	Иначе
		РасширениеФайла = "txt";
	КонецЕсли;
	ИмяФайла1 = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ИмяФайла2 = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ирОбщий.ЗаписатьТекстВФайлЛкс(Текст1, ИмяФайла1);
	ирОбщий.ЗаписатьТекстВФайлЛкс(Текст2, ИмяФайла2);
	Команда = "code -d """+ ИмяФайла1 +""" "+ ИмяФайла2 + """";
	ирОбщий.ЗапуститьСкрытоеПриложениеИДождатьсяЗавершенияЛкс(Команда);
КонецПроцедуры

Процедура ДействияФормыОткрытьИсходныйТекст(Кнопка)
	РедакторHTML = РедакторHTML();
	Если РедакторHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.РедакторHTML;
	Если ЛиАктивнаЛеваяСторона() Тогда
		ЗаголовокАктивногоРедактора = Заголовок1;
	Иначе
		ЗаголовокАктивногоРедактора = Заголовок2;
	КонецЕсли;
	ПолеТекста = Неопределено; // ОбработкаОбъект.ирОболочкаПолеТекста
	Текст = ирКлиент.Форма_ЗначениеТекущегоПоляЛкс(ЭтаФорма,, ПолеТекста);
	Если ПолеТекста <> Неопределено Тогда
		ВыделениеДвумерное = ПолеТекста.ВыделениеДвумерное(Истина);
	КонецЕсли;
	НовыйТекст = ирКлиент.ОткрытьТекстЛкс(Текст, ЗаголовокАктивногоРедактора, ВариантСинтаксиса,, ЗаголовокАктивногоРедактора, ЭтаФорма,, Истина, ВыделениеДвумерное);
	Если НовыйТекст <> Неопределено Тогда
		Если ЛиАктивнаЛеваяСторона() Тогда
			ЭтаФорма.Текст1 = НовыйТекст;
		Иначе
			ЭтаФорма.Текст2 = НовыйТекст;
		КонецЕсли;
		ОбновитьСравнение();
	КонецЕсли;
КонецПроцедуры

Процедура СкрытьОдинаковоеПриИзменении(Элемент)
	// Слишком старое ядро редактора
	//ОбновитьСравнение();
КонецПроцедуры

Процедура СтруктураОтличийПриАктивизацииСтроки(Элемент) 
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если мРазрешитьАвтоПрокруткуТекста Тогда
		АктивироватьСторону2();
		НомерСтроки = Элемент.ТекущаяСтрока.НомерСтрокиНачало2;
		Если ПустаяСтрока(мПолеТекстаПрограммы2.ПолеТекста.ПолучитьСтроку(НомерСтроки)) Тогда
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		мОболочкаРедактора.УстановитьГраницыВыделения(НомерСтроки, 1, НомерСтроки, 100,,,, Истина);
		АктивироватьСторону1();
		НомерСтроки = Элемент.ТекущаяСтрока.НомерСтрокиНачало1;
		Если ПустаяСтрока(мПолеТекстаПрограммы1.ПолеТекста.ПолучитьСтроку(НомерСтроки)) Тогда
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		мОболочкаРедактора.УстановитьГраницыВыделения(НомерСтроки, 1, НомерСтроки, 100,,,, Истина);
		Если Элемент.ТекущаяСтрока.ТипОтличия = 2 Тогда
			АктивироватьСторону2();
		КонецЕсли;
		ЭтаФорма.ТекущийЭлемент = Элемент;
		ОбновитьТекущиеПути();
	КонецЕсли;
	мРазрешитьАвтоПрокруткуТекста = Истина; 
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры 

Процедура АктивироватьСторону2() Экспорт
	РедакторHTML().editor.getModifiedEditor().focus();
КонецПроцедуры 

Процедура АктивироватьСторону1() Экспорт
	РедакторHTML().editor.getOriginalEditor().focus();
КонецПроцедуры 

Процедура ИзменитьСвернутостьПанельСтруктуры(Видимость)
	ирКлиент.ИзменитьСвернутостьЛкс(ЭтаФорма, Видимость, ЭлементыФормы.ПанельСтруктура, ЭтаФорма.ЭлементыФормы.Разделитель1, ЭтаФорма.Панель, "право");
КонецПроцедуры

Процедура ПорядокПоИмениПриИзменении(Элемент)
	СортироватьСтруктуру();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ИзменитьСвернутостьПанельСтруктуры(Истина);
КонецПроцедуры

Процедура СтруктураОтличийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ТипОтличия = 1 Тогда
		ОформлениеСтроки.ЦветФона = ЦветФонаТолько1;
	ИначеЕсли ДанныеСтроки.ТипОтличия = 2 Тогда
		ОформлениеСтроки.ЦветФона = ЦветФонаТолько2;
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ДействияФормыЗагрузитьТекстИзФайла(Кнопка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Не ВыборФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.РедакторHTML;
	Если ЛиАктивнаЛеваяСторона() Тогда
		ЭтаФорма.Текст1 = ирОбщий.ПрочитатьТекстИзФайлаЛкс(ВыборФайла.ПолноеИмяФайла);
		ЭтаФорма.Заголовок1 = ВыборФайла.ПолноеИмяФайла;
	Иначе
		ЭтаФорма.Текст2 = ирОбщий.ПрочитатьТекстИзФайлаЛкс(ВыборФайла.ПолноеИмяФайла);
		ЭтаФорма.Заголовок2 = ВыборФайла.ПолноеИмяФайла;
	КонецЕсли;
	ОбновитьСравнение();
	
КонецПроцедуры

Процедура СтруктураОтличийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ИмяБлока1 = ВыбраннаяСтрока.Блок;
	ИмяБлока2 = ВыбраннаяСтрока.Блок;
	Если КодЯзыкаПрограммы() = 0 Тогда
		Метод1 = мПолеТекстаПрограммы1.мМодульМетаданных.Методы.Найти(НРег(ИмяБлока1), "НИмя");
		Метод2 = мПолеТекстаПрограммы2.мМодульМетаданных.Методы.Найти(НРег(ИмяБлока2), "НИмя");
		Если Истина
			И Метод1 <> Неопределено
			И Метод2 <> Неопределено
		Тогда
			ТекстБлока1 = мПолеТекстаПрограммы1.ТекстМетодаСОписанием(Метод1);
			ТекстБлока2 = мПолеТекстаПрограммы2.ТекстМетодаСОписанием(Метод2);
		КонецЕсли;
	ИначеЕсли КодЯзыкаПрограммы() = 1 Тогда
		ИндексЗапроса1 = Неопределено;
		ИндексЗапроса2 = Неопределено;
		мПолеТекстаПрограммы1.НайтиЗапросВременнойТаблицы(ИмяБлока1,,, ИндексЗапроса1);
		мПолеТекстаПрограммы2.НайтиЗапросВременнойТаблицы(ИмяБлока2,,, ИндексЗапроса2);
		Если Истина
			И ИндексЗапроса1 <> Неопределено
			И ИндексЗапроса2 <> Неопределено
		Тогда
			ТекстБлока1 = мПолеТекстаПрограммы1.мПакетЗапросов.ТекстыЗапросов[ИндексЗапроса1];
			ТекстБлока2 = мПолеТекстаПрограммы2.мПакетЗапросов.ТекстыЗапросов[ИндексЗапроса2];
		КонецЕсли;
	КонецЕсли;
	Если ТекстБлока1 <> Неопределено Тогда
		ЗаголовокСравнения = ИмяБлока1 + " <> " + ИмяБлока2;
		ирКлиент.СравнитьЗначенияВФормеЧерезXMLЛкс(ТекстБлока1, ТекстБлока2,, ИмяБлока1, ИмяБлока2,, ВариантСинтаксиса, ЗаголовокСравнения,, ЗаголовокСравнения);
	КонецЕсли;
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирСравнениеТекстов.Форма.Форма");
#Если Сервер И Не Сервер Тогда
	мОболочкаРедактора = Обработки.ирОболочкаПолеТекста.Создать();
#КонецЕсли
ПорядокПоИмени = Истина;
ЦветФонаТолько1 = WebЦвета.СветлоЖелтый;
ЦветФонаТолько2 = WebЦвета.Лазурный;
Текст1 = " ";
Текст2 = " ";
мРазрешитьАвтоПрокруткуТекста = Ложь;
