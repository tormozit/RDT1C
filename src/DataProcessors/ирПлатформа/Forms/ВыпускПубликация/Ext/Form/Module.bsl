Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	выхИменаСвойств = "Форма.Токен, Форма.Автор, Форма.Репозиторий";
КонецФункции

Процедура ЗагрузитьНастройкуВФорме(НастройкаФормы, ДопПараметры) Экспорт 
	ирКлиент.ЗагрузитьНастройкуФормыЛкс(ЭтаФорма, НастройкаФормы); 
КонецПроцедуры

Процедура ПриОткрытии()
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ирКлиент.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма);
	ЭтаФорма.АктуальнаяВерсия = ирОбщий.СтрокаБезКонцаЛкс(ирОбщий.АктуальнаяВерсияПодсистемыЛкс("Расширение"));
КонецПроцедуры

Процедура ПриЗакрытии()
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
КонецПроцедуры 

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
КонецПроцедуры 

Процедура ОсновныеДействияФормыВыполнить(Кнопка)

	ВариантыПоставки = ирОбщий.ВариантыПоставкиПодсистемыЛкс();
	Для Каждого КлючИЗначение Из ВариантыПоставки Цикл
		НазваниеВарианта = КлючИЗначение.Ключ;
		СсылкаНаСтраницуСкачивания = "";
		ВерсияВарианта = ирОбщий.АктуальнаяВерсияПодсистемыЛкс(НазваниеВарианта, СсылкаНаСтраницуСкачивания);
		Если Не ирОбщий.СтрНачинаетсяСЛкс(ВерсияВарианта, АктуальнаяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		ДвоичныеДанные = ирОбщий.СкачатьФайлАктуальнойВерсииПодсистемыЛкс(СсылкаНаСтраницуСкачивания);
		Файл = Новый Файл(КаталогВременныхФайлов() + "ir-" + ВерсияВарианта + "." + КлючИЗначение.Значение);
		ДвоичныеДанные.Записать(Файл.ПолноеИмя);
		Соединение = Новый HTTPСоединение("api.github.com", 443,, ,, 3, новый ЗащищенноеСоединениеOpenSSL);
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization", "Bearer " + Токен);     
		Заголовки.Вставить("User-Agent", "1C_Release_Uploader");
		Заголовки.Вставить("Accept", "application/vnd.github.v3+json");
		ДанныеРелиза = Новый Соответствие;
		ДанныеРелиза.Вставить("tag_name", АктуальнаяВерсия);
		ДанныеРелиза.Вставить("name", АктуальнаяВерсия); //представление релиза
		//ДанныеРелиза.Вставить("body", "Описание релиза");
		АдресРелизовПроекта = "/repos/" + Автор + "/" + Репозиторий + "/releases";
		ХТТПЗапрос = Новый HTTPЗапрос(АдресРелизовПроекта, Заголовки);
		ХТТПЗапрос.УстановитьТелоИзСтроки(ирОбщий.ОбъектВСтрокуJSONЛкс(ДанныеРелиза));
		Ответ = Соединение.ОтправитьДляОбработки(ХТТПЗапрос);
		Если Ответ.КодСостояния = 422 Тогда
			// Релиз уже существует
			ХТТПЗапрос = Новый HTTPЗапрос(АдресРелизовПроекта + "/tags/" + АктуальнаяВерсия, Заголовки);
			Ответ = Соединение.Получить(ХТТПЗапрос);
			Если Ответ.КодСостояния <> 200 Тогда
				ВызватьИсключение "Ошибка получения адреса загрузки в существующий релиз: " + Ответ.ПолучитьТелоКакСтроку();
			КонецЕсли;
		ИначеЕсли Ответ.КодСостояния <> 201 Тогда
			ВызватьИсключение "Ошибка создания релиза: " + Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;
		ОтветРелизаСтрока = Ответ.ПолучитьТелоКакСтроку();
		ОтветРелизаОбъект = ирОбщий.ОбъектИзСтрокиJSONЛкс(ОтветРелизаСтрока);
		АдресЗагрузкиФайла = ирОбщий.ПервыйФрагментЛкс(ирОбщий.СтруктураURIЛкс(ОтветРелизаОбъект["upload_url"]).ПутьНаСервере, "{?");
		ИмяФайлаДляСервера = ирОбщий.ТранслитероватьТекстЛкс(Файл.Имя);
		РанееЗагруженныйФайл = ирОбщий.НайтиЭлементКоллекцииЛкс(ОтветРелизаОбъект.assets, "name", ИмяФайлаДляСервера);
		Если РанееЗагруженныйФайл <> Неопределено Тогда 
			// Файл уже существует. Удалим его.
			ХТТПЗапрос = Новый HTTPЗапрос(АдресРелизовПроекта + "/assets/" + XMLСтрока(РанееЗагруженныйФайл.id), Заголовки);
			ОтветУдаления = Соединение.Удалить(ХТТПЗапрос);
		КонецЕсли;
		АдресЗагрузкиФайла = АдресЗагрузкиФайла + "?name=" + ИмяФайлаДляСервера;
		ФайлДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		СоединениеЗагрузки = Новый HTTPСоединение("uploads.github.com", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL);
		ХТТПЗапрос = Новый HTTPЗапрос(АдресЗагрузкиФайла, Заголовки);
		ХТТПЗапрос.УстановитьТелоИзДвоичныхДанных(ФайлДанные);
		ОтветЗагрузка = СоединениеЗагрузки.ОтправитьДляОбработки(ХТТПЗапрос);
		Если ОтветЗагрузка.КодСостояния <> 201 Тогда
			ВызватьИсключение "Ошибка загрузки файла : " + ОтветЗагрузка.КодСостояния + " " + ОтветЗагрузка.ПолучитьТелоКакСтроку();
		Иначе
			Сообщить("Файл """ + файл.Имя + """ опубликован");
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирПлатформа.Форма.ВыпускПубликация");
