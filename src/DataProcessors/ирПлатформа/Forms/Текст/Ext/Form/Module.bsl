// +++.КЛАСС.ПолеТекстаПрограммы
// Это коллекция экземпляров компоненты. Обязательный блок.
Перем ПолеТекстаПрограммы Экспорт;
// ---.КЛАСС.ПолеТекстаПрограммы

Перем мТекущаяСтраницаТекста;
Перем мТекущиеПодстраницы;
Перем мРедакторJSON;
Перем мПолеТекстаПоиска;
Перем мПолеТекстаХТМЛ;
Перем мИмяОткрытогоФайла;
Перем мМенеджерВременныхТаблиц Экспорт;
 
Процедура ЗакрытьССохранением()
	
	Если Истина
		И ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ЯзыкЗапросов
		И Не ПолеТекстаПрограммы.ЯзыкЗапросов.ПроверитьПрограммныйКод()
	Тогда
		Ответ = Вопрос("В тексте запроса обнаружена ошибка. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Истина
		И ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ВстроенныйЯзык
		И ПолеТекстаПрограммы.ВстроенныйЯзык.мЭтоФрагментМетода
		И Не ПолеТекстаПрограммы.ВстроенныйЯзык.ПроверитьПрограммныйКод()
	Тогда
		Ответ = Вопрос("В тексте алгоритма обнаружена ошибка. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрРежимВыбораМассива Тогда
		Закрыть();
	КонецЕсли;
	Если ЛиОсновнойПриемникФайл() Тогда 
		Если Не ЭтаФорма.Модифицированность Или СохранитьВФайл() Тогда 
			Закрыть();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.Текст = ПолучитьТекст(); 
	ЭтаФорма.ПараметрГраницыВыделения = ПолеТекста().ВыделениеДвумерное();
	ирКлиент.ПрименитьИзмененияИЗакрытьФормуЛкс(ЭтаФорма, Текст);

КонецПроцедуры

Функция ЛиОсновнойПриемникФайл()
	
	Возврат Не ЭтаФорма.МодальныйРежим И ЭтаФорма.ВладелецФормы = Неопределено;

КонецФункции

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	ЗакрытьССохранением();
	
КонецПроцедуры

Процедура ПриОткрытии()

	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	// +++.КЛАСС.ПолеТекстаПрограммы
	Если ПолеТекстаПрограммы = Неопределено Тогда
		ПолеТекстаПрограммы = Новый Структура;
	КонецЕсли;
	Обработка1 = Неопределено;
	Если Не ПолеТекстаПрограммы.Свойство("ВстроенныйЯзык", Обработка1) Тогда
		Обработка1 = ирОбщий.НовыйАнализаторКодаЛкс();
		#Если Сервер И Не Сервер Тогда
		    Обработка1 = Обработки.ирКлсПолеТекстаПрограммы.Создать();
		#КонецЕсли
	КонецЕсли;
	Обработка1.Инициализировать(ПолеТекстаПрограммы, ЭтаФорма, ЭлементыФормы.ВстроенныйЯзык, ЭлементыФормы.КоманднаяПанельВстроенныйЯзык, 0, "ВыполнитьЛокально", ЭтаФорма,,, Истина);
	Обработка2 = Неопределено;
	Если Не ПолеТекстаПрограммы.Свойство("ЯзыкЗапросов", Обработка2) Тогда
		Обработка2 = ирОбщий.НовыйАнализаторКодаЛкс();
		#Если Сервер И Не Сервер Тогда
		    Обработка2 = Обработки.ирКлсПолеТекстаПрограммы.Создать();
		#КонецЕсли
	КонецЕсли;
	Обработка2.Инициализировать(ПолеТекстаПрограммы, ЭтаФорма, ЭлементыФормы.ЯзыкЗапросов, ЭлементыФормы.КоманднаяПанельЯзыкЗапросов, 1,,,,, Истина);
	Обработка2.мМенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
	Обработка2.ОбновитьВычисляемыеДоступныеВременныеТаблицы();
	// ---.КЛАСС.ПолеТекстаПрограммы
	
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Ложь;
	мТекущаяСтраницаТекста = ЭлементыФормы.ПанельОсновная.Страницы.Обычный;
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Обычный;   
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюJSON.Кнопки.ФорматироватьJSON.Доступность = ирКэш.ДоступноЖСОНЛкс();

	мПолеТекстаПоиска = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.РезультатыПоиска);
	мПолеТекстаХТМЛ = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.HTMLГотовый);
	Если ирКэш.ДоступноБраузерWebKitЛкс() Тогда
		ЭлементыФормы.РезультатыПоиска.Документ.ЭтоРедактор = Истина;
	КонецЕсли;
	ЭлементыФормы.ПанельОсновная.Страницы.JSON.Доступность = ирКэш.ДоступноБраузерWebKitЛкс();
	ЭлементыФормы.ПанельОсновная.Страницы.XML.Доступность = ирКэш.ДоступноРедакторМонакоЛкс();
	ЭлементыФормы.ПанельЯзыкЗапросов.Страницы.РедакторHTML.Доступность = ирКэш.ДоступноРедакторМонакоЛкс();
	Если Не ЗначениеЗаполнено(ВариантПросмотра) Тогда
		Если Истина 
			И ЭлементыФормы.ПанельОсновная.Страницы.JSON.Доступность
			И СтрДлина(НачальноеЗначениеВыбора) < 1000000 // чтобы не заставлять пользователя ждать
			И ирОбщий.ЛиТекстJSONЛкс(НачальноеЗначениеВыбора) 
		Тогда
			ВариантПросмотра = "JSON";
		ИначеЕсли Истина
			И ЭлементыФормы.ПанельОсновная.Страницы.XML.Доступность 
			И ирОбщий.ЛиТекстXMLЛкс(НачальноеЗначениеВыбора) 
		Тогда
			ВариантПросмотра = "XML";
		ИначеЕсли ирОбщий.ЛиТекстHTMLЛкс(НачальноеЗначениеВыбора) Тогда
			ВариантПросмотра = "HTMLСырой"; // Слабая раскраска. Поэтому сначала пробуем XML
		ИначеЕсли Истина
			И СтрДлина(НачальноеЗначениеВыбора) < 100000 // Иначе очень долго работает конвертор
			И ирОбщий.ЛиТекстMarkdownЛкс(НачальноеЗначениеВыбора) 
		Тогда
			ВариантПросмотра = "Markdown";
		ИначеЕсли ирОбщий.ЛиТекстЯзыкаЗапросовЛкс(НачальноеЗначениеВыбора) Тогда
			ВариантПросмотра = "ЯзыкЗапросов";
		ИначеЕсли ирОбщий.ЛиТекстВстроенногоЯзыкаЛкс(НачальноеЗначениеВыбора) Тогда
			ВариантПросмотра = "ВстроенныйЯзык";
		ИначеЕсли Ложь
			Или ЗначениеЗаполнено(ПараметрСтрокаПоиска) 
			Или ТолькоПросмотр И Найти(НачальноеЗначениеВыбора, "://") > 0
		Тогда
			ВариантПросмотра = "РезультатыПоиска";
		ИначеЕсли ЗначениеЗаполнено(НачальноеЗначениеВыбора) И СтрЧислоСтрок(НачальноеЗначениеВыбора) = 1 Тогда 
			ВариантПросмотра = "Компактный";
		КонецЕсли;
	КонецЕсли; 
	Если ВариантПросмотра = "Markdown" Тогда
		ЭтаФорма.СтрокаПоиска = ПараметрСтрокаПоиска;
		ЭтаФорма.ПараметрСтрокаПоиска = "";
		ТекстХТМЛ = ПолучитьМакет("ПросмотрMarkdownHTML").ПолучитьТекст();
		ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%ТекстJS%", ПолучитьМакет("ПросмотрMarkdownКод").ПолучитьТекст()); 
		ЭлементыФормы.HTMLГотовый.УстановитьТекст(ТекстХТМЛ);
	ИначеЕсли ВариантПросмотра = "РезультатыПоиска" Тогда
		ЭтаФорма.СтрокаПоиска = ПараметрСтрокаПоиска;
		ЭтаФорма.ПараметрСтрокаПоиска = "";
	КонецЕсли;
	УстановитьТекст(НачальноеЗначениеВыбора);
	Если ВариантПросмотра <> "" Тогда
		СтартоваяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Найти(ВариантПросмотра);
		Если ВариантПросмотра = "Markdown" Тогда
			СтартоваяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.HTMLГотовый;
		КонецЕсли;
		Если СтартоваяСтраница = Неопределено Тогда
			ВызватьИсключение "Указан отсутствующий вариант просмотра - " + ВариантПросмотра;
		КонецЕсли;
		Если Не СтартоваяСтраница.Доступность Тогда
			Если СтартоваяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.XML Тогда
				СтартоваяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.HTMLСырой;
			Иначе
				СтартоваяСтраница = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
		Если СтартоваяСтраница <> Неопределено Тогда
			ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = СтартоваяСтраница;
		КонецЕсли; 
	КонецЕсли;
	Если ПолеТекстаПрограммы.ЯзыкЗапросов.ПредпочитатьHTMLРедакторКода() Тогда // надо вызывать после Форма_ПриОткрытииЛкс
		ЭлементыФормы.ПанельЯзыкЗапросов.ТекущаяСтраница = ЭлементыФормы.ПанельЯзыкЗапросов.Страницы.РедакторHTML;
	КонецЕсли;
	ЭлементыФормы.ПоказыватьРазмер.Доступность = Не ТолькоПросмотр;
	ЭтаФорма.ПоказыватьРазмер = ТолькоПросмотр Или СтрДлина(ПолучитьТекст()) < 100000;
	Если ЛиОсновнойПриемникФайл() Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Подсказка = "Сохранить в файл и закрыть";
	КонецЕсли;
	ирКлиент.ФормаОбъекта_ОбновитьЗаголовокЛкс(ЭтаФорма);
	ОбновитьРазмер();
	ЭтаФорма.ПараметрВыделитьВсе = Ложь; 
	ЭтаФорма.ПараметрГраницыВыделения = Неопределено;
	ЗаменыСпецСимволов = Новый Массив;
	ЗаменыСпецСимволов.Добавить(ЗаменаСпецСимвола(Символы.ПС));
	ЗаменыСпецСимволов.Добавить(ЗаменаСпецСимвола(Символы.ВК));
	ЗаменыСпецСимволов.Добавить(ЗаменаСпецСимвола(Символы.НПП));
	ЗаменыСпецСимволов.Добавить(ЗаменаСпецСимвола(Символы.Таб));
	ЗаменыСпецСимволов.Добавить("остальные - в виде своего десятичного кода " + ЗаменаСпецСимвола(Символы.ПФ));
	ЭлементыФормы.НадписьСпецсимволы.Заголовок = ирОбщий.СтрЗаменитьЛкс(ЭлементыФормы.НадписьСпецсимволы.Заголовок, "<ЗаменыСпецсимволов>", ирОбщий.СтрСоединитьЛкс(ЗаменыСпецСимволов));
	//ПриОткрытииОтложенно();
	ПодключитьОбработчикОжидания("ПриОткрытииОтложенно", 0.1, Истина); // Почему то при сихнронном вызове выделение слова не происходит
	
КонецПроцедуры

Процедура ПриОткрытииОтложенно()
	
	Если ПараметрСтрокаПоиска <> "" Тогда 
		ПолеТекста = ПолеТекста();
		ирКлиент.НайтиПоказатьФрагментВПолеТекстаЛкс(ЭтаФорма, ПолеТекста, ПараметрСтрокаПоиска, Ложь);
		ЭтаФорма.СтрокаПоиска = ПараметрСтрокаПоиска;
		ЭтаФорма.ПараметрСтрокаПоиска = "";
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьРазмер()
	
	Если ПоказыватьРазмер Тогда
		ЭтаФорма.РазмерТекста = СтрДлина(ПолучитьТекст());
	Иначе
		ЭтаФорма.РазмерТекста = 0;
	КонецЕсли;
	Если Не ТолькоПросмотр И ПоказыватьРазмер Тогда
		ПодключитьОбработчикОжидания("ОбновитьРазмер", 2, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Для Каждого КлючИЗначение Из ПолеТекстаПрограммы Цикл
		Если Не КлючИЗначение.Значение.ЛиМожноЗакрытьФорму() Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Если Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Вопрос("Строковый литерал был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗакрытьССохранением();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекст() Экспорт

	ПолеТекста = ПолеТекста(Истина);
	#Если Сервер И Не Сервер Тогда
		ПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	Если ПолеТекста.ЭлементФормы = ЭлементыФормы.JSON Тогда
		Текст = мРедакторJSON.getText();
	ИначеЕсли Не ПолеТекста.ТолькоПросмотр() Тогда
		Текст = ПолеТекста.ПолучитьТекст();
	КонецЕсли; 
	Возврат Текст;

КонецФункции

Функция ПолеТекста(Старое = Ложь) Экспорт 
	
	Если Старое Тогда
		ИмяЭлемента = мТекущаяСтраницаТекста.Имя;
	Иначе
		ИмяЭлемента = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя;
	КонецЕсли;
	ПанельВнутриСтраницы = ЭлементыФормы.Найти("Панель" + ИмяЭлемента); // см. ЭлементыФормы.ПанельЯзыкЗапросов
	Если ПанельВнутриСтраницы <> Неопределено Тогда
		Если Старое Тогда
			Подстраница = мТекущиеПодстраницы[ПанельВнутриСтраницы.Имя];
		Иначе
			Подстраница = ПанельВнутриСтраницы.ТекущаяСтраница;
		КонецЕсли;
		Если Подстраница = ПанельВнутриСтраницы.Страницы.РедакторHTML Тогда
			ИмяЭлемента = ИмяЭлемента + "HTML";
		КонецЕсли;
	КонецЕсли;
	ТекущееПоле = ЭлементыФормы[ИмяЭлемента];
	Если ТипЗнч(ТекущееПоле) = Тип("ТабличноеПоле") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеТекста = ирКлиент.ОболочкаПоляТекстаЛкс(ТекущееПоле);
	Возврат ПолеТекста;

КонецФункции

Функция УстановитьТекст(Знач Текст, Знач Активировать = Ложь, Знач НачальнаяСтрока = 0, Знач НачальнаяКолонка = 0, Знач КонечнаяСтрока = 0, Знач КонечнаяКолонка = 0,
	Знач ЛиНачальныйТекст = Неопределено)

	ПолеТекста = ПолеТекста();
	Если ПолеТекста = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ВыделитьВсе = ПараметрВыделитьВсе;
	#Если Сервер И Не Сервер Тогда
		ПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	Если ПолеТекста.ЭлементФормы = ЭлементыФормы.JSON Тогда
		Если мРедакторJSON = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
		мРедакторJSON.setMode("code"); // https://github.com/josdejong/jsoneditor/issues/1210
		мРедакторJSON.setText(Текст);
		Если Активировать Тогда
			мРедакторJSON.focus();
		КонецЕсли;
		ДеревоJSONПриИзменении();
	ИначеЕсли ПолеТекста.ЭлементФормы = ЭлементыФормы.HTMLГотовый И ВариантПросмотра = "Markdown" Тогда
		Попытка
			ЭлементыФормы.HTMLГотовый.Документ.defaultView.setText(Текст);
		Исключение
			// Еще не инициировался
		КонецПопытки;
	ИначеЕсли ПолеТекста.ЭлементФормы = ЭлементыФормы.НепечатныеСимволы Тогда
		Вхождения = ирОбщий.НайтиРегВыражениеЛкс(Текст, ирОбщий.ШаблонНепечатныйСимволКромеПробелаЛкс());
		Вхождения.Свернуть("ТекстВхождения");
		ТекстНепечатные = Текст;
		Для Каждого Символ Из Вхождения.ВыгрузитьКолонку("ТекстВхождения") Цикл
			ЗаменаСимвола = ЗаменаСпецСимвола(Символ);
			ТекстНепечатные = СтрЗаменить(ТекстНепечатные, Символ, ЗаменаСимвола);
		КонецЦикла;
		ЭлементыФормы.НепечатныеСимволы.УстановитьТекст(ТекстНепечатные);
		Если НачальнаяСтрока <> 0 Тогда
			ПолеТекста.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		КонецЕсли;
	Иначе
		//ВыделитьВсе = ТипЗнч(ПолеТекста.ЭлементФормы) = Тип("ПолеВвода");
		НачальныйТекст = Неопределено;
		Если ЛиНачальныйТекст = Истина Тогда
			НачальныйТекст = Текст;
		КонецЕсли;
		Если Не ПолеТекста.УстановитьТекст(Текст, Активировать, НачальныйТекст) Тогда 
			Возврат Ложь;
		КонецЕсли; 
		Если ПолеТекстаПрограммы.Свойство(ПолеТекста.ЭлементФормы.Имя) Тогда
			ПолеТекстаПрограммы[ПолеТекста.ЭлементФормы.Имя].УстановитьТекст(Текст, Истина, Текст);
		КонецЕсли;
		Если Не ВыделитьВсе Тогда
			Если Истина
				И Текст <> ""
				И ПараметрГраницыВыделения <> Неопределено 
				И НачальнаяСтрока = 0 
			Тогда
				НачальнаяСтрока = ПараметрГраницыВыделения.НачальнаяСтрока;
				НачальнаяКолонка = ПараметрГраницыВыделения.НачальнаяКолонка;
				КонечнаяСтрока = ПараметрГраницыВыделения.КонечнаяСтрока;
				КонечнаяКолонка = ПараметрГраницыВыделения.КонечнаяКолонка;
			КонецЕсли;
			Если НачальнаяСтрока <> 0 Тогда
				ПолеТекста.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	Если ПараметрСтрокаПоиска <> "" Тогда 
		ирКлиент.НайтиПоказатьФрагментВПолеТекстаЛкс(ЭтаФорма, ПолеТекста, ПараметрСтрокаПоиска, Ложь);
	ИначеЕсли ВыделитьВсе И СтрДлина(Текст) > 0 Тогда
		ПолеТекста.УстановитьГраницыВыделения(1, СтрДлина(Текст) + 1);
	КонецЕсли; 
	Возврат Истина;

КонецФункции

Процедура ПанельОсновнаяПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено, ЛиНачальныйТекст = Ложь)
	
	СтароеПолеТекста = ПолеТекста(Истина);
	#Если Сервер И Не Сервер Тогда
		СтароеПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	П1=0; П2=0; П3=0; П4=0;
	Если СтрДлина(СтароеПолеТекста.ВыделенныйТекст()) <> СтрДлина(Текст) Тогда
		СтароеПолеТекста.ПолучитьГраницыВыделения(П1, П2, П3, П4);
	КонецЕсли; 
	Текст = ПолучитьТекст();
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Дерево Тогда
		Дерево.Строки.Очистить();
		Если ирОбщий.ЛиТекстJSONЛкс(Текст) Тогда
			ОбъектJSON = ирОбщий.ОбъектИзТекстаЖСОНЛкс(Текст, Истина);
			ирОбщий.ДеревоЗначенийИзМассиваСтруктурЛкс(ОбъектJSON, Дерево);
		ИначеЕсли ирОбщий.ЛиТекстXMLЛкс(Текст) Тогда
			Если ирОбщий.ЛиТекстHTMLЛкс(Текст) Тогда
				Текст = ирОбщий.ТекстHTMLВТекстXMLЛкс(Текст);
			КонецЕсли;
			//ЭлементыФормы.ЗначениеДеревом.Колонки.Очистить();
			XMLДокумент = Новый ЧтениеXML;
			XMLДокумент.УстановитьСтроку(Текст);
			ЗагрузитьДеревоXML(XMLДокумент, Дерево.Строки);
			Если Дерево.Строки.Количество() > 0 Тогда
				ЭлементыФормы.Дерево.Развернуть(Дерево.Строки[0]);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.РезультатыПоиска Тогда
		Если мПолеТекстаПоиска.Готово Тогда
			ОбновитьПоиск(Истина, Истина);
		КонецЕсли;
		//СтароеПолеТекста.УстановитьГраницыВыделения(П1, П2, П3, П4);
		Возврат;
	ИначеЕсли Истина
		И ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.HTMLГотовый 
		И ВариантПросмотра = "Markdown"
	Тогда
		Если мПолеТекстаХТМЛ.Готово Тогда
			ОбновитьХМТЛИзMarkdown(Текст);
		КонецЕсли;
		Возврат;
	ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.JSON Тогда
		Если Не ирОбщий.СтрНачинаетсяСЛкс(ЭлементыФормы.JSON.Документ.URL, "file") Тогда // Иначе при повторном открытии будет 2 подряд события ДокументСформирован
			ЭлементыФормы.JSON.Документ.ЭтоРедактор = Истина;
			ЭлементыФормы.JSON.Перейти(БазовыйФайлРедактораJSON());
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.XML Тогда
		Если Не ирОбщий.СтрНачинаетсяСЛкс(ЭлементыФормы.XML.Документ.URL, "file") Тогда // Иначе при повторном открытии будет 2 подряд события ДокументСформирован
			ЭлементыФормы.XML.Документ.ЭтоРедактор = Истина;
			ЭлементыФормы.XML.Перейти(мПлатформа.БазовыйФайлРедактораКода());
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ЯзыкЗапросов Тогда
		Если ЭлементыФормы.ПанельЯзыкЗапросов.ТекущаяСтраница = ЭлементыФормы.ПанельЯзыкЗапросов.Страницы.РедакторHTML Тогда
			Если Не ирОбщий.СтрНачинаетсяСЛкс(ЭлементыФормы.ЯзыкЗапросовHTML.Документ.URL, "file") Тогда // Иначе при повторном открытии будет 2 подряд события ДокументСформирован
				ЭлементыФормы.ЯзыкЗапросовHTML.Документ.ЭтоРедактор = Истина;
				ЭлементыФормы.ЯзыкЗапросовHTML.Перейти(мПлатформа.БазовыйФайлРедактораКода());
			КонецЕсли;
			Поле2 = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.ЯзыкЗапросовHTML);
			Если Поле2.РедакторHTML() = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПолеТекстаПрограммы.ЯзыкЗапросов.ПолеТекста = Поле2;
		КонецЕсли;
		Подпанель = ЭлементыФормы.ПанельЯзыкЗапросов;
	КонецЕсли;
	Если УстановитьТекст(Текст, Истина, П1, П2, П3, П4, ЛиНачальныйТекст) Тогда 
		Если Ложь
			Или РедактированиеHTML
			Или ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> ЭлементыФормы.ПанельОсновная.Страницы.HTMLГотовый 
		Тогда
			мТекущаяСтраницаТекста = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница;
			Если Подпанель <> Неопределено Тогда
				мТекущиеПодстраницы[Подпанель.Имя] = Подпанель.ТекущаяСтраница;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//.
// Параметры:
//   СпецСимвол - Строка - 
// Возвращаемое значение:
//   Строка - 
Функция ЗаменаСпецСимвола(Знач СпецСимвол) Экспорт
	Маркеры = мПлатформа.ВыделениеРезультатовПоиска;
	Если Не ЗначениеЗаполнено(Маркеры) Тогда
		Маркеры = "\^";
	КонецЕсли;
	Если СпецСимвол = Символы.Таб Тогда
		ЗаменаСимвола = "Таб";
	ИначеЕсли СпецСимвол = Символы.НПП Тогда
		ЗаменаСимвола = "НПП";
	ИначеЕсли СпецСимвол = Символы.ПС Тогда
		ЗаменаСимвола = "ПС";
	ИначеЕсли СпецСимвол = Символы.ВК Тогда
		ЗаменаСимвола = "ВК";
	Иначе
		ЗаменаСимвола = "d" + XMLСтрока(КодСимвола(СпецСимвол));
	КонецЕсли;
	ЗаменаСимвола = Лев(Маркеры, 1) + ЗаменаСимвола + Прав(Маркеры, 1);
	Если Ложь
		Или СпецСимвол = Символы.ПС
		Или СпецСимвол = Символы.ВК
	Тогда
		ЗаменаСимвола = ЗаменаСимвола + СпецСимвол;
	КонецЕсли;
	Возврат ЗаменаСимвола;
КонецФункции

// @@@.КЛАСС.ПолеТекстаПрограммы
Функция КлсПолеТекстаПрограммыОбновитьКонтекст(Знач Компонента = Неопределено, Знач Кнопка = Неопределено) Экспорт 
КонецФункции

// @@@.КЛАСС.ПолеТекстаПрограммы
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
// Является обязательным.
//
// Параметры:
//  Кнопка       - КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстаПрограммыНажатие(Кнопка)
	
	// Имя страницы совпадает с именем поля текстового документа
	Компонента = 0;
	Если ПолеТекстаПрограммы.Свойство(ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя, Компонента) Тогда 
		#Если Сервер И Не Сервер Тогда
		    Компонента = Обработки.ирКлсПолеТекстаПрограммы.Создать();
		#КонецЕсли
		Компонента.Нажатие(Кнопка);
	КонецЕсли; 
	
КонецПроцедуры

// @@@.КЛАСС.ПолеТекстаПрограммы
Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	// Имя страницы совпадает с именем поля текстового документа
	Компонента = 0;
	Если ПолеТекстаПрограммы.Свойство(ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя, Компонента) Тогда 
		#Если Сервер И Не Сервер Тогда
		    Компонента = Обработки.ирКлсПолеТекстаПрограммы.Создать();
		#КонецЕсли
		Компонента.ВнешнееСобытиеОбъекта(Источник, Событие, Данные);
	Иначе
		ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСравнитьТекст(Кнопка)
	
	ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница;
	ВариантСинтаксиса = Неопределено;
	Если Ложь
		Или ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ВстроенныйЯзык
		Или ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ЯзыкЗапросов
		Или ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.XML
	Тогда
		ВариантСинтаксиса = ТекущаяСтраница.Имя;
	КонецЕсли; 
	ирКлиент.ЗапомнитьСодержимоеЭлементаФормыДляСравненияЛкс(ЭтаФорма, ЭлементыФормы[ТекущаяСтраница.Имя], ВариантСинтаксиса);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	ПолноеИмяФайла = ирКлиент.ВыбратьФайлЛкс(,,, ПолучитьТекст());
	Если ПолноеИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Обычный;
	УстановитьТекст(ПолноеИмяФайла);
	
КонецПроцедуры

Функция СохранитьВФайл(РазрешитьВТекущийФайл = Истина)
	
	Результат = Ложь;
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Если РазрешитьВТекущийФайл Тогда
		ВыборФайла.ПолноеИмяФайла = мИмяОткрытогоФайла;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВыборФайла.ПолноеИмяФайла) Тогда
		ВыборФайла.Выбрать();
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборФайла.ПолноеИмяФайла) Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ПолучитьТекст());
		ТекстовыйДокумент.Записать(ВыборФайла.ПолноеИмяФайла);
		Результат = Истина;
		мИмяОткрытогоФайла = ВыборФайла.ПолноеИмяФайла;
		ОбновитьЗаголовокОтФайла();
	КонецЕсли;
	Возврат Результат;

КонецФункции

Процедура ОбновитьЗаголовокОтФайла()
	ирКлиент.ФормаОбъекта_ОбновитьЗаголовокЛкс(ЭтаФорма, мИмяОткрытогоФайла);
КонецПроцедуры

Функция ОсновныеДействияФормыСохранитьВТекущийФайл(Кнопка)
	СохранитьВФайл();
КонецФункции

Процедура ОсновныеДействияФормыСохранитьКак(Кнопка)
	СохранитьВФайл(Ложь);
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузитьИзФайла(Кнопка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Не ВыборФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	УстановитьТекст(ирОбщий.ПрочитатьТекстИзФайлаЛкс(ВыборФайла.ПолноеИмяФайла));
	мИмяОткрытогоФайла = ВыборФайла.ПолноеИмяФайла;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура ПоказыватьРазмерПриИзменении(Элемент)
	
	ОбновитьРазмер();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ОбновитьРазмер();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьЧерезXML(Кнопка)
	
	ОткрытьЧерезФайл("XML");
	
КонецПроцедуры

Процедура ОткрытьЧерезФайл(РасширениеФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Текст = ПолучитьТекст();
	ТектовыйДокумент = Новый ТекстовыйДокумент;
	ТектовыйДокумент.УстановитьТекст(Текст);
	ТектовыйДокумент.Записать(ИмяВременногоФайла);
	ЗапуститьПриложение(ИмяВременногоФайла);

КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьЧерезJSON(Кнопка)
	
	ОткрытьЧерезФайл("JSON");
	
КонецПроцедуры

Процедура ЗагрузитьДеревоXML(ЧтениеXML, СтрокаДерева) 
	
	#Если Сервер И Не Сервер Тогда
		ЧтениеXML = Новый ЧтениеXML;
	#КонецЕсли
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.ИнструкцияОбработки Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = ЧтениеXML.ТипУзла;
			НоваяСрокаДерева.Свойство = ЧтениеXML.Имя;
			НоваяСрокаДерева.Значение = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			НоваяСрокаДерева = СтрокаДерева.Добавить();
			НоваяСрокаДерева.ТипУзла = ЧтениеXML.ТипУзла;
			НоваяСрокаДерева.Свойство = ЧтениеXML.Имя;
			НоваяСрокаДерева.Значение = ЧтениеXML.Значение;
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				НоваяСрокаДерева.Атрибуты.Добавить(ЧтениеXML.Значение, ЧтениеXML.Имя);
			КонецЦикла;
			ЗагрузитьДеревоXML(ЧтениеXML, НоваяСрокаДерева.Строки);
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат; Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Ничего Тогда
			Возврат; Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если СтрокаДерева.Количество() = 0 И СтрокаДерева.Родитель <> Неопределено Тогда
				СтрокаДерева.Родитель.Значение = ЧтениеXML.Значение;
			Иначе
				НоваяСрокаДерева = СтрокаДерева.Добавить();
				НоваяСрокаДерева.ТипУзла = ЧтениеXML.ТипУзла;
				НоваяСрокаДерева.Свойство = ЧтениеXML.Имя;
				НоваяСрокаДерева.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьЧерезTXT(Кнопка)
	
	ОткрытьЧерезФайл("TXT");

КонецПроцедуры

Процедура ОсновныеДействияФормыРедактироватьКопию(Кнопка)
	
	Текст = ПолучитьТекст();
	ирКлиент.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма); // Там текст очистится
	ирКлиент.ОткрытьЗначениеЛкс(Текст,,, ирКлиент.ЗаголовокДляКопииОбъектаЛкс(ЭтаФорма), Ложь);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	//ЭлементыФормы.JSON.УстановитьТекст(""); // Так отключаем платформенный вызов перезагрузки этого редактора при открытии закэшированной формы
	//ЭлементыФормы.XML.УстановитьТекст(""); // Так отключаем платформенный вызов перезагрузки этого редактора при открытии закэшированной формы
	//УстановитьТекст(""); // Освобождаем память для случая, когда форма в кэше. TODO очистить все страницы // На 8.3.13 вызывает ошибку, т.к. чтение свойства "Документ" запрещается
	мРедакторJSON = Неопределено;
	
	// +++.КЛАСС.ПолеТекстаПрограммы
	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	Для Каждого КлючИЗначение Из ПолеТекстаПрограммы Цикл
		ОбъектКомпоненты = КлючИЗначение.Значение;
		#Если Сервер И Не Сервер Тогда
			ОбъектКомпоненты = Обработки.ирКлсПолеТекстаПрограммы.Создать();
		#КонецЕсли
		Если Не ОбъектКомпоненты.мЭтоФрагментМетода Тогда
			ОбъектКомпоненты.Уничтожить();
		КонецЕсли;
	КонецЦикла;
	// ---.КЛАСС.ПолеТекстаПрограммы

КонецПроцедуры

Процедура ОсновныеДействияФормыФорматироватьJSON(Кнопка)
	
	УстановитьТекст(ирОбщий.ФорматироватьТекстJsonЛкс(ПолучитьТекст()));

КонецПроцедуры

Процедура ОсновныеДействияФормыФорматироватьXML(Кнопка)
	
	НовыйТекст = ПолучитьТекст();
	Если ирОбщий.ЛиТекстHTMLЛкс(НовыйТекст) Тогда
		НовыйТекст = ирОбщий.ТекстHTMLВТекстXMLЛкс(НовыйТекст);
	КонецЕсли;
	Попытка
		НовыйТекст = ирОбщий.ФорматироватьТекстXMLЛкс(НовыйТекст);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Координаты = ирОбщий.ТекстМеждуМаркерамиЛкс(СтрПолучитьСтроку(ОписаниеОшибки, 1), " - [", "]", Ложь);
		ФрагментыКоординат = ирОбщий.СтрРазделитьЛкс("" + Координаты, ",", Истина);
		Если ФрагментыКоординат.Количество() = 2 Тогда
			РедакторXML = РедакторXML();
			Если РедакторXML <> Неопределено Тогда
				ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.XML;
			КонецЕсли; 
			ПолеТекстаHTML = ПолеТекста();
			#Если Сервер И Не Сервер Тогда
				ПолеТекстаHTML = Обработки.ирОболочкаПолеТекста.Создать();
			#КонецЕсли
			ПолеТекстаHTML.ПоказатьОшибку(Число(ФрагментыКоординат[0]), Число(ФрагментыКоординат[1]), ЭтаФорма);
		КонецЕсли;
		ирОбщий.СообщитьЛкс(ОписаниеОшибки);
		Возврат;
	КонецПопытки; 
	УстановитьТекст(НовыйТекст);
	
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура JSONДокументСформирован(Элемент)
	
	// Может быть двойная инициализация при открытии закэшированной формы закрытой на странице XML и потому сейчас может быть мРедакторJSON <> Неопределено
	Страница = ЭлементыФормы.ПанельОсновная.Страницы.JSON;
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> Страница Тогда
		Возврат;
	КонецЕсли;
	мРедакторJSON = Элемент.Документ.defaultView.Init();
	ирКлиент.РедакторJSON_ИнициироватьЛкс(мРедакторJSON);
	мРедакторJSON.aceEditor.setReadOnly(ТолькоПросмотр);
	ПанельОсновнаяПриСменеСтраницы(,, Истина);

КонецПроцедуры

Процедура JSONonclick(Элемент, pEvtObj)
	
	Если Элемент.ИзменяетДанные И pEvtObj.srcElement.id = "onChange" Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоJSONПриИзменении(Элемент = Неопределено)
	
	Если мРедакторJSON = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ПереключитьРежимДереваРедактораJSONЛкс(мРедакторJSON, РежимДереваJSON);
	
КонецПроцедуры

Процедура ОткрытьРазбивкуСтроки(ТипПриемника)
	
	ФормаРазбивки = ПолучитьФорму("РазбивкаТекста",, ТипПриемника);
	ФормаРазбивки.Приемник = Новый (ТипПриемника);
	ФормаРазбивки.Текст = ПолучитьТекст();
	ФормаРазбивки.ОткрытьПриемникПриЗакрытии = Истина;
	ФормаРазбивки.Открыть();

КонецПроцедуры

Процедура ОсновныеДействияФормыРазбитьВТаблицу(Кнопка)
	ОткрытьРазбивкуСтроки(Тип("ТаблицаЗначений"));
КонецПроцедуры

Процедура ОсновныеДействияФормыРазбитьВМассив(Кнопка)
	ОткрытьРазбивкуСтроки(Тип("Массив"));
КонецПроцедуры

Функция РедакторXML()
	Если Не ирКэш.ДоступноРедакторМонакоЛкс() Тогда 
		Возврат Неопределено;
	КонецЕсли; 
	ПолеТекста = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.XML);
	#Если Сервер И Не Сервер Тогда
		ПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	Результат = ПолеТекста.РедакторHTML();
	Возврат Результат;
КонецФункции

Процедура XMLДокументСформирован(Элемент)
	
	Страница = ЭлементыФормы.ПанельОсновная.Страницы.XML;
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> Страница Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаHTML = ирКлиент.ОболочкаПоляТекстаЛкс(Элемент);
	#Если Сервер И Не Сервер Тогда
		ПолеТекстаHTML = Обработки.ирОболочкаПолеТекста.Создать();
	#КонецЕсли
	ПолеТекстаHTML.Инициировать(ЭтаФорма);
	РедакторHTML = ПолеТекстаHTML.РедакторHTML();
	РедакторHTML.init("1"); // Версия1С
	РедакторHTML.minimap(Ложь);
	РедакторHTML.setLanguageMode("xml");
	//РедакторHTML.enableModificationEvent(Истина);
	РедакторHTML.setOption("generateModificationEvent", Истина);
	ПанельОсновнаяПриСменеСтраницы(,, Истина);
	
КонецПроцедуры

Функция ВводДоступенЛкс() Экспорт 
	Если ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.XML Тогда
		РедакторHTML = ЭлементыФормы.XML.Документ.defaultView;
		Результат = РедакторHTML.hasTextFocus();
	Иначе
		Результат = ВводДоступен();
	КонецЕсли; 
	Возврат Результат;
КонецФункции

Процедура XMLonclick(Элемент, ДанныеСобытия)
	
	XMLonclickДинамический(ДанныеСобытия); 
	
КонецПроцедуры 

Процедура XMLonclickДинамический(ДанныеСобытия) Экспорт
	
	Событие = ДанныеСобытия.eventData1C;
	Если Событие <> Неопределено Тогда
		ПолеТекстаHTML = ирКлиент.ОболочкаПоляТекстаЛкс(ЭлементыФормы.XML);
		#Если Сервер И Не Сервер Тогда
			ПолеТекстаHTML = Обработки.ирОболочкаПолеТекста.Создать();
		#КонецЕсли
		Если Событие.event = "EVENT_CONTENT_CHANGED" Тогда
			ЭтаФорма.Модифицированность = Истина;
		ИначеЕсли Событие.event = "EVENT_ON_LINK_CLICK" Тогда
			ПолеТекстаHTML.ОбработатьКликНаГиперссылке(Событие);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзXMLвXDTO(Кнопка)
	
	Попытка
		Объект = ирОбщий.ОбъектXDTOИзСтрокиXMLЛкс(Текст);
	Исключение
		ирОбщий.СообщитьЛкс(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.ИсследоватьЛкс(Объект);
	
КонецПроцедуры

Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры

Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПараметрРежимВыбораМассива Тогда
		Результат = ТаблицаИзДерева();
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ирКлиент.ПрименитьИзмененияИЗакрытьФормуЛкс(ЭтаФорма, Результат);
	Иначе
		КПДеревоВыгрузитьВТаблицу();
	КонецЕсли;
КонецПроцедуры

Процедура КПДеревоВыгрузитьВТаблицу(Кнопка = Неопределено)
	
	СтрокиДерева = Неопределено;
    Результат = ТаблицаИзДерева(СтрокиДерева);
	Если Результат.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	ИмяТаблицы = ТекущаяСтрока.Свойство;
	ИндексТекущейСтроки = СтрокиДерева.Найти(ТекущаяСтрока);
	ТекущаяСтрока = Неопределено;
	Если ИндексТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = Результат[ИндексТекущейСтроки];
	КонецЕсли;
	ирКлиент.ОткрытьТаблицуЗначенийЛкс(Результат, ТекущаяСтрока, Ложь, ИмяТаблицы,, Ложь);
КонецПроцедуры

Функция ТаблицаИзДерева(выхСтрокиДерева = Неопределено)
	
	ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	Если ирОбщий.СтрНачинаетсяСЛкс(ТекущаяСтрока.Значение, "[Массив-") Тогда
		выхСтрокиДерева = ТекущаяСтрока.Строки;
		ОтборСтрок = Неопределено;
	Иначе
		выхСтрокиДерева = ирОбщий.РодительСтрокиДереваЛкс(ТекущаяСтрока).Строки; 
		ОтборСтрок = Новый Структура("Свойство", ТекущаяСтрока.Свойство);
	КонецЕсли;
	выхСтрокиДерева = ирОбщий.ОтобратьКоллекциюЛкс(выхСтрокиДерева, ОтборСтрок);
	Результат = ирОбщий.ТаблицаИзДереваСвойствоЗначениеАтрибутыЛкс(выхСтрокиДерева);
	Возврат Результат;

КонецФункции

Процедура КрупныйШрифтПриИзменении(Элемент = Неопределено)
	ЭлементыФормы.Компактный.Шрифт = Новый Шрифт(, ?(КрупныйШрифт, 10, 9));
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Компактный; // Чтобы выделение стало видно
КонецПроцедуры

Процедура ПоискДокументСформирован(Элемент)
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.РезультатыПоиска Тогда
		мПолеТекстаПоиска.Готово = Истина;
		ПанельОсновнаяПриСменеСтраницы(,, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ирОбщий.ПолеВводаСИсториейВыбора_ОбновитьСписокЛкс(Элемент, ЭтаФорма,,, ЭлементыФормы.СтрокаПоиска);
КонецПроцедуры

Процедура СтрокаПоискаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, Элемент, Текст) Тогда 
		ОбновитьПоиск();
	КонецЕсли;
КонецПроцедуры

Процедура СтрокаПоискаПриИзменении(Элемент)
	ирКлиент.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма,,,,,, ЭлементыФормы.СтрокаПоиска);
	ОбновитьПоиск();
КонецПроцедуры

Процедура ОбновитьПоиск(Знач ИспользоватьВнешнийТекст = Ложь, Знач СохранитьПозицию = Ложь)
	ОболочкаТекста = ОболочкаТекстаПоиска();
	ЛиСыройТекст = ОболочкаТекста = мПолеТекстаХТМЛ;
	Если ИспользоватьВнешнийТекст Тогда
		Текст = СтрЗаменить(ПолучитьТекст(), Символы.ВК, ""); // При установке innerHTML они все равно удалятся, а при расчете позиций вхождений учитываются 
	Иначе
		Текст = ОболочкаТекста.ПолучитьТекст(ЛиСыройТекст, Истина);
	КонецЕсли;
	Если СохранитьПозицию Тогда
		ВыделениеВТексте = ОболочкаТекста.ПолучитьВыделениеВДокументеHTML();
	КонецЕсли;
	ВыражениеПоискаСлов = ирОбщий.РегВыражениеСтрокиПоискаЛкс(СтрокаПоиска);
	РезультатыПоиска = ОболочкаТекста.НайтиРегВыражение(Текст, ВыражениеПоискаСлов);
	ЗаголовокЧислаРезультатов = НСтр("ru='Найдено'") + ": " + РезультатыПоиска.Количество();
	Если ОболочкаТекста = мПолеТекстаПоиска Тогда
		ЭлементыФормы.НадписьНайдено.Заголовок = ЗаголовокЧислаРезультатов;
		РезультатыПоиска.Колонки.Добавить("ЛиГиперссылка", Новый ОписаниеТипов("Булево"));
		ВхожденияГиперссылок = ОболочкаТекста.НайтиРегВыражение(Текст, шГиперСсылка);
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ВхожденияГиперссылок, РезультатыПоиска, Новый Структура("ЛиГиперссылка", Истина));
	Иначе
		ЭлементыФормы.НадписьНайденоХТМЛ.Заголовок = ЗаголовокЧислаРезультатов;
	КонецЕсли;
	ирОбщий.ЗаполнитьКолонкуПорядкаТаблицыЛкс(РезультатыПоиска, "Номер");
	РезультатыПоиска.ЗагрузитьКолонку(РезультатыПоиска.ВыгрузитьКолонку("ДлинаГруппы"), "Длина");
	ОболочкаТекста.РазметитьТекстРезультатамиПоискаИУстановитьВПоле(Текст, РезультатыПоиска,, ПереносСлов,, ЛиСыройТекст);
	Если РезультатыПоиска.Колонки.Найти("ЛиГиперссылка") <> Неопределено Тогда
		Для Каждого ВхождениеГиперссылки Из РезультатыПоиска.НайтиСтроки(Новый Структура("ЛиГиперссылка", Истина)) Цикл
			РезультатыПоиска.Удалить(ВхождениеГиперссылки);
		КонецЦикла;
	КонецЕсли;
	Если СохранитьПозицию Тогда
		ВыделениеВТексте.Начало = Макс(0, ВыделениеВТексте.Начало - 1);
		ВыделениеВТексте.Конец = ВыделениеВТексте.Начало;
		ОболочкаТекста.УстановитьВыделениеВДокументеHTML(ВыделениеВТексте);
	КонецЕсли;
	СледующееВхождениеНажатие();
КонецПроцедуры

Функция ОболочкаТекстаПоиска() Экспорт
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.РезультатыПоиска Тогда
		ОболочкаТекста = мПолеТекстаПоиска;
	Иначе
		ОболочкаТекста = мПолеТекстаХТМЛ;
	КонецЕсли;
	Возврат ОболочкаТекста;
КонецФункции

Процедура ИгнорироватьРегистрПриИзменении(Элемент)
	ОбновитьПоиск();
КонецПроцедуры

Процедура ПереносСловПриИзменении(Элемент)
	ОбновитьПоиск(, Истина);
КонецПроцедуры

Процедура ПредыдущееВхождениеНажатие(Элемент = Неопределено)
	ОболочкаТекстаПоиска().ПредыдущееВхождениеНажатие();
КонецПроцедуры

Процедура СледующееВхождениеНажатие(Элемент = Неопределено)
	ОболочкаТекстаПоиска().СледующееВхождениеНажатие();
КонецПроцедуры

Процедура КПРезультатыПоискаПоискРегулярногоВыражения(Кнопка)
	Конструктор = ирКлиент.ПолучитьФормуЛкс("Обработка.ирКонструкторРегулярногоВыражения.Форма");
	Конструктор.ПараметрПроверочныйТекст = ПолучитьТекст();
	Конструктор.ПараметрВыражение = ирОбщий.РегВыражениеСтрокиПоискаЛкс(СтрокаПоиска);
	Конструктор.ОткрытьМодально();
КонецПроцедуры

Процедура РезультатыПоискаonclick(Элемент, pEvtObj)
	
	Если ирКлиент.ОткрытьГиперссылкуИзПоляHTMLЛкс(pEvtObj.srcElement, pEvtObj.ctrlKey) Тогда 
		pEvtObj.returnValue = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КМ_РезультатыПоискаОткрытьГиперссылку(Кнопка) 
	ВыделениеПоля = ЭтаФорма.ЭлементыФормы.РезультатыПоиска.Документ.getSelection();
	ирКлиент.ОткрытьГиперссылкуИзПоляHTMLЛкс(ВыделениеПоля.focusNode);
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура РедактированиеHTMLПриИзменении(Элемент)
	
	ЭлементыФормы.HTMLГотовый.Документ.isEditable = РедактированиеHTML; // Не работает
	Если РедактированиеHTML Тогда
		мТекущаяСтраницаТекста = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьВПроводнике(Кнопка)
	
	ирКлиент.ОткрытьФайлВПроводникеЛкс(ПолучитьТекст());
	
КонецПроцедуры

Процедура ЯзыкЗапросовHTMLДокументСформирован(Элемент)
	Страница = ЭлементыФормы.ПанельОсновная.Страницы.ЯзыкЗапросов;
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> Страница Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаЗапроса = ПолеТекстаПрограммы.ЯзыкЗапросов;
	ПолеТекстаЗапроса.РедакторHTML_Инициировать(Элемент);
	ПолеТекстаЗапроса.ПолеТекста = ирКлиент.ОболочкаПоляТекстаЛкс(Элемент);
	ПанельОсновнаяПриСменеСтраницы(,, Истина);
КонецПроцедуры

Процедура ЯзыкЗапросовHTMLonclick(Элемент, ДанныеСобытия)
	ЯзыкЗапросовHTMLonclickДинамический(ДанныеСобытия);
КонецПроцедуры 

Процедура ЯзыкЗапросовHTMLonclickДинамический(ДанныеСобытия) Экспорт
	ПолеТекстаЗапроса = ПолеТекстаПрограммы.ЯзыкЗапросов;
	Событие = ДанныеСобытия.eventData1C;
	Если Событие <> Неопределено Тогда
		Если Событие.event = "EVENT_CONTENT_CHANGED" Тогда
			ЭтаФорма.Модифицированность = Истина;
		ИначеЕсли Событие.event = "EVENT_ON_LINK_CLICK" Тогда
			ПолеТекстаЗапроса.РедакторHTML_ОбработатьКликНаГиперссылке(Событие);
		ИначеЕсли Событие.event = "EVENT_BEFORE_HOVER" Тогда
			ПолеТекстаЗапроса.РедакторHTML_ПередПоказомПодсказкиУдержания(Событие);
		Иначе
			ПолеТекстаЗапроса.РедакторHTML_ОбработатьСобытие(Событие);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Процедура ПанельЯзыкЗапросовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница = Элемент.Страницы.РедакторHTML Тогда
		Поле = ЭлементыФормы.ЯзыкЗапросовHTML;
	Иначе
		Поле = ЭлементыФормы.ЯзыкЗапросов;
	КонецЕсли;
	ПолеТекстаПрограммы.ЯзыкЗапросов.ПолеТекста = ирКлиент.ОболочкаПоляТекстаЛкс(Поле);
	ПолеТекстаПрограммы.ЯзыкЗапросов.КончитьОбработкуКоманды();  
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ЯзыкЗапросов Тогда
		ПанельОсновнаяПриСменеСтраницы();
	КонецЕсли;

КонецПроцедуры

Процедура КомандаЗаменитьНепечатныеНажатие(Элемент)
	Текст = ирОбщий.ЗаменитьОпасныеНепечатныеСимволыЛкс(Текст);
	УстановитьТекст(Текст);
КонецПроцедуры

Процедура HTMLГотовыйДокументСформирован(Элемент)
	Если Истина
		И ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.HTMLГотовый
		И ВариантПросмотра = "Markdown" 
	Тогда
		мПолеТекстаХТМЛ.Готово = Истина;
		ПанельОсновнаяПриСменеСтраницы(,, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьХМТЛИзMarkdown(Знач Текст) Экспорт
	ЭлементыФормы.HTMLГотовый.Документ.defaultView.setText(Текст); // Долго на большом тексте
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбновитьПоиск(, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыИзJSONВСтруктуру(Кнопка)
	СтрокаJSON = ПолучитьТекст();
	Попытка
		Объект = ирОбщий.ОбъектИзТекстаЖСОНЛкс(СтрокаJSON);
	Исключение
		Попытка
			Объект = ирОбщий.ОбъектИзТекстаЖСОНЛкс(СтрокаJSON, Истина);
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецПопытки;
	ирОбщий.ИсследоватьЛкс(Объект);
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирПлатформа.Форма.Текст");
#Если Сервер И Не Сервер Тогда
	ПолеТекстаПрограммы.Вставить("ЯзыкЗапросов", Обработки.ирКлсПолеТекстаПрограммы.Создать());
	ПолеТекстаПрограммы.Вставить("ВстроенныйЯзык", Обработки.ирКлсПолеТекстаПрограммы.Создать());
	мПолеТекстаПоиска = Обработки.ирОболочкаПолеТекста.Создать();
	мПолеТекстаХТМЛ = Обработки.ирОболочкаПолеТекста.Создать();
#КонецЕсли
ПереносСлов = Истина;
ИгнорироватьРегистр = Истина;
мТекущиеПодстраницы = новый Соответствие;
