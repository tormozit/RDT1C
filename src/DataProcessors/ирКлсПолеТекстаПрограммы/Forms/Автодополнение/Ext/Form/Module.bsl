Перем СтруктураКлюча;
Перем ПодходящиеСлова;
Перем СтрокаСловаРезультата Экспорт;
Перем ВКОбщая Экспорт;
Перем мЧислоВидимыхСтрок;

Процедура ОбновлениеОтображения()
	Если ВКОбщая <> Неопределено Тогда
		ЭтаФорма.Активизировать(); // Нужно для перемещения уже открытого окна
		Если ВводДоступен() Тогда
			Если ВКОбщая <> Null Тогда
				РазрешитьВыходЗаГраницыЭкрана = Не (МодальныйРежим Или ПараметрАктивизировать);
				ПоверхВсехОкон = ирОбщий.ЛиЕстьМодальныеГруппыЛкс() Или ирКэш.ЛиСеансТолстогоКлиентаУПЛкс();
				ВКОбщая.ПереместитьОкноВПозициюКаретки(РазрешитьВыходЗаГраницыЭкрана, ПоверхВсехОкон);
				//Скрипт =
				//"Title := ""Тип:""
				////|SetTitleMatchMode, 1
				////|WinActivate, %Title%
				//|WinGetTitle, Title, A
				//|MsgBox, The active window is ""%Title%"".
				////|WinSet, AlwaysOnTop, Toggle, %Title%
				//|";
				////Скрипт = "WinSet, AlwaysOnTop, Toggle, A";
				//ТД = Новый ТекстовыйДокумент;
				//ТД.УстановитьТекст(Скрипт);
				//мИмяФайлаУправленияОкном = ПолучитьИмяВременногоФайла("ahk");
				//ТД.Записать(мИмяФайлаУправленияОкном, КодировкаТекста.ANSI);
				//ЗапуститьПриложение(мИмяФайлаУправленияОкном,, Истина);
			КонецЕсли;
			ВКОбщая = Неопределено;
			Если Не ПараметрАктивизировать Тогда
				АктивироватьВладельца(ЭтаФорма);
			КонецЕсли;
			УстановитьГраницыВыделенияФильтра();
		КонецЕсли;
	КонецЕсли;
	ЭтаФорма.ПараметрАктивизировать = Ложь;
КонецПроцедуры

// Надо вызывать до начала открытия (до ПередОткрытием), иначе недоступность формы-владельца будет сброшена
Процедура ЗапомнитьПозициюКаретки() Экспорт
	Если Не ирКэш.ЛиПлатформаWindowsЛкс() Тогда
		ВКОбщая = Null;
		Возврат;
	КонецЕсли;
	ВКОбщая = ирОбщий.НоваяВКОбщаяЛкс();
	ОбработкаПрерыванияПользователя();
	Если ВКОбщая <> Неопределено Тогда
		#Если Сервер И Не Сервер Тогда
			ПолеТекста = Обработки.ирОболочкаПолеТекста.Создать();
		#КонецЕсли
		ПолеТекста.ПолучитьПозициюКаретки(ВКОбщая, ФормаВладелец);
	КонецЕсли;
КонецПроцедуры

Процедура ПодходящиеСловаВыбор(Элемент, ВыбраннаяСтрока, Колонка = Неопределено, СтандартнаяОбработка = Истина)
	//ЭтаФорма.СтрокаСловаРезультата = ВыбраннаяСтрока;
	//ЗакрытьИВставитьСлово();
КонецПроцедуры

Процедура ЗакрытьИВставитьСлово(ПараметрЗакрытия = Истина) Экспорт
	Если МодальныйРежим Тогда
		Если Не Открыта() Тогда
			ОповеститьОВыборе(Истина); // Аналог Закрыть(), но Закрыть() нельзя здесь вызывать
		Иначе
			Закрыть(ПараметрЗакрытия);
		КонецЕсли;
	Иначе
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		ВариантАвтоВызова = ВставитьВыбранноеСловоАвтодополнения(СтрокаСловаРезультата,, ПараметрЗакрытия);
		Если ВариантАвтоВызова = 1 Тогда
			ОткрытьАвтодополнение("я"); // Автовызов
			ОбновитьФормуАвтодополнения();
		ИначеЕсли ВариантАвтоВызова = 2 Тогда
			ОткрытьАвтодополнение(ирКэш.КодыКлавишЛкс()["ctrl+space"]); // Так будет обязательное открытие. Вредно внутри ненадежного текстового литерала и комментария
			ОбновитьФормуАвтодополнения();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НайтиПодходящиеСлова(Знач СброситьТекущуюСтроку = Истина)
	ЭлементОтбора = ЭлементыФормы.ТаблицаСлов.ОтборСтрок.ПремияФильтра;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Больше;
	ЭлементОтбора.Значение = 0;
	СтрокаМаксимальногоРейтинга = Неопределено;
	выхЛиНашли = Ложь;
	Если ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьОтборИСортировку.Пометка Тогда
		ВыделениеРезультатовПоиска = мПлатформа.ВыделениеРезультатовПоиска;
		Для Каждого Строка Из ТаблицаСлов Цикл
			Строка.ПремияФильтра = ирОбщий.НайтиФильтрВСловеЛкс(Ложь, ТекущееСлово, Строка.Слово, Строка.НСлово,, ВыделениеРезультатовПоиска);
		КонецЦикла;
		ИмяНомерСтроки = ирОбщий.ПеревестиСтроку("НомерСтроки");
		ЭлементОтбора.Использование = Истина;
		ТаблицаСлов.Сортировать("ПремияФильтра Убыв, Рейтинг Убыв, НСлово, ТипСлова");
		ВременныйПостроительЗапроса = ирКлиент.ПостроительТабличногоПоляСОтборомКлиентаЛкс(ЭлементыФормы.ТаблицаСлов);
		ВременныйПостроительЗапроса.ВыбранныеПоля.Очистить();
		ВременныйПостроительЗапроса.ВыбранныеПоля.Добавить(ИмяНомерСтроки);
		ПодходящиеСлова = ВременныйПостроительЗапроса.Результат.Выгрузить();
		Если СброситьТекущуюСтроку И ПодходящиеСлова.Количество() Тогда
			ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = ТаблицаСлов.Найти(ПодходящиеСлова[0][ИмяНомерСтроки], "НомерСтроки");
		КонецЕсли;
		Если Автозакрытие И ПодходящиеСлова.Количество() = 0 Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ЭлементОтбора.Использование = Ложь;
		ТаблицаСлов.Сортировать("НСлово, ТипСлова");
		Фильтр = НРег(ТекущееСлово);
		ДлинаФильтра = СтрДлина(Фильтр);
		ПодходящиеСлова = ТаблицаСлов;
		Для Каждого СтрокаСлова Из ПодходящиеСлова Цикл
			НСлово = СтрокаСлова.НСлово;
			Если СтрДлина(НСлово) < ДлинаФильтра Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(СтрокаСлова.НСлово, ДлинаФильтра) = Фильтр Тогда
				выхЛиНашли = Истина;
				Если СтрокаМаксимальногоРейтинга = Неопределено Тогда
					СтрокаМаксимальногоРейтинга = СтрокаСлова;
					ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = СтрокаСлова;
					Если Ложь
						//Или ДлинаТекущегоСлова = 0 // Мешает активировать при открытии строку с макс. рейтингом
						Или ДлинаФильтра = СтрДлина(СтрокаСлова.Слово)
					Тогда
						Прервать;
					КонецЕсли;
					ДлинаСловРейтинга = СтрДлина(СтрокаСлова.Слово);
				Иначе
					Если Истина
						//И СтрДлина(СтрокаСлова.Слово) <= ДлинаСловРейтинга  // Мешает активировать при открытии строку с макс. рейтингом
						И СтрокаМаксимальногоРейтинга.Рейтинг < СтрокаСлова.Рейтинг
					Тогда
						СтрокаМаксимальногоРейтинга = СтрокаСлова;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли выхЛиНашли Тогда
				Прервать;
			ИначеЕсли СтрокаСлова.НСлово > Фильтр Тогда
				Если СброситьТекущуюСтроку Тогда
					ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = СтрокаСлова;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не выхЛиНашли Тогда
			ЭлементыФормы.ТаблицаСлов.ВыделенныеСтроки.Очистить();
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.ТаблицаСлов.Видимость = Истина;
КонецПроцедуры

Функция ОбработкаОбщихКлавиш(ПолеВвода, КодСочетанияКлавиш)
	СочетаниеОбработано = Ложь;
	КодыКлавиш = Неопределено;
	Если ТекущийЭлемент <> ЭлементыФормы.ТаблицаСлов Тогда
		Если ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "Down", КодыКлавиш) Тогда
			СочетаниеОбработано = Истина;
			Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено Тогда
				Смещение = + 1;
				ИндексТекущейСтроки = ИндексТекущейСтрокиВПодходящихСловах();
				НовыйИндекс = Мин(ИндексТекущейСтроки + Смещение, ПодходящиеСлова.Количество() - 1);
				ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = ТаблицаСлов[ПодходящиеСлова[НовыйИндекс].НомерСтроки - 1];
			КонецЕсли;
		ИначеЕсли ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "Up", КодыКлавиш) Тогда
			УстановитьГраницыВыделенияФильтра(); // https://www.hostedredmine.com/issues/929384
			СочетаниеОбработано = Истина;
			Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено Тогда
				Смещение = - 1;
				ИндексТекущейСтроки = ИндексТекущейСтрокиВПодходящихСловах();
				НовыйИндекс = Макс(ИндексТекущейСтроки + Смещение, 0);
				ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = ТаблицаСлов[ПодходящиеСлова[НовыйИндекс].НомерСтроки - 1];
			КонецЕсли;
		ИначеЕсли ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "PgDown", КодыКлавиш) Тогда
			СочетаниеОбработано = Истина;
			Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено Тогда
				Смещение = + мЧислоВидимыхСтрок;
				ИндексТекущейСтроки = ИндексТекущейСтрокиВПодходящихСловах();
				НовыйИндекс = Мин(ИндексТекущейСтроки + Смещение, ПодходящиеСлова.Количество() - 1);
				ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = ТаблицаСлов[ПодходящиеСлова[НовыйИндекс].НомерСтроки - 1];
			КонецЕсли;
		ИначеЕсли ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "PgUp", КодыКлавиш) Тогда
			СочетаниеОбработано = Истина;
			Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено Тогда
				Смещение = - мЧислоВидимыхСтрок;
				ИндексТекущейСтроки = ИндексТекущейСтрокиВПодходящихСловах();
				НовыйИндекс = Макс(ИндексТекущейСтроки + Смещение, 0);
				ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = ТаблицаСлов[ПодходящиеСлова[НовыйИндекс].НомерСтроки - 1];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "ENTER, =", КодыКлавиш) Тогда
		СочетаниеОбработано = Истина;
		Если Истина
			И ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено
			И ЭлементыФормы.ТаблицаСлов.ВыделенныеСтроки.Содержит(ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока)
		Тогда
			ЭтаФорма.СтрокаСловаРезультата = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока;
		Иначе
			ЭтаФорма.СтрокаСловаРезультата = НоваяСтруктураРезультата();
			ЭтаФорма.СтрокаСловаРезультата.Слово = ТекущееСлово;
			Если Не ЗначениеЗаполнено(ТекущееСлово) Тогда
				Закрыть();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Если ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, "ENTER", КодыКлавиш) Тогда
			ЗакрытьИВставитьСлово();
		Иначе
			ЗакрытьИВставитьСлово(" = ");
		КонецЕсли;
	ИначеЕсли ирОбщий.ПроверитьНажатиеКлавишЛкс(КодСочетанияКлавиш, ".", КодыКлавиш) Тогда 
		СочетаниеОбработано = Истина;
		ОткрытьДочерние();
	КонецЕсли;
	Если ЭтаФорма.Открыта() Тогда
		ЭтаФорма.ТекущийЭлемент = ПолеВвода;
	КонецЕсли;
	Возврат СочетаниеОбработано;
КонецФункции

Функция ИндексТекущейСтрокиВПодходящихСловах() Экспорт
	ЗаполнитьЗначенияСвойств(СтруктураКлюча, ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока);
	Если ТипЗнч(ПодходящиеСлова) = Тип("ТаблицаЗначений") Тогда
		СтрокаПодходящегоСлова = ПодходящиеСлова.НайтиСтроки(СтруктураКлюча)[0];
	Иначе
		СтрокаПодходящегоСлова = ПодходящиеСлова[СтруктураКлюча.НомерСтроки - 1];
	КонецЕсли;
	Возврат ПодходящиеСлова.Индекс(СтрокаПодходящегоСлова);
КонецФункции

Функция НоваяСтруктураРезультата() Экспорт
	Возврат Новый Структура("Слово, ТипСлова, Определение, ТипЗначения");
КонецФункции

Процедура ОткрытьДочерние()
	Если Истина
		И ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока <> Неопределено
		И ЭлементыФормы.ТаблицаСлов.ВыделенныеСтроки.Содержит(ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока)
	Тогда
		ЭтаФорма.СтрокаСловаРезультата = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока;
		Закрыть(".");
	КонецЕсли;
КонецПроцедуры

Функция ЭлементУправленияTextBoxKeyDown(Элемент, КодСочетанияКлавиш)
	Результат = ОбработкаОбщихКлавиш(Элемент, КодСочетанияКлавиш);
	Возврат Результат;
КонецФункции

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ОтборПоСлову = ЭлементыФормы.ТаблицаСлов.ОтборСтрок.ПремияФильтра;
	ОтборПоСлову.ВидСравнения = ВидСравнения.Больше;
	ОтборПоСлову.Значение = 0;
	ОтборПоСлову.Использование = Истина;
	СтрокаСловаРезультата = Неопределено;
	Если МодальныйРежим Или ПараметрАктивизировать Тогда
		ПриИзмененииОтбора();
	КонецЕсли;
	Если Истина
		И СтрокаСловаРезультата <> Неопределено
		И СтрокаСловаРезультата = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока
		И ирОбщий.СтрНачинаетсяСЛкс(СтрокаСловаРезультата.Слово, мКонтекст)
	Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		ЗакрытьИВставитьСлово();
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	Если КлючУникальности = "Автотест" Тогда
		Возврат;
	КонецЕсли; 
	ирКлиент.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьОтборИСортировку.Пометка = Истина;
	Если Ложь
		Или ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = Неопределено
		Или Лев(ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока.НСлово, СтрДлина(ТекущееСлово)) <> НРег(ТекущееСлово)
	Тогда
		ЭлементыФормы.ТаблицаСлов.ВыделенныеСтроки.Очистить();
	КонецЕсли;
	ЭтаФорма.ТипКонтекста = ИмяТипаКонтекста();
	Если ТипКонтекста = "Строка" И ЗначениеЗаполнено(мСтруктураТипаКонтекста.ТипЯзыка) Тогда
		ЭтаФорма.ТипКонтекста = мСтруктураТипаКонтекста.ТипЯзыка;
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТекущееСлово;
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПерейтиКОпределению.Доступность = Истина
	//	И ЯзыкПрограммы = 1
	//	И Найти(ТипКонтекста, ".") > 0;
	//ЭтаФорма.Заголовок = "Контекст: " + Контекст;
	ЭтаФорма.Заголовок = "Тип: " + ТипКонтекста;
	Если ЗначениеЗаполнено(ОжидаемыйТип) Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " -> " + ОжидаемыйТип;
	КонецЕсли;
	Если Автозакрытие Тогда
		ПриИзмененииОтбора();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущееСлово) И ирКлиент.ЛиПерехватКлавиатурногоВводаЛкс() Тогда
		ТекущееСлово = " "; // Чтобы пустое значение затем тоже вызвало изменение
		ЭлементыФормы.ТаблицаСлов.Видимость = Ложь;
		ЭтаФорма.Описание = "";
	КонецЕсли;
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ПодключитьОбработчикОжидания("ПроверкаФокусаВводаВладельца", 2, Истина);;
	#КонецЕсли
КонецПроцедуры

Процедура УстановитьГраницыВыделенияФильтра()
	ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, ЭлементыФормы.ТекущееСлово,, Истина);
КонецПроцедуры

Процедура ПодходящиеСловаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если Истина
		И ЗначениеЗаполнено(ОжидаемыйТип)
		И (Ложь
			//Или ДанныеСтроки.Рейтинг >= ШагРейтингаСлова()
			Или Найти(ДанныеСтроки.ТипЗначения, ОжидаемыйТип) > 0)
	Тогда
		ОформлениеСтроки.ЦветФона = ирОбщий.ЦветФонаАкцентаЛкс();
	КонецЕсли;
	ирКлиент.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	//Если Лев(ДанныеСтроки.НСлово, СтрДлина(ТекущееСлово)) <> НРег(ТекущееСлово) Тогда
	//	ОформлениеСтроки.ЦветТекста = WebЦвета.Коричневый;
	//КонецЕсли;
	ЯчейкаКартинки = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаКартинки.ОтображатьКартинку = Истина;
	ИндексКартинки = ирКлиент.ИндексКартинкиСловаПодсказкиЛкс(ДанныеСтроки);
	Если ИндексКартинки >= 0 Тогда
		ЯчейкаКартинки.ИндексКартинки = ИндексКартинки;
	КонецЕсли;
	ОформитьЯчейкуТипаЗначения(ОформлениеСтроки, ДанныеСтроки);
	ДопСвойства = ирКлиент.ДопСвойстваЭлементаФормыЛкс(ЭтаФорма, Элемент);
	Если Истина
		И ЗначениеЗаполнено(ТекущееСлово)
		И ДопСвойства.ЗапретРазметкиВхождений <> Истина
		И ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьОтборИСортировку.Пометка
	Тогда
		ОформленноеСлово = ирОбщий.НайтиФильтрВСловеЛкс(Истина, ТекущееСлово, ДанныеСтроки.Слово, ДанныеСтроки.НСлово,, мПлатформа.ВыделениеРезультатовПоиска);
		ОформлениеСтроки.Ячейки.Слово.УстановитьТекст(ОформленноеСлово);
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииОтбора() Экспорт
	СписокФильтраПоТипуСлова = Новый СписокЗначений;
	Если ЭлементыФормы.ДействияФормы.Кнопки.НеМетоды.Пометка Тогда
		СписокФильтраПоТипуСлова.Добавить("Метод");
	КонецЕсли;
	Если ЭлементыФормы.ДействияФормы.Кнопки.НеСвойства.Пометка Тогда
		СписокФильтраПоТипуСлова.Добавить("Свойство");
	КонецЕсли;
	Если ЭлементыФормы.ДействияФормы.Кнопки.НеКлючевыеСлова.Пометка Тогда
		СписокФильтраПоТипуСлова.Добавить("Конструкция");
	КонецЕсли;
	ОтборПоТипуСлова = ЭлементыФормы.ТаблицаСлов.ОтборСтрок.ТипСлова;
	Если СписокФильтраПоТипуСлова.Количество() > 0 Тогда
		ОтборПоТипуСлова.ВидСравнения = ВидСравнения.НеВСписке;
		ОтборПоТипуСлова.Значение = СписокФильтраПоТипуСлова;
		ОтборПоТипуСлова.Использование = Истина;
	ИначеЕсли ОтборПоТипуСлова.ВидСравнения = ВидСравнения.НеВСписке Тогда
		ОтборПоТипуСлова.Использование = Ложь;
	КонецЕсли;
	НайтиПодходящиеСлова();
КонецПроцедуры

Процедура ДействияФормыНеМетоды(Кнопка)
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПриИзмененииОтбора();
КонецПроцедуры

Процедура ДействияФормыНеСвойства(Кнопка)
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПриИзмененииОтбора();
КонецПроцедуры

Процедура ДействияФормыНеКлючевыеСлова(Кнопка)
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПриИзмененииОтбора();
КонецПроцедуры

Процедура КоманднаяПанельФормыКонтекстнаяСправка(Кнопка = Неопределено)
	Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РодительИСлово = РодительИСловоСтрокиТаблицыСлов(ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока);
	ПутьКСлову = РодительИСлово.Слово;
	Если РодительИСлово.ВнутриГруппыОбщихМодулей Тогда
		ПутьКСлову = РодительИСлово.Родитель + "." + ПутьКСлову;
	КонецЕсли;
	Если ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока.ТипСлова = "Метод" Тогда
		ПутьКСлову = ПутьКСлову + "(";
	КонецЕсли;
	ФормаФокуса = ?(ЭтаФорма.ВводДоступен(), ЭтаФорма, ФормаВладелец);
	ФормаВызовМетода = ФормаВызовМетода();
	ФормаВызовМетода.ЗапомнитьПозициюКаретки(Ширина + 4);
	ОткрытьКонтекстнуюСправку(ПутьКСлову, ФормаФокуса);
	Если ирКэш.ЛиСеансТолстогоКлиентаУПЛкс() Тогда
		// Нельзя сразу активировать обратно эту форму, т.к. тогда платформа открытую форму сразу скроет и пользователь может не понять, что та форма открыта в отдельном окне
	Иначе
		ирКлиент.Форма_АктивироватьОткрытьЛкс(ФормаФокуса);
	КонецЕсли;
КонецПроцедуры

Процедура ПолеОтбораПоПодстрокеKeyDown(Элемент, КодСочетанияКлавиш)
	ОбработкаОбщихКлавиш(Элемент, КодСочетанияКлавиш);
КонецПроцедуры

Процедура КоманднаяПанельФормыВнутрь(Кнопка)
	ОткрытьДочерние();
КонецПроцедуры

Процедура ПриЗакрытии()
	ирКлиент.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	ТекущееСлово = "";
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаСлов; // Антибаг флатформы 8.3.12 чтобы каретка в поле текстового документа родительской формы не исчезала
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	ирКлиент.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

// Для нее еще нужна ОбработчикОжиданияСПараметрамиЛкс()
Процедура КлсКомандаНажатие(Кнопка) Экспорт
	ирКлиент.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура ТаблицаСловПриАктивизацииСтроки(Элемент)
	ирКлиент.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Описание = "";
	ПодключитьОбработчикОжидания("ОбновитьОписаниеСлова", 0.2, Истина);
КонецПроцедуры

Процедура ОбновитьОписаниеСлова() Экспорт
	Элемент = ЭлементыФормы.ТаблицаСлов;
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	СтруктураТипа = СтруктураТипаСлова(ТекущаяСтрока);
	Если СтруктураТипа <> Неопределено И СтруктураТипа.СтрокаОписания <> Неопределено Тогда
		ирКлиент.ОповеститьФормыПодсистемыЛкс("ПоказатьОписаниеСлова", СтруктураТипа, ЭтаФорма);
	КонецЕсли;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураОписания = ОписаниеТекущегоСловаАвтодополнения(Элемент.ТекущаяСтрока.Слово, Элемент.ТекущаяСтрока.ТипСлова = "Метод");
		Если СтруктураОписания <> Неопределено Тогда
			ЭтаФорма.Описание = СтруктураОписания.Описание;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//.
// Параметры:
//    ТекущаяСтрока - ОбработкаТабличнаяЧастьСтрока.ирКлсПолеТекстаПрограммы.ТаблицаСлов -
// Возвращаемое значение:
//    РезультатПоискаПоРегулярномуВыражению -
Функция СтруктураТипаСлова(ТекущаяСтрока = Неопределено) Экспорт
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока;
	КонецЕсли;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВернутьСтруктуруТипа = ТекущаяСтрока.Определение <> "Статистический";
		ТаблицаТипов = УточнитьТипЗначенияВСтрокеТаблицыСлов(ТекущаяСтрока, ВернутьСтруктуруТипа, Ложь);
		Если ТаблицаТипов <> Неопределено И ТаблицаТипов.Количество() > 0 Тогда
			СтруктураТипа = ТаблицаТипов[0];
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураТипа;
КонецФункции

Процедура КоманднаяПанельФормыПереброситьВведеннуюСтроку(Кнопка)
	#Если Сервер И Не Сервер Тогда
		ПереброситьВведеннуюСтроку();
	#КонецЕсли
	// Без задержки к сожалению не переключается фокус между полями ввода
	ПодключитьОбработчикОжидания("ПереброситьВведеннуюСтроку", 0.1, Истина);
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	ирКлиент.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);
	Если Источник = "KeyboardHook" Тогда
		//Сообщить(Данные); // Для отладки
		Если ирОбщий.ПроверитьНажатиеКлавишЛкс(Данные, "CTRL+F1") Тогда
			КоманднаяПанельФормыКонтекстнаяСправка();
		ИначеЕсли ТекущийЭлемент = ЭлементыФормы.ТекущееСлово Тогда
			ЗначениеИзменилось = ТекущийЭлемент.Значение <> ТекущееСлово;
			Если ЗначениеИзменилось Тогда
				ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, ТекущийЭлемент, ТекущийЭлемент.Значение);
			КонецЕсли;
			Если Не ЭлементУправленияTextBoxKeyDown(ТекущийЭлемент, Данные) Тогда
				Если ЗначениеИзменилось Тогда
					ПриИзмененииОтбора();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	ирКлиент.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);
КонецПроцедуры

Процедура КоманднаяПанельФормыПерейтиКОпределению(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураТипа = СтруктураТипаСлова();
	Если СтруктураТипа <> Неопределено И СтруктураТипа.СтрокаОписания <> Неопределено Тогда
		Если Истина
			И Найти(ТипКонтекста, ".") > 0
			И ирОбщий.МножественноеИмяМДЛкс(ирОбщий.ПервыйФрагментЛкс(ТипКонтекста)) <> Неопределено
		Тогда
			ФормаКолонки = ирКлиент.ОткрытьКолонкуБДЛкс(ТипКонтекста, ТекущаяСтрока.Слово);
		КонецЕсли;
		Если ФормаКолонки = Неопределено Тогда
			ОткрытьОпределениеСтруктурыТипа(СтруктураТипа);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыНастройки(Кнопка)
	Закрыть();
	ПолучитьФорму("ФормаНастройки").Открыть();
КонецПроцедуры

Процедура ПроверкаФокусаВводаВладельца()
	// Плохой код. При открытии контекстного меню форма сразу закрывается.
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	Окна = ПолучитьОкна();
	Если Истина
		И Не ВводДоступен()
		И ирОбщий.НайтиЭлементКоллекцииЛкс(Окна, "Заголовок", "Настройка списка") = Неопределено
		И (Ложь
			Или Не ФормаВладелец.Открыта()
			Или Не ФормаВладелец.ВводДоступен())
	Тогда
		Закрыть();
	Иначе
		ПодключитьОбработчикОжидания("ПроверкаФокусаВводаВладельца", 1, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыПереключитьОтборИСортировку(Кнопка = Неопределено) Экспорт
	НовыйРежим = Не ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьОтборИСортировку.Пометка;
	ЭлементыФормы.ДействияФормы.Кнопки.ПереключитьОтборИСортировку.Пометка = НовыйРежим;
	НайтиПодходящиеСлова(НовыйРежим);
КонецПроцедуры

Процедура ТекущееСловоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ирКлиент.ЛиПерехватКлавиатурногоВводаЛкс() Тогда
		Возврат;
	КонецЕсли;
	ирКлиент.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(ЭтаФорма, Элемент, Текст);
	ПриИзмененииОтбора();
КонецПроцедуры

Процедура КоманднаяПанельФормыВыбрать(Кнопка)
	ЭтаФорма.СтрокаСловаРезультата = ЭлементыФормы.ТаблицаСлов.ТекущаяСтрока;
	ЗакрытьИВставитьСлово();
КонецПроцедуры

Процедура КоманднаяПанельФормыПерехватКлавиатуры(Кнопка)
	ирКлиент.ОткрытьПанельИнструментовЛкс(, Истина, "ПерехватКлавиатурногоВводаВОбычномПриложении");
КонецПроцедуры

Процедура ТаблицаСловПриПолученииДанных(Элемент, ОформленияСтрок)
	мЧислоВидимыхСтрок = Макс(мЧислоВидимыхСтрок, ОформленияСтрок.Количество());
КонецПроцедуры

ирКлиент.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстаПрограммы.Форма.Автодополнение");
ЭтаФорма.РазрешитьСостояниеОбычное = Ложь;
ЭтаФорма.РазрешитьСоединятьОкно = Ложь;
СтруктураКлюча = Новый Структура("НомерСтроки");
ПодходящиеСлова = ТаблицаСлов.ВыгрузитьКолонки();
Если ирКлиент.ЛиПерехватКлавиатурногоВводаЛкс() Тогда
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПерехватКлавиатуры);
КонецЕсли;
мЧислоВидимыхСтрок = 0;
